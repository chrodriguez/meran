.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Rose::DB::Object::MakeMethods::Date 3"
.TH Rose::DB::Object::MakeMethods::Date 3 "2010-04-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rose::DB::Object::MakeMethods::Date \- Create date\-related methods for Rose::DB::Object\-derived objects.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package MyDBObject;
\&
\&    use base \*(AqRose::DB::Object\*(Aq;
\&
\&    use Rose::DB::Object::MakeMethods::Date
\&    (
\&      date => 
\&      [
\&        \*(Aqstart_date\*(Aq,
\&        \*(Aqend_date\*(Aq => { default => \*(Aq2005\-01\-30\*(Aq }
\&      ],
\&
\&      datetime => 
\&      [
\&        \*(Aqdate_created\*(Aq,
\&        \*(Aqother_date\*(Aq => { type => \*(Aqdatetime year to minute\*(Aq },
\&      ],
\&
\&      timestamp => 
\&      [
\&        \*(Aqlast_modified\*(Aq => { default => \*(Aq2005\-01\-30 12:34:56.123\*(Aq }
\&      ],
\&
\&      epoch => 
\&      [
\&        due_date    => { default => \*(Aq2003\-01\-02 12:34:56\*(Aq },
\&        event_start => { hires => 1 },
\&      ],
\&    );
\&
\&    ...
\&
\&    $o\->start_date(\*(Aq2/3/2004 8am\*(Aq);
\&    $dt = $o\->start_date(truncate => \*(Aqday\*(Aq);
\&
\&    print $o\->end_date(format => \*(Aq%m/%d/%Y\*(Aq); # 2005\-01\-30
\&
\&    $o\->date_created(\*(Aqnow\*(Aq);
\&
\&    $o\->other_date(\*(Aq2001\-02\-20 12:34:56\*(Aq);
\&
\&    # 02/20/2001 12:34:00
\&    print $o\->other_date(format => \*(Aq%m/%d/%Y %H:%M:%S\*(Aq); 
\&
\&    print $o\->last_modified(format => \*(Aq%S.%5N\*(Aq); # 56.12300 
\&
\&    print $o\->due_date(format => \*(Aq%m/%d/%Y\*(Aq); # 01/02/2003
\&
\&    $o\->event_start(\*(Aq1980\-10\-11 6:00.123456\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Rose::DB::Object::MakeMethods::Date\*(C'\fR creates methods that deal with dates, and inherits from Rose::Object::MakeMethods.  See the Rose::Object::MakeMethods documentation to learn about the interface.  The method types provided by this module are described below.
.PP
All method types defined by this module are designed to work with objects that are subclasses of (or otherwise conform to the interface of) Rose::DB::Object.  In particular, the object is expected to have a db method that returns a Rose::DB\-derived object.  See the Rose::DB::Object documentation for more details.
.SH "METHODS TYPES"
.IX Header "METHODS TYPES"
.IP "\fBdate\fR" 4
.IX Item "date"
Create get/set methods for date (year, month, day) attributes.
.RS 4
.IP "Options" 4
.IX Item "Options"
.RS 4
.PD 0
.ie n .IP """default""" 4
.el .IP "\f(CWdefault\fR" 4
.IX Item "default"
.PD
Determines the default value of the attribute.
.ie n .IP """hash_key""" 4
.el .IP "\f(CWhash_key\fR" 4
.IX Item "hash_key"
The key inside the hash-based object to use for the storage of this
attribute.  Defaults to the name of the method.
.ie n .IP """interface""" 4
.el .IP "\f(CWinterface\fR" 4
.IX Item "interface"
Choose the interface.  The default is \f(CW\*(C`get_set\*(C'\fR.
.ie n .IP """time_zone""" 4
.el .IP "\f(CWtime_zone\fR" 4
.IX Item "time_zone"
The time zone name, which must be in a format that is understood by DateTime::TimeZone.
.RE
.RS 4
.RE
.IP "Interfaces" 4
.IX Item "Interfaces"
.RS 4
.PD 0
.ie n .IP """get_set""" 4
.el .IP "\f(CWget_set\fR" 4
.IX Item "get_set"
.PD
Creates a get/set method for a date (year, month, day) attribute.  When setting the attribute, the value is passed through the parse_date method of the object's db attribute.  If that fails, the value is passed to Rose::DateTime::Util's \fIparse_date()\fR function.  If that fails, a fatal error will occur.
.Sp
The time zone of the DateTime object that results from a successful parse is set to the value of the \f(CW\*(C`time_zone\*(C'\fR option, if defined.  Otherwise, it is set to the server_time_zone value of the  object's db attribute using DateTime's set_time_zone method.
.Sp
When saving to the database, the method will pass the attribute value through the format_date method of the object's db attribute before returning it.  Otherwise, the value is returned as-is.
.Sp
This method is designed to allow date values to make a round trip from and back into the database without ever being \*(L"inflated\*(R" into DateTime objects.  Any use of the attribute (get or set) outside the context of loading from or saving to the database will cause the value to be \*(L"inflated\*(R" using the  parse_date method of the object's db attribute.  If that fails, Rose::DateTime::Util's \fIparse_date()\fR function is tried.  If that fails, a fatal error will occur.
.Sp
If passed two arguments and the first argument is \*(L"format\*(R", then the second argument is taken as a format string and passed to Rose::DateTime::Util's format_date function along with the current value of the date attribute.  Example:
.Sp
.Vb 2
\&    $o\->start_date(\*(Aq2004\-05\-22\*(Aq);
\&    print $o\->start_date(format => \*(Aq%A\*(Aq); # "Saturday"
.Ve
.Sp
If passed two arguments and the first argument is \*(L"truncate\*(R", then the second argument is taken as the value of the \f(CW\*(C`to\*(C'\fR argument to DateTime's truncate method, which is applied to a clone of the current value of the date attribute, which is then returned.  Example:
.Sp
.Vb 1
\&    $o\->start_date(\*(Aq2004\-05\-22\*(Aq);
\&
\&    # Equivalent to: 
\&    # $d = $o\->start_date\->clone\->truncate(to => \*(Aqmonth\*(Aq)
\&    $d = $o\->start_date(truncate => \*(Aqmonth\*(Aq);
.Ve
.Sp
If the date attribute is undefined, then undef is returned (i.e., no clone or call to truncate is made).
.Sp
If a valid date keyword is passed as an argument, the value will never be \*(L"inflated\*(R" but rather passed to the database \fIand\fR returned to other code unmodified.  That means that the \*(L"truncate\*(R" and \*(L"format\*(R" calls described above will also return the date keyword unmodified.  See the Rose::DB documentation for more information on date keywords.
.ie n .IP """get""" 4
.el .IP "\f(CWget\fR" 4
.IX Item "get"
Creates an accessor method for a date (year, month, day) attribute.  This method behaves like the \f(CW\*(C`get_set\*(C'\fR method, except that the value cannot be set.
.ie n .IP """set""" 4
.el .IP "\f(CWset\fR" 4
.IX Item "set"
Creates a mutator method for a date (year, month, day) attribute.  This method behaves like the \f(CW\*(C`get_set\*(C'\fR method, except that a fatal error will occur if no arguments are passed.  It also does not support the \f(CW\*(C`truncate\*(C'\fR and \f(CW\*(C`format\*(C'\fR parameters.
.RE
.RS 4
.RE
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 1
\&    package MyDBObject;
\&
\&    use base \*(AqRose::DB::Object\*(Aq;
\&
\&    use Rose::DB::Object::MakeMethods::Date
\&    (
\&      date => 
\&      [
\&        \*(Aqstart_date\*(Aq,
\&        \*(Aqend_date\*(Aq => { default => \*(Aq2005\-01\-30\*(Aq }
\&      ],
\&    );
\&
\&    ...
\&
\&    $o\->start_date(\*(Aq2/3/2004\*(Aq);
\&    $dt = $o\->start_date(truncate => \*(Aqweek\*(Aq);
\&
\&    print $o\->end_date(format => \*(Aq%m/%d/%Y\*(Aq); # 01/30/2005
.Ve
.RE
.IP "\fBdatetime\fR" 4
.IX Item "datetime"
Create get/set methods for \*(L"datetime\*(R" (year, month, day, hour, minute, second) attributes.
.RS 4
.IP "Options" 4
.IX Item "Options"
.RS 4
.PD 0
.ie n .IP """default""" 4
.el .IP "\f(CWdefault\fR" 4
.IX Item "default"
.PD
Determines the default value of the attribute.
.ie n .IP """hash_key""" 4
.el .IP "\f(CWhash_key\fR" 4
.IX Item "hash_key"
The key inside the hash-based object to use for the storage of this
attribute.  Defaults to the name of the method.
.ie n .IP """interface""" 4
.el .IP "\f(CWinterface\fR" 4
.IX Item "interface"
Choose the interface.  The default is \f(CW\*(C`get_set\*(C'\fR.
.ie n .IP """time_zone""" 4
.el .IP "\f(CWtime_zone\fR" 4
.IX Item "time_zone"
The time zone name, which must be in a format that is understood by DateTime::TimeZone.
.ie n .IP """type""" 4
.el .IP "\f(CWtype\fR" 4
.IX Item "type"
The datetime variant as a string.  Each space in the string is replaced with an underscore \*(L"_\*(R", then the string is appended to \*(L"format_\*(R" and \*(L"parse_\*(R" in order to form the names of the methods called on the object's db attribute to format and parse datetime values.  The default is \*(L"datetime\*(R", which means that the \f(CW\*(C`format_datetime()\*(C'\fR and \f(CW\*(C`parse_datetime()\*(C'\fR methods will be used.
.Sp
Any string that results in a set of method names that are supported by the object's db attribute is acceptable.  Check the documentation for the class of the object's db attribute for a list of valid method names.
.RE
.RS 4
.RE
.IP "Interfaces" 4
.IX Item "Interfaces"
.RS 4
.PD 0
.ie n .IP """get_set""" 4
.el .IP "\f(CWget_set\fR" 4
.IX Item "get_set"
.PD
Creates a get/set method for a \*(L"datetime\*(R" attribute.  The exact granularity of the \*(L"datetime\*(R" value is determined by the value of the \f(CW\*(C`type\*(C'\fR option (see above).
.Sp
When setting the attribute, the value is passed through the \f(CW\*(C`parse_TYPE()\*(C'\fR method of the object's db attribute, where \f(CW\*(C`TYPE\*(C'\fR is the value of the \f(CW\*(C`type\*(C'\fR option.  If that fails, the value is passed to Rose::DateTime::Util's \fIparse_date()\fR function.  If that fails, a fatal error will occur.
.Sp
The time zone of the DateTime object that results from a successful parse is set to the value of the \f(CW\*(C`time_zone\*(C'\fR option, if defined.  Otherwise, it is set to the server_time_zone value of the  object's db attribute using DateTime's set_time_zone method.
.Sp
When saving to the database, the method will pass the attribute value through the \f(CW\*(C`format_TYPE()\*(C'\fR method of the object's db attribute before returning it, where \f(CW\*(C`TYPE\*(C'\fR is the value of the \f(CW\*(C`type\*(C'\fR option.  Otherwise, the value is returned as-is.
.Sp
This method is designed to allow datetime values to make a round trip from and back into the database without ever being \*(L"inflated\*(R" into DateTime objects.  Any use of the attribute (get or set) outside the context of loading from or saving to the database will cause the value to be \*(L"inflated\*(R" using the  \f(CW\*(C`parse_TYPE()\*(C'\fR method of the object's db attribute, where \f(CW\*(C`TYPE\*(C'\fR is the value of the \f(CW\*(C`type\*(C'\fR option.  If that fails, Rose::DateTime::Util's \fIparse_date()\fR function is tried.  If that fails, a fatal error will occur.
.Sp
If passed two arguments and the first argument is \*(L"format\*(R", then the second argument is taken as a format string and passed to Rose::DateTime::Util's format_date function along with the current value of the datetime attribute.  Example:
.Sp
.Vb 2
\&    $o\->start_date(\*(Aq2004\-05\-22 12:34:56\*(Aq);
\&    print $o\->start_date(format => \*(Aq%A\*(Aq); # "Saturday"
.Ve
.Sp
If passed two arguments and the first argument is \*(L"truncate\*(R", then the second argument is taken as the value of the \f(CW\*(C`to\*(C'\fR argument to DateTime's truncate method, which is applied to a clone of the current value of the datetime attribute, which is then returned.  Example:
.Sp
.Vb 1
\&    $o\->start_date(\*(Aq2004\-05\-22 04:32:01\*(Aq);
\&
\&    # Equivalent to: 
\&    # $d = $o\->start_date\->clone\->truncate(to => \*(Aqmonth\*(Aq)
\&    $d = $o\->start_date(truncate => \*(Aqmonth\*(Aq);
.Ve
.Sp
If the datetime attribute is undefined, then undef is returned (i.e., no clone or call to truncate is made).
.Sp
If a valid datetime keyword is passed as an argument, the value will never be \*(L"inflated\*(R" but rather passed to the database \fIand\fR returned to other code unmodified.  That means that the \*(L"truncate\*(R" and \*(L"format\*(R" calls described above will also return the datetime keyword unmodified.  See the Rose::DB documentation for more information on datetime keywords.
.ie n .IP """get""" 4
.el .IP "\f(CWget\fR" 4
.IX Item "get"
Creates an accessor method for a \*(L"datetime\*(R" attribute.  This method behaves like the \f(CW\*(C`get_set\*(C'\fR method, except that the value cannot be set.
.ie n .IP """set""" 4
.el .IP "\f(CWset\fR" 4
.IX Item "set"
Creates a mutator method for a \*(L"datetime\*(R" attribute.  This method behaves like the \f(CW\*(C`get_set\*(C'\fR method, except that a fatal error will occur if no arguments are passed.  It also does not support the \f(CW\*(C`truncate\*(C'\fR and \f(CW\*(C`format\*(C'\fR parameters.
.RE
.RS 4
.RE
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 1
\&    package MyDBObject;
\&
\&    use base \*(AqRose::DB::Object\*(Aq;
\&
\&    use Rose::DB::Object::MakeMethods::Date
\&    (
\&      datetime => 
\&      [
\&        \*(Aqstart_date\*(Aq,
\&        \*(Aqend_date\*(Aq   => { default => \*(Aq2005\-01\-30 12:34:56\*(Aq }
\&        \*(Aqother_date\*(Aq => { type => \*(Aqdatetime year to minute\*(Aq },
\&      ],
\&    );
\&
\&    ...
\&
\&    $o\->start_date(\*(Aq2/3/2004 8am\*(Aq);
\&    $dt = $o\->start_date(truncate => \*(Aqday\*(Aq);
\&
\&    # 01/30/2005 12:34:56
\&    print $o\->end_date(format => \*(Aq%m/%d/%Y %H:%M:%S\*(Aq); 
\&
\&    $o\->other_date(\*(Aq2001\-02\-20 12:34:56\*(Aq);
\&
\&    # 02/20/2001 12:34:00
\&    print $o\->other_date(format => \*(Aq%m/%d/%Y %H:%M:%S\*(Aq);
.Ve
.RE
.IP "\fBepoch\fR" 4
.IX Item "epoch"
Create get/set methods for an attribute that stores seconds since the Unix epoch.
.RS 4
.IP "Options" 4
.IX Item "Options"
.RS 4
.PD 0
.ie n .IP """default""" 4
.el .IP "\f(CWdefault\fR" 4
.IX Item "default"
.PD
Determines the default value of the attribute.
.ie n .IP """hash_key""" 4
.el .IP "\f(CWhash_key\fR" 4
.IX Item "hash_key"
The key inside the hash-based object to use for the storage of this
attribute.  Defaults to the name of the method.
.ie n .IP """hires""" 4
.el .IP "\f(CWhires\fR" 4
.IX Item "hires"
A boolean flag that indicates whether or not epoch values should be stored with fractional seconds.  If true, then up to six (6) digits past the decimal point are preserved.  The default is false.
.ie n .IP """interface""" 4
.el .IP "\f(CWinterface\fR" 4
.IX Item "interface"
Choose the interface.  The default is \f(CW\*(C`get_set\*(C'\fR.
.ie n .IP """time_zone""" 4
.el .IP "\f(CWtime_zone\fR" 4
.IX Item "time_zone"
The time zone name, which must be in a format that is understood by DateTime::TimeZone.
.RE
.RS 4
.RE
.IP "Interfaces" 4
.IX Item "Interfaces"
.RS 4
.PD 0
.ie n .IP """get_set""" 4
.el .IP "\f(CWget_set\fR" 4
.IX Item "get_set"
.PD
Creates a get/set method for an attribute that stores seconds since the Unix epoch.  When setting the attribute, the value is passed through Rose::DateTime::Util's \fIparse_date()\fR function.  If that fails, a fatal error will occur.
.Sp
The time zone of the DateTime object that results from a successful parse is set to the value of the \f(CW\*(C`time_zone\*(C'\fR option, if defined.  Otherwise, it is set to the server_time_zone value of the  object's db attribute using DateTime's set_time_zone method.
.Sp
When saving to the database, the epoch or hires_epoch method will be called on the DateTime object, depending on the value of the \f(CW\*(C`hires\*(C'\fR option.  (See above.)
.Sp
This method is designed to allow values to make a round trip from and back into the database without ever being \*(L"inflated\*(R" into DateTime objects.  Any use of the attribute (get or set) outside the context of loading from or saving to the database will cause the value to be \*(L"inflated\*(R" using Rose::DateTime::Util's \fIparse_date()\fR function.  If that fails, a fatal error will occur.
.Sp
If passed two arguments and the first argument is \*(L"format\*(R", then the second argument is taken as a format string and passed to Rose::DateTime::Util's format_date function along with the current value of the attribute.  Example:
.Sp
.Vb 2
\&    $o\->due_date(\*(Aq2004\-05\-22\*(Aq);
\&    print $o\->due_date(format => \*(Aq%A\*(Aq); # "Saturday"
.Ve
.Sp
If passed two arguments and the first argument is \*(L"truncate\*(R", then the second argument is taken as the value of the \f(CW\*(C`to\*(C'\fR argument to DateTime's truncate method, which is applied to a clone of the current value of the attribute, which is then returned.  Example:
.Sp
.Vb 1
\&    $o\->due_date(\*(Aq2004\-05\-22\*(Aq);
\&
\&    # Equivalent to: 
\&    # $d = $o\->due_date\->clone\->truncate(to => \*(Aqmonth\*(Aq)
\&    $d = $o\->due_date(truncate => \*(Aqmonth\*(Aq);
.Ve
.Sp
If the attribute is undefined, then undef is returned (i.e., no clone or call to truncate is made).
.ie n .IP """get""" 4
.el .IP "\f(CWget\fR" 4
.IX Item "get"
Creates an accessor method an attribute that stores seconds since the Unix epoch.  This method behaves like the \f(CW\*(C`get_set\*(C'\fR method, except that the value cannot be set.
.ie n .IP """set""" 4
.el .IP "\f(CWset\fR" 4
.IX Item "set"
Creates a mutator method for an attribute that stores seconds since the Unix epoch.  This method behaves like the \f(CW\*(C`get_set\*(C'\fR method, except that a fatal error will occur if no arguments are passed.  It also does not support the \f(CW\*(C`truncate\*(C'\fR and \f(CW\*(C`format\*(C'\fR parameters.
.RE
.RS 4
.RE
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 1
\&    package MyDBObject;
\&
\&    use base \*(AqRose::DB::Object\*(Aq;
\&
\&    use Rose::DB::Object::MakeMethods::Date
\&    (
\&      epoch => 
\&      [
\&        due_date    => { default => \*(Aq2003\-01\-02 12:34:56\*(Aq },
\&        event_start => { hires => 1 },
\&      ],
\&    );
\&
\&    ...
\&
\&    print $o\->due_date(format => \*(Aq%m/%d/%Y\*(Aq); # 01/02/2003
\&    $dt = $o\->due_date(truncate => \*(Aqweek\*(Aq);
\&
\&    $o\->event_start(\*(Aq1980\-10\-11 6:00.123456\*(Aq);
\&    print $o\->event_start(format => \*(Aq%6N\*(Aq); # 123456
.Ve
.RE
.IP "\fBtimestamp\fR" 4
.IX Item "timestamp"
Create get/set methods for \*(L"timestamp\*(R" (year, month, day, hour, minute, second, fractional seconds) attributes.
.RS 4
.IP "Options" 4
.IX Item "Options"
.RS 4
.PD 0
.ie n .IP """default""" 4
.el .IP "\f(CWdefault\fR" 4
.IX Item "default"
.PD
Determines the default value of the attribute.
.ie n .IP """hash_key""" 4
.el .IP "\f(CWhash_key\fR" 4
.IX Item "hash_key"
The key inside the hash-based object to use for the storage of this
attribute.  Defaults to the name of the method.
.ie n .IP """interface""" 4
.el .IP "\f(CWinterface\fR" 4
.IX Item "interface"
Choose the interface.  The default interface is \f(CW\*(C`get_set\*(C'\fR.
.ie n .IP """time_zone""" 4
.el .IP "\f(CWtime_zone\fR" 4
.IX Item "time_zone"
A time zone name, which must be in a format that is understood by DateTime::TimeZone.
.RE
.RS 4
.RE
.IP "Interfaces" 4
.IX Item "Interfaces"
.RS 4
.PD 0
.ie n .IP """get_set""" 4
.el .IP "\f(CWget_set\fR" 4
.IX Item "get_set"
.PD
Creates a get/set method for a \*(L"timestamp\*(R" (year, month, day, hour, minute, second, fractional seconds) attribute.  When setting the attribute, the value is passed through the \f(CW\*(C`parse_timestamp()\*(C'\fR method of the object's db attribute.  If that fails, the value is passed to Rose::DateTime::Util's \fIparse_date()\fR function.  If that fails, a fatal error will occur.
.Sp
The time zone of the DateTime object that results from a successful parse is set to the value of the \f(CW\*(C`time_zone\*(C'\fR option, if defined.  Otherwise, it is set to the server_time_zone value of the  object's db attribute using DateTime's set_time_zone method.
.Sp
When saving to the database, the method will pass the attribute value through the format_timestamp method of the object's db attribute before returning it.  Otherwise, the value is returned as-is.
.Sp
This method is designed to allow timestamp values to make a round trip from and back into the database without ever being \*(L"inflated\*(R" into DateTime objects.  Any use of the attribute (get or set) outside the context of loading from or saving to the database will cause the value to be \*(L"inflated\*(R" using the  \f(CW\*(C`parse_timestamp()\*(C'\fR method of the object's db attribute.  If that fails, Rose::DateTime::Util's \fIparse_date()\fR function is tried.  If that fails, a fatal error will occur.
.Sp
If passed two arguments and the first argument is \*(L"format\*(R", then the second argument is taken as a format string and passed to Rose::DateTime::Util's format_date function along with the current value of the timestamp attribute.  Example:
.Sp
.Vb 2
\&    $o\->start_date(\*(Aq2004\-05\-22 12:34:56.123\*(Aq);
\&    print $o\->start_date(format => \*(Aq%A\*(Aq); # "Saturday"
.Ve
.Sp
If passed two arguments and the first argument is \*(L"truncate\*(R", then the second argument is taken as the value of the \f(CW\*(C`to\*(C'\fR argument to DateTime's truncate method, which is applied to a clone of the current value of the timestamp attribute, which is then returned.  Example:
.Sp
.Vb 1
\&    $o\->start_date(\*(Aq2004\-05\-22 04:32:01.456\*(Aq);
\&
\&    # Equivalent to: 
\&    # $d = $o\->start_date\->clone\->truncate(to => \*(Aqmonth\*(Aq)
\&    $d = $o\->start_date(truncate => \*(Aqmonth\*(Aq);
.Ve
.Sp
If the timestamp attribute is undefined, then undef is returned (i.e., no clone or call to truncate is made).
.Sp
If a valid timestamp keyword is passed as an argument, the value will never be \*(L"inflated\*(R" but rather passed to the database \fIand\fR returned to other code unmodified.  That means that the \*(L"truncate\*(R" and \*(L"format\*(R" calls described above will also return the timestamp keyword unmodified.  See the Rose::DB documentation for more information on timestamp keywords.
.ie n .IP """get""" 4
.el .IP "\f(CWget\fR" 4
.IX Item "get"
Creates an accessor method for a \*(L"timestamp\*(R" (year, month, day, hour, minute, second, fractional seconds) attribute.  This method behaves like the \f(CW\*(C`get_set\*(C'\fR method, except that the value cannot be set.
.ie n .IP """set""" 4
.el .IP "\f(CWset\fR" 4
.IX Item "set"
Creates a mutator method for a \*(L"timestamp\*(R" (year, month, day, hour, minute, second, fractional seconds) attribute.  This method behaves like the \f(CW\*(C`get_set\*(C'\fR method, except that a fatal error will occur if no arguments are passed.  It also does not support the \f(CW\*(C`truncate\*(C'\fR and \f(CW\*(C`format\*(C'\fR parameters.
.RE
.RS 4
.RE
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 1
\&    package MyDBObject;
\&
\&    use base \*(AqRose::DB::Object\*(Aq;
\&
\&    use Rose::DB::Object::MakeMethods::Date
\&    (
\&      timestamp => 
\&      [
\&        \*(Aqstart_date\*(Aq,
\&        \*(Aqend_date\*(Aq => { default => \*(Aq2005\-01\-30 12:34:56.123\*(Aq }
\&      ],
\&    );
\&
\&    ...
\&
\&    $o\->start_date(\*(Aq2/3/2004 8am\*(Aq);
\&    $dt = $o\->start_date(truncate => \*(Aqday\*(Aq);
\&
\&    # 01/30/2005 12:34:56.12300
\&    print $o\->end_date(format => \*(Aq%m/%d/%Y %H:%M:%S.%5N\*(Aq);
.Ve
.RE
.IP "\fBtimestamp_without_time_zone\fR" 4
.IX Item "timestamp_without_time_zone"
This is identical to the timestamp method described above, but with the \f(CW\*(C`time_zone\*(C'\fR parameter always set to the value \*(L"floating\*(R".  Any attempt to set the \f(CW\*(C`time_zone\*(C'\fR parameter explicitly will cause a fatal error.
.IP "\fBtimestamp_with_time_zone\fR" 4
.IX Item "timestamp_with_time_zone"
Create get/set methods for \*(L"timestamp with time zone\*(R" (year, month, day, hour, minute, second, fractional seconds, time zone) attributes.
.RS 4
.IP "Options" 4
.IX Item "Options"
.RS 4
.PD 0
.ie n .IP """default""" 4
.el .IP "\f(CWdefault\fR" 4
.IX Item "default"
.PD
Determines the default value of the attribute.
.ie n .IP """hash_key""" 4
.el .IP "\f(CWhash_key\fR" 4
.IX Item "hash_key"
The key inside the hash-based object to use for the storage of this
attribute.  Defaults to the name of the method.
.ie n .IP """interface""" 4
.el .IP "\f(CWinterface\fR" 4
.IX Item "interface"
Choose the interface.  The default interface is \f(CW\*(C`get_set\*(C'\fR.
.ie n .IP """time_zone""" 4
.el .IP "\f(CWtime_zone\fR" 4
.IX Item "time_zone"
A time zone name, which must be in a format that is understood by DateTime::TimeZone.
.RE
.RS 4
.RE
.IP "Interfaces" 4
.IX Item "Interfaces"
.RS 4
.PD 0
.ie n .IP """get_set""" 4
.el .IP "\f(CWget_set\fR" 4
.IX Item "get_set"
.PD
Creates a get/set method for a \*(L"timestamp with time zone\*(R" (year, month, day, hour, minute, second, fractional seconds, time zone) attribute.  When setting the attribute, the value is passed through the \f(CW\*(C`parse_timestamp_with_timezone()\*(C'\fR method of the object's db attribute.  If that fails, the value is passed to Rose::DateTime::Util's \fIparse_date()\fR function.  If that fails, a fatal error will occur.
.Sp
The time zone of the DateTime object will be set according to the successful parse of the \*(L"timestamp with time zone\*(R" value.  If the \f(CW\*(C`time_zone\*(C'\fR option is set, then the time zone of the DateTime object is set to this value.  Note that this happens \fIafter\fR the successful parse, which means that this operation may change the time and/or date according to the difference between the time zone of the value as originally parsed and the new time zone set according to the \f(CW\*(C`time_zone\*(C'\fR option.
.Sp
When saving to the database, the method will pass the attribute value through the format_timestamp_with_timezone method of the object's db attribute before returning it.  Otherwise, the value is returned as-is.
.Sp
This method is designed to allow timestamp values to make a round trip from and back into the database without ever being \*(L"inflated\*(R" into DateTime objects.  Any use of the attribute (get or set) outside the context of loading from or saving to the database will cause the value to be \*(L"inflated\*(R" using the  \f(CW\*(C`parse_timestamp_with_time_zone()\*(C'\fR method of the object's db attribute.  If that fails, Rose::DateTime::Util's \fIparse_date()\fR function is tried.  If that fails, a fatal error will occur.
.Sp
If passed two arguments and the first argument is \*(L"format\*(R", then the second argument is taken as a format string and passed to Rose::DateTime::Util's format_date function along with the current value of the timestamp attribute.  Example:
.Sp
.Vb 2
\&    $o\->start_date(\*(Aq2004\-05\-22 12:34:56.123\*(Aq);
\&    print $o\->start_date(format => \*(Aq%A\*(Aq); # "Saturday"
.Ve
.Sp
If passed two arguments and the first argument is \*(L"truncate\*(R", then the second argument is taken as the value of the \f(CW\*(C`to\*(C'\fR argument to DateTime's truncate method, which is applied to a clone of the current value of the timestamp attribute, which is then returned.  Example:
.Sp
.Vb 1
\&    $o\->start_date(\*(Aq2004\-05\-22 04:32:01.456\*(Aq);
\&
\&    # Equivalent to: 
\&    # $d = $o\->start_date\->clone\->truncate(to => \*(Aqmonth\*(Aq)
\&    $d = $o\->start_date(truncate => \*(Aqmonth\*(Aq);
.Ve
.Sp
If the timestamp attribute is undefined, then undef is returned (i.e., no clone or call to truncate is made).
.Sp
If a valid timestamp keyword is passed as an argument, the value will never be \*(L"inflated\*(R" but rather passed to the database \fIand\fR returned to other code unmodified.  That means that the \*(L"truncate\*(R" and \*(L"format\*(R" calls described above will also return the timestamp keyword unmodified.  See the Rose::DB documentation for more information on timestamp keywords.
.ie n .IP """get""" 4
.el .IP "\f(CWget\fR" 4
.IX Item "get"
Creates an accessor method for a \*(L"timestamp with time zone\*(R" (year, month, day, hour, minute, second, fractional seconds, time zone) attribute.  This method behaves like the \f(CW\*(C`get_set\*(C'\fR method, except that the value cannot be set.
.ie n .IP """set""" 4
.el .IP "\f(CWset\fR" 4
.IX Item "set"
Creates a mutator method for a \*(L"timestamp with time zone\*(R" (year, month, day, hour, minute, second, fractional seconds, time zone) attribute.  This method behaves like the \f(CW\*(C`get_set\*(C'\fR method, except that a fatal error will occur if no arguments are passed.  It also does not support the \f(CW\*(C`truncate\*(C'\fR and \f(CW\*(C`format\*(C'\fR parameters.
.RE
.RS 4
.RE
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 1
\&    package MyDBObject;
\&
\&    use base \*(AqRose::DB::Object\*(Aq;
\&
\&    use Rose::DB::Object::MakeMethods::Date
\&    (
\&      timestamp_with_timezone => 
\&      [
\&        \*(Aqstart_date\*(Aq,
\&        \*(Aqend_date\*(Aq => { default => \*(Aq2005\-01\-30 12:34:56.123\*(Aq }
\&      ],
\&    );
\&
\&    ...
\&
\&    $o\->start_date(\*(Aq2/3/2004 8am\*(Aq);
\&    $dt = $o\->start_date(truncate => \*(Aqday\*(Aq);
\&
\&    # 01/30/2005 12:34:56.12300
\&    print $o\->end_date(format => \*(Aq%m/%d/%Y %H:%M:%S.%5N\*(Aq);
.Ve
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
John C. Siracusa (siracusa@gmail.com)
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 2010 by John C. Siracusa.  All rights reserved.  This program is
free software; you can redistribute it and/or modify it under the same terms
as Perl itself.
