.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Rose::DB 3"
.TH Rose::DB 3 "2012-05-25" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rose::DB \- A DBI wrapper and abstraction layer.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package My::DB;
\&
\&  use Rose::DB;
\&  our @ISA = qw(Rose::DB);
\&
\&  My::DB\->register_db(
\&    domain   => \*(Aqdevelopment\*(Aq,
\&    type     => \*(Aqmain\*(Aq,
\&    driver   => \*(AqPg\*(Aq,
\&    database => \*(Aqdev_db\*(Aq,
\&    host     => \*(Aqlocalhost\*(Aq,
\&    username => \*(Aqdevuser\*(Aq,
\&    password => \*(Aqmysecret\*(Aq,
\&    server_time_zone => \*(AqUTC\*(Aq,
\&  );
\&
\&  My::DB\->register_db(
\&    domain   => \*(Aqproduction\*(Aq,
\&    type     => \*(Aqmain\*(Aq,
\&    driver   => \*(AqPg\*(Aq,
\&    database => \*(Aqbig_db\*(Aq,
\&    host     => \*(Aqdbserver.acme.com\*(Aq,
\&    username => \*(Aqdbadmin\*(Aq,
\&    password => \*(Aqprodsecret\*(Aq,
\&    server_time_zone => \*(AqUTC\*(Aq,
\&  );
\&
\&  My::DB\->default_domain(\*(Aqdevelopment\*(Aq);
\&  My::DB\->default_type(\*(Aqmain\*(Aq);
\&  ...
\&
\&  $db = My::DB\->new;
\&
\&  my $dbh = $db\->dbh or die $db\->error;
\&
\&  $db\->begin_work or die $db\->error;
\&  $dbh\->do(...)   or die $db\->error;
\&  $db\->commit     or die $db\->error;
\&
\&  $db\->do_transaction(sub
\&  {
\&    $dbh\->do(...);
\&    $sth = $dbh\->prepare(...);
\&    $sth\->execute(...);
\&    while($sth\->fetch) { ... }
\&    $dbh\->do(...);
\&  }) 
\&  or die $db\->error;
\&
\&  $dt  = $db\->parse_timestamp(\*(Aq2001\-03\-05 12:34:56.123\*(Aq);
\&  $val = $db\->format_timestamp($dt);
\&
\&  $dt  = $db\->parse_datetime(\*(Aq2001\-03\-05 12:34:56\*(Aq);
\&  $val = $db\->format_datetime($dt);
\&
\&  $dt  = $db\->parse_date(\*(Aq2001\-03\-05\*(Aq);
\&  $val = $db\->format_date($dt);
\&
\&  $bit = $db\->parse_bitfield(\*(Aq0x0AF\*(Aq, 32);
\&  $val = $db\->format_bitfield($bit);
\&
\&  ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Rose::DB is a wrapper and abstraction layer for \s-1DBI\s0\-related functionality.  A Rose::DB object \*(L"has a\*(R" \s-1DBI\s0 object; it is not a subclass of \s-1DBI\s0.
.PP
Please see the tutorial (perldoc Rose::DB::Tutorial) for an example usage scenario that reflects \*(L"best practices\*(R" for this module.
.PP
\&\fBTip:\fR Are you looking for an object-relational mapper (\s-1ORM\s0)?  If so, please see the Rose::DB::Object module.  Rose::DB::Object is an \s-1ORM\s0 that uses this module to manage its database connections.  Rose::DB alone is simply a data source abstraction layer; it is not an \s-1ORM\s0.
.SH "DATABASE SUPPORT"
.IX Header "DATABASE SUPPORT"
Rose::DB currently supports the following \s-1DBI\s0 database drivers:
.PP
.Vb 5
\&    DBD::Pg       (PostgreSQL)
\&    DBD::mysql    (MySQL)
\&    DBD::SQLite   (SQLite)
\&    DBD::Informix (Informix)
\&    DBD::Oracle   (Oracle)
.Ve
.PP
Rose::DB will attempt to service an unsupported database using a generic implementation that may or may not work.  Support for more drivers may be added in the future.  Patches are welcome.
.PP
All database-specific behavior is contained and documented in the subclasses of Rose::DB.  Rose::DB's constructor method (\fInew()\fR) returns  a database-specific subclass of Rose::DB, chosen based on the driver value of the selected data source.  The default mapping of databases to Rose::DB subclasses is:
.PP
.Vb 5
\&    DBD::Pg       \-> Rose::DB::Pg
\&    DBD::mysql    \-> Rose::DB::MySQL
\&    DBD::SQLite   \-> Rose::DB::SQLite
\&    DBD::Informix \-> Rose::DB::Informix
\&    DBD::Oracle   \-> Rose::DB::Oracle
.Ve
.PP
This mapping can be changed using the driver_class class method.
.PP
The Rose::DB object method documentation found here defines the purpose of each method, as well as the default behavior of the method if it is not overridden by a subclass.  You must read the subclass documentation to learn about behaviors that are specific to each type of database.
.PP
Subclasses may also add methods that do not exist in the parent class, of course.  This is yet another reason to read the documentation for the subclass that corresponds to your data source's database software.
.SH "FEATURES"
.IX Header "FEATURES"
The basic features of Rose::DB are as follows.
.SS "Data Source Abstraction"
.IX Subsection "Data Source Abstraction"
Instead of dealing with \*(L"databases\*(R" that exist on \*(L"hosts\*(R" or are located via some vendor-specific addressing scheme, Rose::DB deals with \*(L"logical\*(R" data sources.  Each logical data source is currently backed by a single \*(L"physical\*(R" database (basically a single \s-1DBI\s0 connection).
.PP
Multiplexing, fail-over, and other more complex relationships between logical data sources and physical databases are not part of Rose::DB.  Some basic types of fail-over may be added to Rose::DB in the future, but right now the mapping is strictly one-to-one.  (I'm also currently inclined to encourage multiplexing functionality to exist in a layer above Rose::DB, rather than within it or in a subclass of it.)
.PP
The driver type of the data source determines the functionality of all methods that do vendor-specific things (e.g., column value parsing and formatting).
.PP
Rose::DB identifies data sources using a two-level namespace made of a \*(L"domain\*(R" and a \*(L"type\*(R".  Both are arbitrary strings.  If left unspecified, the default domain and default type (accessible via Rose::DB's default_domain and default_type class methods) are assumed.
.PP
There are many ways to use the two-level namespace, but the most common is to use the domain to represent the current environment (e.g., \*(L"development\*(R", \*(L"staging\*(R", \*(L"production\*(R") and then use the type to identify the logical data source within that environment (e.g., \*(L"report\*(R", \*(L"main\*(R", \*(L"archive\*(R")
.PP
A typical deployment scenario will set the default domain using the default_domain class method as part of the configure/install process.  Within application code, Rose::DB objects can be constructed by specifying type alone:
.PP
.Vb 2
\&    $main_db    = Rose::DB\->new(type => \*(Aqmain\*(Aq);
\&    $archive_db = Rose::DB\->new(type => \*(Aqarchive\*(Aq);
.Ve
.PP
If there is only one database type, then all Rose::DB objects can be instantiated with a bare constructor call like this:
.PP
.Vb 1
\&    $db = Rose::DB\->new;
.Ve
.PP
Again, remember that this is just one of many possible uses of domain and type.  Arbitrarily complex scenarios can be created by nesting namespaces within one or both parameters (much like how Perl uses \*(L"::\*(R" to create a multi-level namespace from single strings).
.PP
The important point is the abstraction of data sources so they can be identified and referred to using a vocabulary that is entirely independent of the actual \s-1DSN\s0 (data source names) used by \s-1DBI\s0 behind the scenes.
.SS "Database Handle Life-Cycle Management"
.IX Subsection "Database Handle Life-Cycle Management"
When a Rose::DB object is destroyed while it contains an active \s-1DBI\s0 database handle, the handle is explicitly disconnected before destruction.  Rose::DB supports a simple retain/release reference-counting system which allows a database handle to out-live its parent Rose::DB object.
.PP
In the simplest case, Rose::DB could be used for its data source abstractions features alone. For example, transiently creating a Rose::DB and then retaining its \s-1DBI\s0 database handle before it is destroyed:
.PP
.Vb 2
\&    $main_dbh = Rose::DB\->new(type => \*(Aqmain\*(Aq)\->retain_dbh 
\&                  or die Rose::DB\->error;
\&
\&    $aux_dbh  = Rose::DB\->new(type => \*(Aqaux\*(Aq)\->retain_dbh  
\&                  or die Rose::DB\->error;
.Ve
.PP
If the database handle was simply extracted via the dbh method instead of retained with retain_dbh, it would be disconnected by the time the statement completed.
.PP
.Vb 2
\&    # WRONG: $dbh will be disconnected immediately after the assignment!
\&    $dbh = Rose::DB\->new(type => \*(Aqmain\*(Aq)\->dbh or die Rose::DB\->error;
.Ve
.SS "Vendor-Specific Column Value Parsing and Formatting"
.IX Subsection "Vendor-Specific Column Value Parsing and Formatting"
Certain semantically identical column types are handled differently in different databases.  Date and time columns are good examples.  Although many databases  store month, day, year, hours, minutes, and seconds using a \*(L"datetime\*(R" column type, there will likely be significant differences in how each of those databases expects to receive such values, and how they're returned.
.PP
Rose::DB is responsible for converting the wide range of vendor-specific column values for a particular column type into a single form that is convenient for use within Perl code.  Rose::DB also handles the opposite task, taking input from the Perl side and converting it into the appropriate format for a specific database.  Not all column types that exist in the supported databases are handled by Rose::DB, but support will expand in the future.
.PP
Many column types are specific to a single database and do not exist elsewhere.  When it is reasonable to do so, vendor-specific column types may be \*(L"emulated\*(R" by Rose::DB for the benefit of other databases.  For example, an \s-1ARRAY\s0 value may be stored as a specially formatted string in a \s-1VARCHAR\s0 field in a database that does not have a native \s-1ARRAY\s0 column type.
.PP
Rose::DB does \fB\s-1NOT\s0\fR attempt to present a unified column type system, however.  If a column type does not exist in a particular kind of database, there should be no expectation that Rose::DB will be able to parse and format that value type on behalf of that database.
.SS "High-Level Transaction Support"
.IX Subsection "High-Level Transaction Support"
Transactions may be started, committed, and rolled back in a variety of ways using the \s-1DBI\s0 database handle directly.  Rose::DB provides wrappers to do the same things, but with different error handling and return values.  There's also a method (do_transaction) that will execute arbitrary code within a single transaction, automatically handling rollback on failure and commit on success.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Subclassing is \fBstrongly encouraged\fR and generally works as expected.  (See the tutorial for a complete example.)  There is, however, the question of how class data is shared with subclasses.  Here's how it works for the various pieces of class data.
.IP "\fBalias_db\fR, \fBmodify_db\fR, \fBregister_db\fR, \fBunregister_db\fR, \fBunregister_domain\fR" 4
.IX Item "alias_db, modify_db, register_db, unregister_db, unregister_domain"
By default, all subclasses share the same data source \*(L"registry\*(R" with Rose::DB.  To provide a private registry for your subclass (the recommended approach), see the example in the documentation for the registry method below.
.IP "\fBdefault_domain\fR, \fBdefault_type\fR" 4
.IX Item "default_domain, default_type"
If called with no arguments, and if the attribute was never set for this
class, then a left-most, breadth-first search of the parent classes is
initiated.  The value returned is taken from first parent class 
encountered that has ever had this attribute set.
.Sp
(These attributes use the inheritable_scalar method type as defined in Rose::Class::MakeMethods::Generic.)
.IP "\fBdriver_class, default_connect_options\fR" 4
.IX Item "driver_class, default_connect_options"
These hashes of attributes are inherited by subclasses using a one-time, shallow copy from a superclass.  Any subclass that accesses or manipulates the hash in any way will immediately get its own private copy of the hash \fIas it exists in the superclass at the time of the access or manipulation\fR.
.Sp
The superclass from which the hash is copied is the closest (\*(L"least super\*(R") class that has ever accessed or manipulated this hash.  The copy is a \*(L"shallow\*(R" copy, duplicating only the keys and values.  Reference values are not recursively copied.
.Sp
Setting to hash to undef (using the 'reset' interface) will cause it to be re-copied from a superclass the next time it is accessed.
.Sp
(These attributes use the inheritable_hash method type as defined in Rose::Class::MakeMethods::Generic.)
.SH "SERIALIZATION"
.IX Header "SERIALIZATION"
A Rose::DB object may contain a \s-1DBI\s0 database handle, and \s-1DBI\s0 database handles usually don't survive the serialize process intact.  Rose::DB objects also hide database passwords inside closures, which also don't serialize well.    In order for a Rose::DB object to survive serialization, custom hooks are required.
.PP
Rose::DB has hooks for the Storable serialization module, but there is an important caveat.  Since Rose::DB objects are blessed into a dynamically generated class (derived from the driver class), you must load your Rose::DB\-derived class with all its registered data sources before you can successfully thaw a frozen Rose::DB\-derived object.  Here's an example.
.PP
Imagine that this is your Rose::DB\-derived class:
.PP
.Vb 1
\&    package My::DB;
\&
\&    use Rose::DB;
\&    our @ISA = qw(Rose::DB);
\&
\&    My::DB\->register_db(
\&      domain   => \*(Aqdev\*(Aq,
\&      type     => \*(Aqmain\*(Aq,
\&      driver   => \*(AqPg\*(Aq,
\&      ...
\&    );
\&
\&    My::DB\->register_db(
\&      domain   => \*(Aqprod\*(Aq,
\&      type     => \*(Aqmain\*(Aq,
\&      driver   => \*(AqPg\*(Aq,
\&      ...
\&    );
\&
\&    My::DB\->default_domain(\*(Aqdev\*(Aq);
\&    My::DB\->default_type(\*(Aqmain\*(Aq);
.Ve
.PP
In one program, a \f(CW\*(C`My::DB\*(C'\fR object is frozen using Storable:
.PP
.Vb 1
\&    # my_freeze_script.pl
\&
\&    use My::DB;
\&    use Storable qw(nstore);
\&
\&    # Create My::DB object
\&    $db = My::DB\->new(domain => \*(Aqdev\*(Aq, type => \*(Aqmain\*(Aq);
\&
\&    # Do work...
\&    $db\->dbh\->db(\*(AqCREATE TABLE some_table (...)\*(Aq);
\&    ...
\&
\&    # Serialize $db and store it in frozen_data_file
\&    nstore($db, \*(Aqfrozen_data_file\*(Aq);
.Ve
.PP
Now another program wants to thaw out that \f(CW\*(C`My::DB\*(C'\fR object and use it.  To do so, it must be sure to load the My::DB module (which registers all its data sources when loaded) \fIbefore\fR attempting to deserialize the \f(CW\*(C`My::DB\*(C'\fR object serialized by \f(CW\*(C`my_freeze_script.pl\*(C'\fR.
.PP
.Vb 1
\&    # my_thaw_script.pl
\&
\&    # IMPORTANT: load db modules with all data sources registered before
\&    #            attempting to deserialize objects of this class.
\&    use My::DB; 
\&
\&    use Storable qw(retrieve);
\&
\&    # Retrieve frozen My::DB object from frozen_data_file
\&    $db = retrieve(\*(Aqfrozen_data_file\*(Aq);
\&
\&    # Do work...
\&    $db\->dbh\->db(\*(AqDROP TABLE some_table\*(Aq);
\&    ...
.Ve
.PP
Note that this rule about loading a Rose::DB\-derived class with all its data sources registered prior to deserializing such an object only applies if the serialization was done in a different process.  If you freeze and thaw within the same process, you don't have to worry about it.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
There are two ways to alter the initial Rose::DB data source registry.
.IP "\(bu" 4
The \s-1ROSEDB_DEVINIT\s0 file or module, which can add, modify, or remove data sources and alter the default domain and type.
.IP "\(bu" 4
The \s-1ROSEDBRC\s0 file, which can modify existing data sources.
.SS "\s-1ROSEDB_DEVINIT\s0"
.IX Subsection "ROSEDB_DEVINIT"
The \f(CW\*(C`ROSEDB_DEVINIT\*(C'\fR file or module is used during development, usually to set up data sources for a particular developer's database or project.  If the \f(CW\*(C`ROSEDB_DEVINIT\*(C'\fR environment variable is set, it should be the name of a Perl module or file.  If it is a Perl module and that module has a \f(CW\*(C`fixup()\*(C'\fR subroutine, it will be called as a class method after the module is loaded.
.PP
If the \f(CW\*(C`ROSEDB_DEVINIT\*(C'\fR environment variable is not set, or if the specified file does not exist or has errors, then it defaults to the package name \f(CW\*(C`Rose::DB::Devel::Init::username\*(C'\fR, where \*(L"username\*(R" is the account name of the current user.
.PP
\&\fBNote:\fR if the \fIgetpwuid()\fR function is unavailable (as is often the case on Windows versions of perl) then this default does not apply and the loading of the module named \f(CW\*(C`Rose::DB::Devel::Init::username\*(C'\fR is not attempted.
.PP
The \f(CW\*(C`ROSEDB_DEVINIT\*(C'\fR file or module may contain arbitrary Perl code which will be loaded and evaluated in the context of Rose::DB.  Example:
.PP
.Vb 1
\&    Rose::DB\->default_domain(\*(Aqdevelopment\*(Aq);
\&
\&    Rose::DB\->modify_db(domain   => \*(Aqdevelopment\*(Aq, 
\&                        type     => \*(Aqmain_db\*(Aq,
\&                        database => \*(Aqmain\*(Aq,
\&                        username => \*(Aqjdoe\*(Aq,
\&                        password => \*(Aqmysecret\*(Aq);
\&
\&    1;
.Ve
.PP
Remember to end the file with a true value.
.PP
The \f(CW\*(C`ROSEDB_DEVINIT\*(C'\fR file or module must be read explicitly by calling the auto_load_fixups class method.
.SS "\s-1ROSEDBRC\s0"
.IX Subsection "ROSEDBRC"
The \f(CW\*(C`ROSEDBRC\*(C'\fR file contains configuration \*(L"fix-up\*(R" information.  This file is most often used to dynamically set passwords that are too sensitive to be included directly in the source code of a Rose::DB\-derived class.
.PP
The path to the fix-up file is determined by the \f(CW\*(C`ROSEDBRC\*(C'\fR environment variable.  If this variable is not set, or if the file it points to does not exist, then it defaults to \f(CW\*(C`/etc/rosedbrc\*(C'\fR.
.PP
This file should be in \s-1YAML\s0 format.  To read this file, you must have either YAML::Syck or some reasonably modern version of \s-1YAML\s0 installed (0.66 or later recommended).  YAML::Syck will be preferred if both are installed.
.PP
The \f(CW\*(C`ROSEDBRC\*(C'\fR file's contents have the following structure:
.PP
.Vb 8
\&    \-\-\-
\&    somedomain:
\&        sometype:
\&            somemethod: somevalue
\&    \-\-\-
\&    otherdomain:
\&        othertype:
\&            othermethod: othervalue
.Ve
.PP
Each entry modifies an existing registered data source.   Any valid registry entry object method can be used (in place of \*(L"somemethod\*(R" and \*(L"othermethod\*(R" in the \s-1YAML\s0 example above).
.PP
This file must be read explicitly by calling the auto_load_fixups class method \fIafter\fR setting up all your data sources.  Example:
.PP
.Vb 1
\&    package My::DB;
\&
\&    use Rose::DB;
\&    our @ISA = qw(Rose::DB);
\&
\&    _\|_PACKAGE_\|_\->use_private_registry;
\&
\&    # Register all data sources
\&    _\|_PACKAGE_\|_\->register_db(
\&      domain   => \*(Aqdevelopment\*(Aq,
\&      type     => \*(Aqmain\*(Aq,
\&      driver   => \*(AqPg\*(Aq,
\&      database => \*(Aqdev_db\*(Aq,
\&      host     => \*(Aqlocalhost\*(Aq,
\&      username => \*(Aqdevuser\*(Aq,
\&      password => \*(Aqmysecret\*(Aq,
\&    );
\&
\&    ...
\&
\&    # Load fix\-up files, if any
\&    _\|_PACKAGE_\|_\->auto_load_fixups;
.Ve
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.IP "\fBalias_db \s-1PARAMS\s0\fR" 4
.IX Item "alias_db PARAMS"
Make one data source an alias for another by pointing them both to the same registry entry.  \s-1PARAMS\s0 are name/value pairs that must include domain and type values for both the source and alias parameters.  Example:
.Sp
.Vb 2
\&    Rose::DB\->alias_db(source => { domain => \*(Aqdev\*(Aq, type => \*(Aqmain\*(Aq },
\&                       alias  => { domain => \*(Aqdev\*(Aq, type => \*(Aqaux\*(Aq });
.Ve
.Sp
This makes the \*(L"dev/aux\*(R" data source point to the same registry entry as the \*(L"dev/main\*(R" data source.  Modifications to either registry entry (via modify_db) will be reflected in both.
.IP "\fBauto_load_fixups\fR" 4
.IX Item "auto_load_fixups"
Attempt to load both the YAML-based \s-1ROSEDBRC\s0 and Perl-based \s-1ROSEDB_DEVINIT\s0 fix-up files, if any exist, in that order.  The \s-1ROSEDBRC\s0 file will modify the data source registry of the calling class.  See the \s-1ENVIRONMENT\s0 section above for more information.
.IP "\fBdb_cache [\s-1CACHE\s0]\fR" 4
.IX Item "db_cache [CACHE]"
Get or set the Rose::DB::Cache\-derived object used to cache Rose::DB objects on behalf of this class.  If no such object exists, a new cache object of db_cache_class class will be created, stored, and returned.
.IP "\fBdb_cache_class [\s-1CLASS\s0]\fR" 4
.IX Item "db_cache_class [CLASS]"
Get or set the name of the Rose::DB::Cache\-derived class used to cache Rose::DB objects on behalf of this class.  The default value is Rose::DB::Cache.
.IP "\fBdb_exists \s-1PARAMS\s0\fR" 4
.IX Item "db_exists PARAMS"
Returns true of the data source specified by \s-1PARAMS\s0 is registered, false otherwise.  \s-1PARAMS\s0 are name/value pairs for \f(CW\*(C`domain\*(C'\fR and \f(CW\*(C`type\*(C'\fR.  If they are omitted, they default to default_domain and default_type, respectively.  If default values do not exist, a fatal error will occur.  If a single value is passed instead of name/value pairs, it is taken as the value of the \f(CW\*(C`type\*(C'\fR parameter.
.IP "\fBdefault_connect_options [\s-1HASHREF\s0 | \s-1PAIRS\s0]\fR" 4
.IX Item "default_connect_options [HASHREF | PAIRS]"
Get or set the default \s-1DBI\s0 connect options hash.  If a reference to a hash is passed, it replaces the default connect options hash.  If a series of name/value pairs are passed, they are added to the default connect options hash.
.Sp
The default set of default connect options is:
.Sp
.Vb 5
\&    AutoCommit => 1,
\&    RaiseError => 1,
\&    PrintError => 1,
\&    ChopBlanks => 1,
\&    Warn       => 0,
.Ve
.Sp
See the connect_options object method for more information on how the default connect options are used.
.IP "\fBdefault_domain [\s-1DOMAIN\s0]\fR" 4
.IX Item "default_domain [DOMAIN]"
Get or set the default data source domain.  See the \*(L"Data Source Abstraction\*(R" section for more information on data source domains.
.IP "\fBdefault_type [\s-1TYPE\s0]\fR" 4
.IX Item "default_type [TYPE]"
Get or set the default data source type.  See the \*(L"Data Source Abstraction\*(R" section for more information on data source types.
.IP "\fBdriver_class \s-1DRIVER\s0 [, \s-1CLASS\s0]\fR" 4
.IX Item "driver_class DRIVER [, CLASS]"
Get or set the subclass used for \s-1DRIVER\s0.  The \s-1DRIVER\s0 argument is automatically converted to lowercase.  (Driver names are effectively case-insensitive.)
.Sp
.Vb 2
\&    $class = Rose::DB\->driver_class(\*(AqPg\*(Aq);      # get
\&    Rose::DB\->driver_class(\*(Aqpg\*(Aq => \*(AqMyDB::Pg\*(Aq); # set
.Ve
.Sp
The default mapping of driver names to class names is as follows:
.Sp
.Vb 6
\&    mysql    \-> Rose::DB::MySQL
\&    pg       \-> Rose::DB::Pg
\&    informix \-> Rose::DB::Informix
\&    sqlite   \-> Rose::DB::SQLite
\&    oracle   \-> Rose::DB::Oracle
\&    generic  \-> Rose::DB::Generic
.Ve
.Sp
The class mapped to the special driver name \*(L"generic\*(R" will be used for any driver name that does not have an entry in the map.
.Sp
See the documentation for the new method for more information on how the driver influences the class of objects returned by the constructor.
.IP "\fBdefault_keyword_function_calls [\s-1BOOL\s0]\fR" 4
.IX Item "default_keyword_function_calls [BOOL]"
Get or set a boolean default value for the keyword_function_calls object attribute.  Defaults to the value of the \f(CW\*(C`ROSE_DB_KEYWORD_FUNCTION_CALLS\*(C'\fR environment variable, it set to a defined value, or false otherwise.
.IP "\fBmodify_db \s-1PARAMS\s0\fR" 4
.IX Item "modify_db PARAMS"
Modify a data source, setting the attributes specified in \s-1PARAMS\s0, where
\&\s-1PARAMS\s0 are name/value pairs.  Any Rose::DB object method that sets a data source configuration value is a valid parameter name.
.Sp
.Vb 4
\&    # Set new username for data source identified by domain and type
\&    Rose::DB\->modify_db(domain   => \*(Aqtest\*(Aq, 
\&                        type     => \*(Aqmain\*(Aq,
\&                        username => \*(Aqtester\*(Aq);
.Ve
.Sp
\&\s-1PARAMS\s0 should include values for both the \f(CW\*(C`type\*(C'\fR and \f(CW\*(C`domain\*(C'\fR parameters since these two attributes are used to identify the data source.  If they are omitted, they default to default_domain and default_type, respectively.  If default values do not exist, a fatal error will occur.  If there is no data source defined for the specified \f(CW\*(C`type\*(C'\fR and \f(CW\*(C`domain\*(C'\fR, a fatal error will occur.
.IP "\fBprepare_cache_for_apache_fork\fR" 4
.IX Item "prepare_cache_for_apache_fork"
This is a convenience method that is equivalent to the following call:
.Sp
.Vb 1
\&    Rose::DB\->db_cache\->prepare_for_apache_fork()
.Ve
.Sp
Any arguments passed to this method are passed on to the call to the db_cache's prepare_for_apache_fork method.
.Sp
Please read the Rose::DB::Cache documentation, particularly the documentation for the use_cache_during_apache_startup method for more information.
.IP "\fBregister_db \s-1PARAMS\s0\fR" 4
.IX Item "register_db PARAMS"
Registers a new data source with the attributes specified in \s-1PARAMS\s0, where
\&\s-1PARAMS\s0 are name/value pairs.  Any Rose::DB object method that sets a data source configuration value is a valid parameter name.
.Sp
\&\s-1PARAMS\s0 \fBmust\fR include a value for the \f(CW\*(C`driver\*(C'\fR parameter.  If the \f(CW\*(C`type\*(C'\fR or \f(CW\*(C`domain\*(C'\fR parameters are omitted or undefined, they default to the return values of the default_type and default_domain class methods, respectively.
.Sp
The \f(CW\*(C`type\*(C'\fR and \f(CW\*(C`domain\*(C'\fR are used to identify the data source.  If either one is missing, a fatal error will occur.  See the \*(L"Data Source Abstraction\*(R" section for more information on data source types and domains.
.Sp
The \f(CW\*(C`driver\*(C'\fR is used to determine which class objects will be blessed into by the Rose::DB constructor, new.  The driver name is automatically converted to lowercase.  If it is missing, a fatal error will occur.
.Sp
In most deployment scenarios, register_db is called early in the compilation process to ensure that the registered data sources are available when the \*(L"real\*(R" code runs.
.Sp
Database registration can be included directly in your Rose::DB subclass.  This is the recommended approach.  Example:
.Sp
.Vb 1
\&    package My::DB;
\&
\&    use Rose::DB;
\&    our @ISA = qw(Rose::DB);
\&
\&    # Use a private registry for this class
\&    _\|_PACKAGE_\|_\->use_private_registry;
\&
\&    # Register data sources
\&    My::DB\->register_db(
\&      domain   => \*(Aqdevelopment\*(Aq,
\&      type     => \*(Aqmain\*(Aq,
\&      driver   => \*(AqPg\*(Aq,
\&      database => \*(Aqdev_db\*(Aq,
\&      host     => \*(Aqlocalhost\*(Aq,
\&      username => \*(Aqdevuser\*(Aq,
\&      password => \*(Aqmysecret\*(Aq,
\&    );
\&
\&    My::DB\->register_db(
\&      domain   => \*(Aqproduction\*(Aq,
\&      type     => \*(Aqmain\*(Aq,
\&      driver   => \*(AqPg\*(Aq,
\&      database => \*(Aqbig_db\*(Aq,
\&      host     => \*(Aqdbserver.acme.com\*(Aq,
\&      username => \*(Aqdbadmin\*(Aq,
\&      password => \*(Aqprodsecret\*(Aq,
\&    );
\&    ...
.Ve
.Sp
Another possible approach is to consolidate data source registration in a single module which is then \f(CW\*(C`use\*(C'\fRed early on in the code path.  For example, imagine a mod_perl web server environment:
.Sp
.Vb 2
\&    # File: MyCorp/DataSources.pm
\&    package MyCorp::DataSources;
\&
\&    My::DB\->register_db(
\&      domain   => \*(Aqdevelopment\*(Aq,
\&      type     => \*(Aqmain\*(Aq,
\&      driver   => \*(AqPg\*(Aq,
\&      database => \*(Aqdev_db\*(Aq,
\&      host     => \*(Aqlocalhost\*(Aq,
\&      username => \*(Aqdevuser\*(Aq,
\&      password => \*(Aqmysecret\*(Aq,
\&    );
\&
\&    My::DB\->register_db(
\&      domain   => \*(Aqproduction\*(Aq,
\&      type     => \*(Aqmain\*(Aq,
\&      driver   => \*(AqPg\*(Aq,
\&      database => \*(Aqbig_db\*(Aq,
\&      host     => \*(Aqdbserver.acme.com\*(Aq,
\&      username => \*(Aqdbadmin\*(Aq,
\&      password => \*(Aqprodsecret\*(Aq,
\&    );
\&    ...
\&
\&    # File: /usr/local/apache/conf/startup.pl
\&
\&    use My::DB; # your Rose::DB subclass
\&    use MyCorp::DataSources; # register all data sources
\&    ...
.Ve
.Sp
Data source registration can happen at any time, of course, but it is most useful when all application code can simply assume that all the data sources are already registered.  Doing the registration as early as possible (e.g., directly in your Rose::DB subclass, or in a \f(CW\*(C`startup.pl\*(C'\fR file that is loaded from an apache/mod_perl web server's \f(CW\*(C`httpd.conf\*(C'\fR file) is the best way to create such an environment.
.Sp
Note that the data source registry serves as an \fIinitial\fR source of information for Rose::DB objects.  Once an object is instantiated, it is independent of the registry.  Changes to an object are not reflected in the registry, and changes to the registry are not reflected in existing objects.
.IP "\fBregistry [\s-1REGISTRY\s0]\fR" 4
.IX Item "registry [REGISTRY]"
Get or set the Rose::DB::Registry\-derived object that manages and stores the data source registry.  It defaults to an \*(L"empty\*(R" Rose::DB::Registry object.  Remember that setting a new registry will replace the existing registry and all the data sources registered in it.
.Sp
Note that Rose::DB subclasses will inherit the base class's Rose::DB::Registry object and will therefore inherit all existing registry entries and share the same registry namespace as the base class.   This may or may not be what you want.
.Sp
In most cases, it's wise to give your subclass its own private registry if it inherits directly from Rose::DB.  To do that, just set a new registry object in your subclass.  Example:
.Sp
.Vb 1
\&    package My::DB;
\&
\&    use Rose::DB;
\&    our @ISA = qw(Rose::DB);
\&
\&    # Create a private registry for this class:
\&    #
\&    # either explicitly:
\&    # use Rose::DB::Registry;
\&    # _\|_PACKAGE_\|_\->registry(Rose::DB::Registry\->new);
\&    #
\&    # or use the convenience method:
\&    _\|_PACKAGE_\|_\->use_private_registry;
\&    ...
.Ve
.Sp
Further subclasses of \f(CW\*(C`My::DB\*(C'\fR may then inherit its registry object, if desired, or may create their own private registries in the manner shown above.
.IP "\fBunregister_db \s-1PARAMS\s0\fR" 4
.IX Item "unregister_db PARAMS"
Unregisters the data source having the \f(CW\*(C`type\*(C'\fR and \f(CW\*(C`domain\*(C'\fR specified in  \s-1PARAMS\s0, where \s-1PARAMS\s0 are name/value pairs.  Returns true if the data source was unregistered successfully, false if it did not exist in the first place.  Example:
.Sp
.Vb 1
\&    Rose::DB\->unregister_db(type => \*(Aqmain\*(Aq, domain => \*(Aqtest\*(Aq);
.Ve
.Sp
\&\s-1PARAMS\s0 \fBmust\fR include values for both the \f(CW\*(C`type\*(C'\fR and \f(CW\*(C`domain\*(C'\fR parameters since these two attributes are used to identify the data source.  If either one is missing, a fatal error will occur.
.Sp
Unregistering a data source removes all knowledge of it.  This may be harmful to any existing Rose::DB objects that are associated with that data source.
.IP "\fBunregister_domain \s-1DOMAIN\s0\fR" 4
.IX Item "unregister_domain DOMAIN"
Unregisters an entire domain.  Returns true if the domain was unregistered successfully, false if it did not exist in the first place.  Example:
.Sp
.Vb 1
\&    Rose::DB\->unregister_domain(\*(Aqtest\*(Aq);
.Ve
.Sp
Unregistering a domain removes all knowledge of all of the data sources that existed under it.  This may be harmful to any existing Rose::DB objects that are associated with any of those data sources.
.IP "\fBuse_cache_during_apache_startup [\s-1BOOL\s0]\fR" 4
.IX Item "use_cache_during_apache_startup [BOOL]"
This is a convenience method that is equivalent to the following call:
.Sp
.Vb 1
\&    Rose::DB\->db_cache\->use_cache_during_apache_startup(...)
.Ve
.Sp
The boolean argument passed to this method is passed on to the call to the db_cache's use_cache_during_apache_startup method.
.Sp
Please read the Rose::DB::Cache's use_cache_during_apache_startup documentation for more information.
.IP "\fBuse_private_registry\fR" 4
.IX Item "use_private_registry"
This method is used to give a class its own private registry.  In other words, this:
.Sp
.Vb 1
\&    _\|_PACKAGE_\|_\->use_private_registry;
.Ve
.Sp
is roughly equivalent to this:
.Sp
.Vb 2
\&    use Rose::DB::Registry;
\&    _\|_PACKAGE_\|_\->registry(Rose::DB::Registry\->new);
.Ve
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.IP "\fBnew \s-1PARAMS\s0\fR" 4
.IX Item "new PARAMS"
Constructs a new object based on \s-1PARAMS\s0, where \s-1PARAMS\s0 are
name/value pairs.  Any object method is a valid parameter name.  Example:
.Sp
.Vb 1
\&    $db = Rose::DB\->new(type => \*(Aqmain\*(Aq, domain => \*(Aqqa\*(Aq);
.Ve
.Sp
If a single argument is passed to new, it is used as the \f(CW\*(C`type\*(C'\fR value:
.Sp
.Vb 2
\&    $db = Rose::DB\->new(type => \*(Aqaux\*(Aq); 
\&    $db = Rose::DB\->new(\*(Aqaux\*(Aq); # same thing
.Ve
.Sp
Each Rose::DB object is associated with a particular data source, defined by the type and domain values.  If these are not part of \s-1PARAMS\s0, then the default values are used.  If you do not want to use the default values for the type and domain attributes, you should specify them in the constructor \s-1PARAMS\s0.
.Sp
The default type and domain can be set using the default_type and default_domain class methods.  See the \*(L"Data Source Abstraction\*(R" section for more information on data sources.
.Sp
Object attributes are set based on the registry entry specified by the \f(CW\*(C`type\*(C'\fR and \f(CW\*(C`domain\*(C'\fR parameters.  This registry entry must exist or a fatal error will occur (with one exception; see below).  Any additional \s-1PARAMS\s0 will override the values taken from the registry entry.
.Sp
If \f(CW\*(C`type\*(C'\fR and \f(CW\*(C`domain\*(C'\fR parameters are not passed, but a \f(CW\*(C`driver\*(C'\fR parameter is passed, then a new \*(L"empty\*(R" object will be returned.  Examples:
.Sp
.Vb 2
\&    # This is ok, even if no registered data sources exist
\&    $db = Rose::DB\->new(driver => \*(Aqsqlite\*(Aq);
.Ve
.Sp
The object returned by new will be derived from a database-specific driver class, chosen based on the driver value of the selected data source.  If there is no registered data source for the specified type and domain, a fatal error will occur.
.Sp
The default driver-to-class mapping is as follows:
.Sp
.Vb 5
\&    pg       \-> Rose::DB::Pg
\&    mysql    \-> Rose::DB::MySQL
\&    informix \-> Rose::DB::Informix
\&    oracle   \-> Rose::DB::Oracle
\&    sqlite   \-> Rose::DB::SQLite
.Ve
.Sp
You can change this mapping with the driver_class class method.
.IP "\fBnew_or_cached \s-1PARAMS\s0\fR" 4
.IX Item "new_or_cached PARAMS"
Constructs or returns a Rose::DB object based on \s-1PARAMS\s0, where \s-1PARAMS\s0 are any name/value pairs that can be passed to the new method.  If the db_cache's get_db method returns an existing Rose::DB object that matches \s-1PARAMS\s0, then it is returned.  Otherwise, a new  Rose::DB object is created, stored in the db_cache, then returned.
.Sp
See the Rose::DB::Cache documentation to learn about the cache \s-1API\s0 and the default implementation.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
.IP "\fBbegin_work\fR" 4
.IX Item "begin_work"
Attempt to start a transaction by calling the begin_work method on the \s-1DBI\s0 database handle.
.Sp
If necessary, the database handle will be constructed and connected to the current data source.  If this fails, undef is returned.  If there is no registered data source for the current \f(CW\*(C`type\*(C'\fR and \f(CW\*(C`domain\*(C'\fR, a fatal error will occur.
.Sp
If the \*(L"AutoCommit\*(R" database handle attribute is false, the handle is assumed to already be in a transaction and Rose::DB::Constants::IN_TRANSACTION (\-1) is returned.  If the call to \s-1DBI\s0's begin_work method succeeds, 1 is returned.  If it fails, undef is returned.
.IP "\fBcommit\fR" 4
.IX Item "commit"
Attempt to commit the current transaction by calling the commit method on the \s-1DBI\s0 database handle.  If the \s-1DBI\s0 database handle does not exist or is not connected, 0 is returned.
.Sp
If the \*(L"AutoCommit\*(R" database handle attribute is true, the handle is assumed to not be in a transaction and Rose::DB::Constants::IN_TRANSACTION (\-1) is returned.  If the call to \s-1DBI\s0's commit method succeeds, 1 is returned.  If it fails, undef is returned.
.IP "\fBconnect\fR" 4
.IX Item "connect"
Constructs and connects the \s-1DBI\s0 database handle for the current data source, calling dbi_connect to create a new \s-1DBI\s0 database handle if none exists.  If there is no registered data source for the current type and domain, a fatal error will occur.
.Sp
If any post_connect_sql statement failed to execute, the database handle is disconnected and then discarded.
.Sp
If the database handle returned by dbi_connect was originally connected by another Rose::DB\-derived object (e.g., if a subclass's custom implementation of dbi_connect calls \s-1DBI\s0's connect_cached method) then the post_connect_sql statements will not be run, nor will any custom \s-1DBI\s0 attributes be applied (e.g., Rose::DB::MySQL's mysql_enable_utf8 attribute).
.Sp
Returns true if the database handle was connected successfully and all post_connect_sql statements (if any) were run successfully, false otherwise.
.IP "\fBconnect_option \s-1NAME\s0 [, \s-1VALUE\s0]\fR" 4
.IX Item "connect_option NAME [, VALUE]"
Get or set a single connection option.  Example:
.Sp
.Vb 2
\&    $val = $db\->connect_option(\*(AqRaiseError\*(Aq); # get
\&    $db\->connect_option(AutoCommit => 1);     # set
.Ve
.Sp
Connection options are name/value pairs that are passed in a hash reference as the fourth argument to the call to \s-1DBI\-\s0>\fIconnect()\fR.  See the \s-1DBI\s0 documentation for descriptions of the various options.
.IP "\fBconnect_options [\s-1HASHREF\s0 | \s-1PAIRS\s0]\fR" 4
.IX Item "connect_options [HASHREF | PAIRS]"
Get or set the \s-1DBI\s0 connect options hash.  If a reference to a hash is passed, it replaces the connect options hash.  If a series of name/value pairs are passed, they are added to the connect options hash.
.Sp
Returns a reference to the connect options has in scalar context, or a list of name/value pairs in list context.
.IP "\fBdbh [\s-1DBH\s0]\fR" 4
.IX Item "dbh [DBH]"
Get or set the \s-1DBI\s0 database handle connected to the current data source.  If the database handle does not exist or was created in another process or thread, this method will discard the old database handle (if any) and dbi_connect will be called to create a new one.
.Sp
Returns undef if the database handle could not be constructed and connected.  If there is no registered data source for the current \f(CW\*(C`type\*(C'\fR and \f(CW\*(C`domain\*(C'\fR, a fatal error will occur.
.Sp
Note: when setting this attribute, you \fImust\fR pass in a \s-1DBI\s0 database handle that has the same driver as the object.  For example, if the driver is \f(CW\*(C`mysql\*(C'\fR then the \s-1DBI\s0 database handle must be connected to a MySQL database.  Passing in a mismatched database handle will cause a fatal error.
.IP "\fBdbi_connect [\s-1ARGS\s0]\fR" 4
.IX Item "dbi_connect [ARGS]"
This method calls \s-1DBI\-\s0>connect(...), passing all \s-1ARGS\s0 and returning all values.  This method has no affect on the internal state of the object.  Use the connect method to create and store a new database handle in the object.
.Sp
Override this method in your Rose::DB subclass if you want to use a different method (e.g. \s-1DBI\-\s0>\fIconnect_cached()\fR) to create database handles.
.IP "\fBdisconnect\fR" 4
.IX Item "disconnect"
Decrements the reference count for the database handle and disconnects it if the reference count is zero and if the database handle was originally connected by this object.  (This may not be the case if, say, a subclass's custom implementation of dbi_connect calls \s-1DBI\s0's connect_cached method.)  Regardless of the reference count, it sets the dbh attribute to undef.
.Sp
Returns true if all pre_disconnect_sql statements (if any) were run successfully and the database handle was disconnected successfully (or if it was simply set to undef), false otherwise.
.Sp
The database handle will not be disconnected if any pre_disconnect_sql statement fails to execute, and the pre_disconnect_sql is not run unless the handle is going to be disconnected.
.IP "\fBdo_transaction \s-1CODE\s0 [, \s-1ARGS\s0]\fR" 4
.IX Item "do_transaction CODE [, ARGS]"
Execute arbitrary code within a single transaction, rolling back if any of the code fails, committing if it succeeds.  \s-1CODE\s0 should be a code reference.  It will be called with any arguments passed to do_transaction after the code reference.  Example:
.Sp
.Vb 4
\&    # Transfer $100 from account id 5 to account id 9
\&    $db\->do_transaction(sub
\&    {
\&      my($amt, $id1, $id2) = @_;
\&
\&      my $dbh = $db\->dbh or die $db\->error;
\&
\&      # Transfer $amt from account id $id1 to account id $id2
\&      $dbh\->do("UPDATE acct SET bal = bal \- $amt WHERE id = $id1");
\&      $dbh\->do("UPDATE acct SET bal = bal + $amt WHERE id = $id2");
\&    },
\&    100, 5, 9) or warn "Transfer failed: ", $db\->error;
.Ve
.Sp
If the \s-1CODE\s0 block threw an exception or the transaction could not be started and committed successfully, then undef is returned and the exception thrown is available in the error attribute.  Otherwise, a true value is returned.
.IP "\fBerror [\s-1MSG\s0]\fR" 4
.IX Item "error [MSG]"
Get or set the error message associated with the last failure.  If a method fails, check this attribute to get the reason for the failure in the form of a text message.
.IP "\fBhas_dbh\fR" 4
.IX Item "has_dbh"
Returns true if the object has a \s-1DBI\s0 database handle (dbh), false if it does not.
.IP "\fBhas_primary_key [ \s-1TABLE\s0 | \s-1PARAMS\s0 ]\fR" 4
.IX Item "has_primary_key [ TABLE | PARAMS ]"
Returns true if the specified table has a primary key (as determined by the primary_key_column_names method), false otherwise.
.Sp
The arguments are the same as those for the primary_key_column_names method: either a table name or name/value pairs specifying \f(CW\*(C`table\*(C'\fR, \f(CW\*(C`catalog\*(C'\fR, and \f(CW\*(C`schema\*(C'\fR.  The  \f(CW\*(C`catalog\*(C'\fR and \f(CW\*(C`schema\*(C'\fR parameters are optional and default to the return values of the catalog and schema methods, respectively.  See the documentation for the primary_key_column_names for more information.
.IP "\fBin_transaction\fR" 4
.IX Item "in_transaction"
Return true if the dbh is currently in the middle of a transaction, false (but defined) if it is not.  If no dbh exists, then undef is returned.
.IP "\fBinit_db_info\fR" 4
.IX Item "init_db_info"
Initialize data source configuration information based on the current values of the type and domain attributes by pulling data from the corresponding registry entry.  If there is no registered data source for the current type and domain, a fatal error will occur.  init_db_info is called as part of the new and connect methods.
.IP "\fBinsertid_param\fR" 4
.IX Item "insertid_param"
Returns the name of the \s-1DBI\s0 statement handle attribute that contains the auto-generated unique key created during the last insert operation.  Returns undef if the current data source does not support this attribute.
.IP "\fBkeyword_function_calls [\s-1BOOL\s0]\fR" 4
.IX Item "keyword_function_calls [BOOL]"
Get or set a boolean value that indicates whether or not any string that looks like a function call (matches \f(CW\*(C`/^\ew+\e(.*\e)$/\*(C'\fR) will be treated as a \*(L"keyword\*(R" by the various format_* methods.  Defaults to the value returned by the default_keyword_function_calls class method.
.IP "\fBlast_insertid_from_sth \s-1STH\s0\fR" 4
.IX Item "last_insertid_from_sth STH"
Given a \s-1DBI\s0 statement handle, returns the value of the auto-generated unique key created during the last insert operation.  This value may be undefined if this feature is not supported by the current data source.
.IP "\fBlist_tables\fR" 4
.IX Item "list_tables"
Returns a list (in list context) or reference to an array (in scalar context) of tables in the database.  The current catalog and schema are honored.
.IP "\fBquote_column_name \s-1NAME\s0\fR" 4
.IX Item "quote_column_name NAME"
Returns the column name \s-1NAME\s0 appropriately quoted for use in an \s-1SQL\s0 statement.  (Note that \*(L"appropriate\*(R" quoting may mean no quoting at all.)
.IP "\fBrelease_dbh\fR" 4
.IX Item "release_dbh"
Decrements the reference count for the \s-1DBI\s0 database handle, if it exists.  Returns 0 if the database handle does not exist.
.Sp
If the reference count drops to zero, the database handle is disconnected.  Keep in mind that the Rose::DB object itself will increment the reference count when the database handle is connected, and decrement it when disconnect is called.
.Sp
Returns true if the reference count is not 0 or if all pre_disconnect_sql statements (if any) were run successfully and the database handle was disconnected successfully, false otherwise.
.Sp
The database handle will not be disconnected if any pre_disconnect_sql statement fails to execute, and the pre_disconnect_sql is not run unless the handle is going to be disconnected.
.Sp
See the \*(L"Database Handle Life-Cycle Management\*(R" section for more information on the retain/release system.
.IP "\fBretain_dbh\fR" 4
.IX Item "retain_dbh"
Returns the connected \s-1DBI\s0 database handle after incrementing the reference count.  If the database handle does not exist or is not already connected, this method will do everything necessary to do so.
.Sp
Returns undef if the database handle could not be constructed and connected.  If there is no registered data source for the current type and domain, a fatal error will occur.
.Sp
See the \*(L"Database Handle Life-Cycle Management\*(R" section for more information on the retain/release system.
.IP "\fBrollback\fR" 4
.IX Item "rollback"
Roll back the current transaction by calling the rollback method on the \s-1DBI\s0 database handle.  If the \s-1DBI\s0 database handle does not exist or is not connected, 0 is returned.
.Sp
If the call to \s-1DBI\s0's rollback method succeeds or if auto-commit is enabled, 1 is returned.  If it fails, undef is returned.
.SS "Data Source Configuration"
.IX Subsection "Data Source Configuration"
Not all databases will use all of these values.  Values that are not supported are simply ignored.
.IP "\fBautocommit [\s-1VALUE\s0]\fR" 4
.IX Item "autocommit [VALUE]"
Get or set the value of the \*(L"AutoCommit\*(R" connect option and \s-1DBI\s0 handle attribute.  If a \s-1VALUE\s0 is passed, it will be set in both the connect options hash and the current database handle, if any.  Returns the value of the \*(L"AutoCommit\*(R" attribute of the database handle if it exists, or the connect option otherwise.
.Sp
This method should not be mixed with the connect_options method in calls to register_db or modify_db since connect_options will overwrite \fIall\fR the connect options with its argument, and neither register_db nor modify_db guarantee the order that its parameters will be evaluated.
.IP "\fBcatalog [\s-1CATALOG\s0]\fR" 4
.IX Item "catalog [CATALOG]"
Get or set the database catalog name.  This setting is only relevant to databases that support the concept of catalogs.
.IP "\fBconnect_options [\s-1HASHREF\s0 | \s-1PAIRS\s0]\fR" 4
.IX Item "connect_options [HASHREF | PAIRS]"
Get or set the options passed in a hash reference as the fourth argument to the call to \s-1DBI\-\s0>\fIconnect()\fR.  See the \s-1DBI\s0 documentation for descriptions of the various options.
.Sp
If a reference to a hash is passed, it replaces the connect options hash.  If a series of name/value pairs are passed, they are added to the connect options hash.
.Sp
Returns a reference to the hash of options in scalar context, or a list of name/value pairs in list context.
.Sp
When init_db_info is called for the first time on an object (either in isolation or as part of the connect process), the connect options are merged with the default_connect_options.  The defaults are overridden in the case of a conflict.  Example:
.Sp
.Vb 10
\&    Rose::DB\->register_db(
\&      domain   => \*(Aqdevelopment\*(Aq,
\&      type     => \*(Aqmain\*(Aq,
\&      driver   => \*(AqPg\*(Aq,
\&      database => \*(Aqdev_db\*(Aq,
\&      host     => \*(Aqlocalhost\*(Aq,
\&      username => \*(Aqdevuser\*(Aq,
\&      password => \*(Aqmysecret\*(Aq,
\&      connect_options =>
\&      {
\&        RaiseError => 0, 
\&        AutoCommit => 0,
\&      }
\&    );
\&
\&    # Rose::DB\->default_connect_options are:
\&    #
\&    # AutoCommit => 1,
\&    # ChopBlanks => 1,
\&    # PrintError => 1,
\&    # RaiseError => 1,
\&    # Warn       => 0,
\&
\&    # The object\*(Aqs connect options are merged with default options 
\&    # since new() will trigger the first call to init_db_info()
\&    # for this object
\&    $db = Rose::DB\->new(domain => \*(Aqdevelopment\*(Aq, type => \*(Aqmain\*(Aq);
\&
\&    # $db\->connect_options are:
\&    #
\&    # AutoCommit => 0,
\&    # ChopBlanks => 1,
\&    # PrintError => 1,
\&    # RaiseError => 0,
\&    # Warn       => 0,
\&
\&    $db\->connect_options(TraceLevel => 2); # Add an option
\&
\&    # $db\->connect_options are now:
\&    #
\&    # AutoCommit => 0,
\&    # ChopBlanks => 1,
\&    # PrintError => 1,
\&    # RaiseError => 0,
\&    # TraceLevel => 2,
\&    # Warn       => 0,
\&
\&    # The object\*(Aqs connect options are NOT re\-merged with the default 
\&    # connect options since this will trigger the second call to 
\&    # init_db_info(), not the first
\&    $db\->connect or die $db\->error; 
\&
\&    # $db\->connect_options are still:
\&    #
\&    # AutoCommit => 0,
\&    # ChopBlanks => 1,
\&    # PrintError => 1,
\&    # RaiseError => 0,
\&    # TraceLevel => 2,
\&    # Warn       => 0,
.Ve
.IP "\fBdatabase [\s-1NAME\s0]\fR" 4
.IX Item "database [NAME]"
Get or set the database name used in the construction of the \s-1DSN\s0 used in the \s-1DBI\s0 connect call.
.IP "\fBdomain [\s-1DOMAIN\s0]\fR" 4
.IX Item "domain [DOMAIN]"
Get or set the data source domain.  See the \*(L"Data Source Abstraction\*(R" section for more information on data source domains.
.IP "\fBdriver [\s-1DRIVER\s0]\fR" 4
.IX Item "driver [DRIVER]"
Get or set the driver name.  The driver name can only be set during object construction (i.e., as an argument to new) since it determines the object class.  After the object is constructed, setting the driver to anything other than the same value it already has will cause a fatal error.
.Sp
Even in the call to new, setting the driver name explicitly is not recommended.  Instead, specify the driver when calling register_db for each data source and allow the driver to be set automatically based on the domain and type.
.Sp
The driver names for the currently supported database types are:
.Sp
.Vb 5
\&    pg
\&    mysql
\&    informix
\&    oracle
\&    sqlite
.Ve
.Sp
Driver names should only use lowercase letters.
.IP "\fBdsn [\s-1DSN\s0]\fR" 4
.IX Item "dsn [DSN]"
Get or set the \s-1DBI\s0 \s-1DSN\s0 (Data Source Name) passed to the call to \s-1DBI\s0's connect method.
.Sp
An attempt is made to parse the new \s-1DSN\s0.  Any parts successfully extracted are assigned to the corresponding Rose::DB attributes (e.g., host, port, database).  If no value could be extracted for an attribute, it is set to undef.
.Sp
If the \s-1DSN\s0 is never set explicitly, it is built automatically based on the relevant object attributes.
.IP "\fBhandle_error [\s-1VALUE\s0]\fR" 4
.IX Item "handle_error [VALUE]"
Get or set the value of the \*(L"HandleError\*(R" connect option and \s-1DBI\s0 handle attribute.  If a \s-1VALUE\s0 is passed, it will be set in both the connect options hash and the current database handle, if any.  Returns the value of the \*(L"HandleError\*(R" attribute of the database handle if it exists, or the connect option otherwise.
.Sp
This method should not be mixed with the connect_options method in calls to register_db or modify_db since connect_options will overwrite \fIall\fR the connect options with its argument, and neither register_db nor modify_db guarantee the order that its parameters will be evaluated.
.IP "\fBhost [\s-1NAME\s0]\fR" 4
.IX Item "host [NAME]"
Get or set the database server host name used in the construction of the \s-1DSN\s0 which is passed in the \s-1DBI\s0 connect call.
.IP "\fBpassword [\s-1PASS\s0]\fR" 4
.IX Item "password [PASS]"
Get or set the password that will be passed to the \s-1DBI\s0 connect call.
.IP "\fBport [\s-1NUM\s0]\fR" 4
.IX Item "port [NUM]"
Get or set the database server port number used in the construction of the \s-1DSN\s0 which is passed in the \s-1DBI\s0 connect call.
.IP "\fBpre_disconnect_sql [\s-1STATEMENTS\s0]\fR" 4
.IX Item "pre_disconnect_sql [STATEMENTS]"
Get or set the \s-1SQL\s0 statements that will be run immediately before disconnecting from the database.  \s-1STATEMENTS\s0 should be a list or reference to an array of \s-1SQL\s0 statements.  Returns a reference to the array of \s-1SQL\s0 statements in scalar context, or a list of \s-1SQL\s0 statements in list context.
.Sp
The \s-1SQL\s0 statements are run in the order that they are supplied in \s-1STATEMENTS\s0.  If any pre_disconnect_sql statement fails when executed, the subsequent statements are ignored.
.IP "\fBpost_connect_sql [\s-1STATEMENTS\s0]\fR" 4
.IX Item "post_connect_sql [STATEMENTS]"
Get or set the \s-1SQL\s0 statements that will be run immediately after connecting to the database.  \s-1STATEMENTS\s0 should be a list or reference to an array of \s-1SQL\s0 statements.  Returns a reference to the array of \s-1SQL\s0 statements in scalar context, or a list of \s-1SQL\s0 statements in list context.
.Sp
The \s-1SQL\s0 statements are run in the order that they are supplied in \s-1STATEMENTS\s0.  If any post_connect_sql statement fails when executed, the subsequent statements are ignored.
.IP "\fBprimary_key_column_names [ \s-1TABLE\s0 | \s-1PARAMS\s0 ]\fR" 4
.IX Item "primary_key_column_names [ TABLE | PARAMS ]"
Returns a list (in list context) or reference to an array (in scalar context) of the names of the columns that make up the primary key for the specified table.  If the table has no primary key, an empty list (in list context) or reference to an empty array (in scalar context) will be returned.
.Sp
The table may be specified in two ways.  If one argument is passed, it is taken as the name of the table.  Otherwise, name/value pairs are expected.  Valid parameter names are:
.RS 4
.ie n .IP """catalog""" 4
.el .IP "\f(CWcatalog\fR" 4
.IX Item "catalog"
The name of the catalog that contains the table.  This parameter is optional and defaults to the return value of the catalog method.
.ie n .IP """schema""" 4
.el .IP "\f(CWschema\fR" 4
.IX Item "schema"
The name of the schema that contains the table.  This parameter is optional and defaults to the return value of the schema method.
.ie n .IP """table""" 4
.el .IP "\f(CWtable\fR" 4
.IX Item "table"
The name of the table.  This parameter is required.
.RE
.RS 4
.Sp
Case-sensitivity of names is determined by the underlying database.  If your database is case-sensitive, then you must pass names to this method with the expected case.
.RE
.IP "\fBprint_error [\s-1VALUE\s0]\fR" 4
.IX Item "print_error [VALUE]"
Get or set the value of the \*(L"PrintError\*(R" connect option and \s-1DBI\s0 handle attribute.  If a \s-1VALUE\s0 is passed, it will be set in both the connect options hash and the current database handle, if any.  Returns the value of the \*(L"PrintError\*(R" attribute of the database handle if it exists, or the connect option otherwise.
.Sp
This method should not be mixed with the connect_options method in calls to register_db or modify_db since connect_options will overwrite \fIall\fR the connect options with its argument, and neither register_db nor modify_db guarantee the order that its parameters will be evaluated.
.IP "\fBraise_error [\s-1VALUE\s0]\fR" 4
.IX Item "raise_error [VALUE]"
Get or set the value of the \*(L"RaiseError\*(R" connect option and \s-1DBI\s0 handle attribute.  If a \s-1VALUE\s0 is passed, it will be set in both the connect options hash and the current database handle, if any.  Returns the value of the \*(L"RaiseError\*(R" attribute of the database handle if it exists, or the connect option otherwise.
.Sp
This method should not be mixed with the connect_options method in calls to register_db or modify_db since connect_options will overwrite \fIall\fR the connect options with its argument, and neither register_db nor modify_db guarantee the order that its parameters will be evaluated.
.IP "\fBschema [\s-1SCHEMA\s0]\fR" 4
.IX Item "schema [SCHEMA]"
Get or set the database schema name.  This setting is only useful to databases that support the concept of schemas (e.g., PostgreSQL).
.IP "\fBserver_time_zone [\s-1TZ\s0]\fR" 4
.IX Item "server_time_zone [TZ]"
Get or set the time zone used by the database server software.  \s-1TZ\s0 should be a time zone name that is understood by DateTime::TimeZone.  The default value is \*(L"floating\*(R".
.Sp
See the DateTime::TimeZone documentation for acceptable values of \s-1TZ\s0.
.IP "\fBtype [\s-1TYPE\s0]\fR" 4
.IX Item "type [TYPE]"
Get or set the  data source type.  See the \*(L"Data Source Abstraction\*(R" section for more information on data source types.
.IP "\fBusername [\s-1NAME\s0]\fR" 4
.IX Item "username [NAME]"
Get or set the username that will be passed to the \s-1DBI\s0 connect call.
.SS "Value Parsing and Formatting"
.IX Subsection "Value Parsing and Formatting"
.IP "\fBformat_bitfield \s-1BITS\s0 [, \s-1SIZE\s0]\fR" 4
.IX Item "format_bitfield BITS [, SIZE]"
Converts the Bit::Vector object \s-1BITS\s0 into the appropriate format for the \*(L"bitfield\*(R" data type of the current data source.  If a \s-1SIZE\s0 argument is provided, the bit field will be padded with the appropriate number of zeros until it is \s-1SIZE\s0 bits long.  If the data source does not have a native \*(L"bit\*(R" or \*(L"bitfield\*(R" data type, a character data type may be used to store the string of 1s and 0s returned by the default implementation.
.IP "\fBformat_boolean \s-1VALUE\s0\fR" 4
.IX Item "format_boolean VALUE"
Converts \s-1VALUE\s0 into the appropriate format for the \*(L"boolean\*(R" data type of the current data source.  \s-1VALUE\s0 is simply evaluated in Perl's scalar context to determine if it's true or false.
.IP "\fBformat_date \s-1DATETIME\s0\fR" 4
.IX Item "format_date DATETIME"
Converts the DateTime object \s-1DATETIME\s0 into the appropriate format for the \*(L"date\*(R" (month, day, year) data type of the current data source.
.IP "\fBformat_datetime \s-1DATETIME\s0\fR" 4
.IX Item "format_datetime DATETIME"
Converts the DateTime object \s-1DATETIME\s0 into the appropriate format for the \*(L"datetime\*(R" (month, day, year, hour, minute, second) data type of the current data source.
.IP "\fBformat_interval \s-1DURATION\s0\fR" 4
.IX Item "format_interval DURATION"
Converts the DateTime::Duration object \s-1DURATION\s0 into the appropriate format for the interval (years, months, days, hours, minutes, seconds) data type of the current data source. If \s-1DURATION\s0 is undefined, a DateTime::Duration object, a valid interval keyword (according to validate_interval_keyword), or if it looks like a function call (matches \f(CW\*(C`/^\ew+\e(.*\e)$/\*(C'\fR) and keyword_function_calls is true, then it is returned unmodified.
.IP "\fBformat_time \s-1TIMECLOCK\s0\fR" 4
.IX Item "format_time TIMECLOCK"
Converts the Time::Clock object \s-1TIMECLOCK\s0 into the appropriate format for the time (hour, minute, second, fractional seconds) data type of the current data source.  Fractional seconds are optional, and the useful precision may vary depending on the data source.
.IP "\fBformat_timestamp \s-1DATETIME\s0\fR" 4
.IX Item "format_timestamp DATETIME"
Converts the DateTime object \s-1DATETIME\s0 into the appropriate format for the timestamp (month, day, year, hour, minute, second, fractional seconds) data type of the current data source.  Fractional seconds are optional, and the useful precision may vary depending on the data source.
.IP "\fBformat_timestamp_with_time_zone \s-1DATETIME\s0\fR" 4
.IX Item "format_timestamp_with_time_zone DATETIME"
Converts the DateTime object \s-1DATETIME\s0 into the appropriate format for the timestamp with time zone (month, day, year, hour, minute, second, fractional seconds, time zone) data type of the current data source.  Fractional seconds are optional, and the useful precision may vary depending on the data source.
.IP "\fBparse_bitfield \s-1BITS\s0 [, \s-1SIZE\s0]\fR" 4
.IX Item "parse_bitfield BITS [, SIZE]"
Parse \s-1BITS\s0 and return a corresponding Bit::Vector object.  If \s-1SIZE\s0 is not passed, then it defaults to the number of bits in the parsed bit string.
.Sp
If \s-1BITS\s0 is a string of \*(L"1\*(R"s and \*(L"0\*(R"s or matches \f(CW\*(C`/^B\*(Aq[10]+\*(Aq$/\*(C'\fR, then the \*(L"1\*(R"s and \*(L"0\*(R"s are parsed as a binary string.
.Sp
If \s-1BITS\s0 is a string of numbers, at least one of which is in the range 2\-9, it is assumed to be a decimal (base 10) number and is converted to a bitfield as such.
.Sp
If \s-1BITS\s0 matches any of these regular expressions:
.Sp
.Vb 3
\&    /^0x/
\&    /^X\*(Aq.*\*(Aq$/
\&    /^[0\-9a\-f]+$/
.Ve
.Sp
it is assumed to be a hexadecimal number and is converted to a bitfield as such.
.Sp
Otherwise, undef is returned.
.IP "\fBparse_boolean \s-1STRING\s0\fR" 4
.IX Item "parse_boolean STRING"
Parse \s-1STRING\s0 and return a boolean value of 1 or 0.  \s-1STRING\s0 should be formatted according to the data source's native \*(L"boolean\*(R" data type.  The default implementation accepts 't', 'true', 'y', 'yes', and '1' values for true, and 'f', 'false', 'n', 'no', and '0' values for false.
.Sp
If \s-1STRING\s0 is a valid boolean keyword (according to validate_boolean_keyword) or if it looks like a function call (matches \f(CW\*(C`/^\ew+\e(.*\e)$/\*(C'\fR) and keyword_function_calls is true, then it is returned unmodified.  Returns undef if \s-1STRING\s0 could not be parsed as a valid \*(L"boolean\*(R" value.
.IP "\fBparse_date \s-1STRING\s0\fR" 4
.IX Item "parse_date STRING"
Parse \s-1STRING\s0 and return a DateTime object.  \s-1STRING\s0 should be formatted according to the data source's native \*(L"date\*(R" (month, day, year) data type.
.Sp
If \s-1STRING\s0 is a valid date keyword (according to validate_date_keyword) or if it looks like a function call (matches \f(CW\*(C`/^\ew+\e(.*\e)$/\*(C'\fR) and keyword_function_calls is true, then it is returned unmodified.  Returns undef if \s-1STRING\s0 could not be parsed as a valid \*(L"date\*(R" value.
.IP "\fBparse_datetime \s-1STRING\s0\fR" 4
.IX Item "parse_datetime STRING"
Parse \s-1STRING\s0 and return a DateTime object.  \s-1STRING\s0 should be formatted according to the data source's native \*(L"datetime\*(R" (month, day, year, hour, minute, second) data type.
.Sp
If \s-1STRING\s0 is a valid datetime keyword (according to validate_datetime_keyword) or if it looks like a function call (matches \f(CW\*(C`/^\ew+\e(.*\e)$/\*(C'\fR) and keyword_function_calls is true, then it is returned unmodified.  Returns undef if \s-1STRING\s0 could not be parsed as a valid \*(L"datetime\*(R" value.
.IP "\fBparse_interval \s-1STRING\s0 [, \s-1MODE\s0]\fR" 4
.IX Item "parse_interval STRING [, MODE]"
Parse \s-1STRING\s0 and return a DateTime::Duration object.  \s-1STRING\s0 should be formatted according to the data source's native \*(L"interval\*(R" (years, months, days, hours, minutes, seconds) data type.
.Sp
If \s-1STRING\s0 is a DateTime::Duration object, a valid interval keyword (according to validate_interval_keyword), or if it looks like a function call (matches \f(CW\*(C`/^\ew+\e(.*\e)$/\*(C'\fR) and keyword_function_calls is true, then it is returned unmodified.  Otherwise, undef is returned if \s-1STRING\s0 could not be parsed as a valid \*(L"interval\*(R" value.
.Sp
This optional \s-1MODE\s0 argyment determines how math is done on duration objects.  If defined, the \f(CW\*(C`end_of_month\*(C'\fR setting for each DateTime::Duration object created by this column will have its mode set to \s-1MODE\s0.  Otherwise, the \f(CW\*(C`end_of_month\*(C'\fR parameter will not be passed to the DateTime::Duration constructor.
.Sp
Valid modes are \f(CW\*(C`wrap\*(C'\fR, \f(CW\*(C`limit\*(C'\fR, and \f(CW\*(C`preserve\*(C'\fR.  See the documentation for DateTime::Duration for a full explanation.
.IP "\fBparse_time \s-1STRING\s0\fR" 4
.IX Item "parse_time STRING"
Parse \s-1STRING\s0 and return a Time::Clock object.  \s-1STRING\s0 should be formatted according to the data source's native \*(L"time\*(R" (hour, minute, second, fractional seconds) data type.
.Sp
If \s-1STRING\s0 is a valid time keyword (according to validate_time_keyword) or if it looks like a function call (matches \f(CW\*(C`/^\ew+\e(.*\e)$/\*(C'\fR) and keyword_function_calls is true, then it is returned unmodified.  Returns undef if \s-1STRING\s0 could not be parsed as a valid \*(L"time\*(R" value.
.IP "\fBparse_timestamp \s-1STRING\s0\fR" 4
.IX Item "parse_timestamp STRING"
Parse \s-1STRING\s0 and return a DateTime object.  \s-1STRING\s0 should be formatted according to the data source's native \*(L"timestamp\*(R" (month, day, year, hour, minute, second, fractional seconds) data type.  Fractional seconds are optional, and the acceptable precision may vary depending on the data source.
.Sp
If \s-1STRING\s0 is a valid timestamp keyword (according to validate_timestamp_keyword) or if it looks like a function call (matches \f(CW\*(C`/^\ew+\e(.*\e)$/\*(C'\fR) and keyword_function_calls is true, then it is returned unmodified.  Returns undef if \s-1STRING\s0 could not be parsed as a valid \*(L"timestamp\*(R" value.
.IP "\fBparse_timestamp_with_time_zone \s-1STRING\s0\fR" 4
.IX Item "parse_timestamp_with_time_zone STRING"
Parse \s-1STRING\s0 and return a DateTime object.  \s-1STRING\s0 should be formatted according to the data source's native \*(L"timestamp with time zone\*(R" (month, day, year, hour, minute, second, fractional seconds, time zone) data type.  Fractional seconds are optional, and the acceptable precision may vary depending on the data source.
.Sp
If \s-1STRING\s0 is a valid timestamp keyword (according to validate_timestamp_keyword) or if it looks like a function call (matches \f(CW\*(C`/^\ew+\e(.*\e)$/\*(C'\fR) and keyword_function_calls is true, then it is returned unmodified.  Returns undef if \s-1STRING\s0 could not be parsed as a valid \*(L"timestamp with time zone\*(R" value.
.IP "\fBvalidate_boolean_keyword \s-1STRING\s0\fR" 4
.IX Item "validate_boolean_keyword STRING"
Returns true if \s-1STRING\s0 is a valid keyword for the \*(L"boolean\*(R" data type of the current data source, false otherwise.  The default implementation accepts the values \*(L"\s-1TRUE\s0\*(R" and \*(L"\s-1FALSE\s0\*(R".
.IP "\fBvalidate_date_keyword \s-1STRING\s0\fR" 4
.IX Item "validate_date_keyword STRING"
Returns true if \s-1STRING\s0 is a valid keyword for the \*(L"date\*(R" (month, day, year) data type of the current data source, false otherwise.  The default implementation always returns false.
.IP "\fBvalidate_datetime_keyword \s-1STRING\s0\fR" 4
.IX Item "validate_datetime_keyword STRING"
Returns true if \s-1STRING\s0 is a valid keyword for the \*(L"datetime\*(R" (month, day, year, hour, minute, second) data type of the current data source, false otherwise.  The default implementation always returns false.
.IP "\fBvalidate_interval_keyword \s-1STRING\s0\fR" 4
.IX Item "validate_interval_keyword STRING"
Returns true if \s-1STRING\s0 is a valid keyword for the \*(L"interval\*(R" (years, months, days, hours, minutes, seconds) data type of the current data source, false otherwise.  The default implementation always returns false.
.IP "\fBvalidate_time_keyword \s-1STRING\s0\fR" 4
.IX Item "validate_time_keyword STRING"
Returns true if \s-1STRING\s0 is a valid keyword for the \*(L"time\*(R" (hour, minute, second, fractional seconds) data type of the current data source, false otherwise.  The default implementation always returns false.
.IP "\fBvalidate_timestamp_keyword \s-1STRING\s0\fR" 4
.IX Item "validate_timestamp_keyword STRING"
Returns true if \s-1STRING\s0 is a valid keyword for the \*(L"timestamp\*(R" (month, day, year, hour, minute, second, fractional seconds) data type of the current data source, false otherwise.  The default implementation always returns false.
.SH "DEVELOPMENT POLICY"
.IX Header "DEVELOPMENT POLICY"
The Rose development policy applies to this, and all \f(CW\*(C`Rose::*\*(C'\fR modules.  Please install Rose from \s-1CPAN\s0 and then run "\f(CW\*(C`perldoc Rose\*(C'\fR" for more information.
.SH "SUPPORT"
.IX Header "SUPPORT"
Any Rose::DB questions or problems can be posted to the Rose::DB::Object mailing list.  (If the volume ever gets high enough, I'll create a separate list for Rose::DB, but it isn't an issue right now.)  To subscribe to the list or view the archives, go here:
.PP
<http://groups.google.com/group/rose\-db\-object>
.PP
Although the mailing list is the preferred support mechanism, you can also email the author (see below) or file bugs using the \s-1CPAN\s0 bug tracking system:
.PP
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Rose\-DB>
.PP
There's also a wiki and other resources linked from the Rose project home page:
.PP
<http://rose.googlecode.com>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Kostas Chatzikokolakis, Peter Karman, Lucian Dragus, Ron Savage
.SH "AUTHOR"
.IX Header "AUTHOR"
John C. Siracusa (siracusa@gmail.com)
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 2010 by John C. Siracusa.  All rights reserved.  This program is
free software; you can redistribute it and/or modify it under the same terms
as Perl itself.
