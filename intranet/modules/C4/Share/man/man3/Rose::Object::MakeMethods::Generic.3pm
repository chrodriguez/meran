.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Rose::Object::MakeMethods::Generic 3"
.TH Rose::Object::MakeMethods::Generic 3 "2010-10-17" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rose::Object::MakeMethods::Generic \- Create simple object methods.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package MyObject;
\&
\&  use Rose::Object::MakeMethods::Generic
\&  (
\&    scalar => 
\&    [
\&      \*(Aqpower\*(Aq,
\&      \*(Aqerror\*(Aq,
\&    ],
\&
\&    \*(Aqscalar \-\-get_set_init\*(Aq => \*(Aqname\*(Aq,
\&
\&    \*(Aqboolean \-\-get_set_init\*(Aq => \*(Aqis_tall\*(Aq,
\&
\&    boolean => 
\&    [
\&      \*(Aqis_red\*(Aq,
\&      \*(Aqis_happy\*(Aq => { default => 1 },
\&    ],
\&
\&    array =>
\&    [
\&      jobs       => {},
\&      job        => { interface => \*(Aqget_set_item\*(Aq, hash_key => \*(Aqjobs\*(Aq },
\&      clear_jobs => { interface => \*(Aqclear\*(Aq, hash_key => \*(Aqjobs\*(Aq },
\&      reset_jobs => { interface => \*(Aqreset\*(Aq, hash_key => \*(Aqjobs\*(Aq },
\&    ],
\&
\&    hash =>
\&    [
\&      param        => { hash_key => \*(Aqparams\*(Aq },
\&      params       => { interface => \*(Aqget_set_all\*(Aq },
\&      param_names  => { interface => \*(Aqkeys\*(Aq, hash_key => \*(Aqparams\*(Aq },
\&      param_values => { interface => \*(Aqvalues\*(Aq, hash_key => \*(Aqparams\*(Aq },
\&      param_exists => { interface => \*(Aqexists\*(Aq, hash_key => \*(Aqparams\*(Aq },
\&      delete_param => { interface => \*(Aqdelete\*(Aq, hash_key => \*(Aqparams\*(Aq },
\&
\&      clear_params => { interface => \*(Aqclear\*(Aq, hash_key => \*(Aqparams\*(Aq },
\&      reset_params => { interface => \*(Aqreset\*(Aq, hash_key => \*(Aqparams\*(Aq },
\&    ],
\&  );
\&
\&  sub init_name    { \*(AqFred\*(Aq }
\&  sub init_is_tall { 1 }
\&  ...
\&
\&  $obj = MyObject\->new(power => 5);
\&
\&  print $obj\->name; # Fred
\&
\&  $obj\->do_something or die $obj\->error;
\&
\&  $obj\->is_tall;        # true
\&  $obj\->is_tall(undef); # false (but defined)
\&  $obj\->is_tall;        # false (but defined)
\&
\&  $obj\->is_red;         # undef
\&  $obj\->is_red(1234);   # true
\&  $obj\->is_red(\*(Aq\*(Aq);     # false (but defined)
\&  $obj\->is_red;         # false (but defined)
\&
\&  $obj\->is_happy;       # true
\&
\&  $obj\->params(a => 1, b => 2);   # add pairs
\&  $val = $obj\->param(\*(Aqb\*(Aq);        # 2
\&  $obj\->param_exists(\*(Aqx\*(Aq);        # false
\&
\&  $obj\->jobs(\*(Aqbutcher\*(Aq, \*(Aqbaker\*(Aq); # add values
\&  $obj\->job(0 => \*(Aqsailor\*(Aq);       # set value
\&  $job = $obj\->job(0);            # \*(Aqsailor\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Rose::Object::MakeMethods::Generic is a method maker that inherits from Rose::Object::MakeMethods.  See the Rose::Object::MakeMethods documentation to learn about the interface.  The method types provided by this module are described below.  All methods work only with hash-based objects.
.SH "METHODS TYPES"
.IX Header "METHODS TYPES"
.IP "\fBscalar\fR" 4
.IX Item "scalar"
Create get/set methods for scalar attributes.
.RS 4
.IP "Options" 4
.IX Item "Options"
.RS 4
.PD 0
.ie n .IP """hash_key""" 4
.el .IP "\f(CWhash_key\fR" 4
.IX Item "hash_key"
.PD
The key inside the hash-based object to use for the storage of this attribute. Defaults to the name of the method.
.ie n .IP """init_method""" 4
.el .IP "\f(CWinit_method\fR" 4
.IX Item "init_method"
The name of the method to call when initializing the value of an undefined attribute.  This option is only applicable when using the \f(CW\*(C`get_set_init\*(C'\fR interface.  Defaults to the method name with the prefix \f(CW\*(C`init_\*(C'\fR added.
.ie n .IP """interface""" 4
.el .IP "\f(CWinterface\fR" 4
.IX Item "interface"
Choose one of the two possible interfaces.  Defaults to \f(CW\*(C`get_set\*(C'\fR.
.RE
.RS 4
.RE
.IP "Interfaces" 4
.IX Item "Interfaces"
.RS 4
.PD 0
.ie n .IP """get_set""" 4
.el .IP "\f(CWget_set\fR" 4
.IX Item "get_set"
.PD
Creates a simple get/set accessor method for an object attribute.  When called with an argument, the value of the attribute is set.  The current value of the attribute is returned.
.ie n .IP """get_set_init""" 4
.el .IP "\f(CWget_set_init\fR" 4
.IX Item "get_set_init"
Behaves like the \f(CW\*(C`get_set\*(C'\fR interface unless the value of the attribute is undefined.  In that case, the method specified by the \f(CW\*(C`init_method\*(C'\fR option is called and the attribute is set to the return value of that method.
.RE
.RS 4
.RE
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 1
\&    package MyObject;
\&
\&    use Rose::Object::MakeMethods::Generic
\&    (
\&      scalar => \*(Aqpower\*(Aq,
\&      \*(Aqscalar \-\-get_set_init\*(Aq => \*(Aqname\*(Aq,
\&    );
\&
\&    sub init_name { \*(AqFred\*(Aq }
\&    ...
\&
\&    $obj\->power(99);    # returns 99
\&    $obj\->name;         # returns "Fred"
\&    $obj\->name(\*(AqBill\*(Aq); # returns "Bill"
.Ve
.RE
.IP "\fBboolean\fR" 4
.IX Item "boolean"
Create get/set methods for boolean attributes.  For each argument to these methods, the only thing that matters is whether it evaluates to true or false.  The return value is either, true, false (but defined), or undef if the value has never been set.
.RS 4
.IP "Options" 4
.IX Item "Options"
.RS 4
.PD 0
.ie n .IP """default""" 4
.el .IP "\f(CWdefault\fR" 4
.IX Item "default"
.PD
Determines the default value of the attribute.  This option is only applicable when using the \f(CW\*(C`get_set\*(C'\fR interface.
.ie n .IP """hash_key""" 4
.el .IP "\f(CWhash_key\fR" 4
.IX Item "hash_key"
The key inside the hash-based object to use for the storage of this attribute. Defaults to the name of the method.
.ie n .IP """init_method""" 4
.el .IP "\f(CWinit_method\fR" 4
.IX Item "init_method"
The name of the method to call when initializing the value of an undefined attribute.  Again, the only thing that matters about the return value of this method is whether or not is is true or false.  This option is only applicable when using the \f(CW\*(C`get_set_init\*(C'\fR interface. Defaults to the method name with the prefix \f(CW\*(C`init_\*(C'\fR added.
.ie n .IP """interface""" 4
.el .IP "\f(CWinterface\fR" 4
.IX Item "interface"
Choose one of the two possible interfaces.  Defaults to \f(CW\*(C`get_set\*(C'\fR.
.RE
.RS 4
.RE
.IP "Interfaces" 4
.IX Item "Interfaces"
.RS 4
.PD 0
.ie n .IP """get_set""" 4
.el .IP "\f(CWget_set\fR" 4
.IX Item "get_set"
.PD
Creates a simple get/set accessor method for a boolean object attribute. When called with an argument, the value of the attribute is set to true if the argument evaluates to true, false (but defined) otherwise.  The current value of the attribute is returned.
.Sp
If Class::XSAccessor version 0.14 or later is installed and the \f(CW\*(C`ROSE_OBJECT_NO_CLASS_XSACCESOR\*(C'\fR environment variable is not set to a true value, then Class::XSAccessor will be used to generated the method.
.ie n .IP """get_set_init""" 4
.el .IP "\f(CWget_set_init\fR" 4
.IX Item "get_set_init"
Behaves like the \f(CW\*(C`get_set\*(C'\fR interface unless the value of the attribute is undefined.  In that case, the method specified by the \f(CW\*(C`init_method\*(C'\fR option is called and the attribute is set based on the boolean value of the return value of that method.
.RE
.RS 4
.RE
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 1
\&    package MyObject;
\&
\&    use Rose::Object::MakeMethods::Generic
\&    (
\&      \*(Aqboolean \-\-get_set_init\*(Aq => \*(Aqis_tall\*(Aq,
\&
\&      boolean => 
\&      [
\&        \*(Aqis_red\*(Aq,
\&        \*(Aqis_happy\*(Aq => { default => 1 },
\&      ],
\&    );
\&
\&    sub init_is_tall { \*(Aqblah\*(Aq }
\&    ...
\&
\&    $obj\->is_tall;        # returns true
\&    $obj\->is_tall(undef); # returns false (but defined)
\&    $obj\->is_tall;        # returns false (but defined)
\&
\&    $obj\->is_red;         # returns undef
\&    $obj\->is_red(1234);   # returns true
\&    $obj\->is_red(\*(Aq\*(Aq);     # returns false (but defined)
\&    $obj\->is_red;         # returns false (but defined)
\&
\&    $obj\->is_happy;       # returns true
.Ve
.RE
.IP "\fBhash\fR" 4
.IX Item "hash"
Create methods to manipulate hash attributes.
.RS 4
.IP "Options" 4
.IX Item "Options"
.RS 4
.PD 0
.ie n .IP """hash_key""" 4
.el .IP "\f(CWhash_key\fR" 4
.IX Item "hash_key"
.PD
The key inside the hash-based object to use for the storage of this attribute.  Defaults to the name of the method.
.ie n .IP """init_method""" 4
.el .IP "\f(CWinit_method\fR" 4
.IX Item "init_method"
The name of the method to call when initializing the value of an undefined hash attribute.    This method should return a reference to a hash, and is only applicable when using the \f(CW\*(C`get_set_init\*(C'\fR interface. Defaults to the method name with the prefix \f(CW\*(C`init_\*(C'\fR added.
.ie n .IP """interface""" 4
.el .IP "\f(CWinterface\fR" 4
.IX Item "interface"
Choose which interface to use.  Defaults to \f(CW\*(C`get_set\*(C'\fR.
.RE
.RS 4
.RE
.IP "Interfaces" 4
.IX Item "Interfaces"
.RS 4
.PD 0
.ie n .IP """get_set""" 4
.el .IP "\f(CWget_set\fR" 4
.IX Item "get_set"
.PD
If called with no arguments, returns a list of key/value pairs in list context or a reference to the actual hash stored by the object in scalar context.
.Sp
If called with one argument, and that argument is a reference to a hash, that hash reference is used as the new value for the attribute.  Returns a list of key/value pairs in list context or a reference to the actual hash stored by the object in scalar context.
.Sp
If called with one argument, and that argument is a reference to an array, then a list of the hash values for each key in the array is returned.
.Sp
If called with one argument, and it is not a reference to a hash or an array, then the hash value for that key is returned.
.Sp
If called with an even number of arguments, they are taken as name/value pairs and are added to the hash.  It then returns a list of key/value pairs in list context or a reference to the actual hash stored by the object in scalar context.
.Sp
Passing an odd number of arguments greater than 1 causes a fatal error.
.ie n .IP """get_set_init""" 4
.el .IP "\f(CWget_set_init\fR" 4
.IX Item "get_set_init"
Behaves like the \f(CW\*(C`get_set\*(C'\fR interface unless the attribute is undefined. In that case, the method specified by the \f(CW\*(C`init_method\*(C'\fR option is called and the attribute is set to the return value of that method, which should be a reference to a hash.
.ie n .IP """get_set_inited""" 4
.el .IP "\f(CWget_set_inited\fR" 4
.IX Item "get_set_inited"
Behaves like the \f(CW\*(C`get_set\*(C'\fR interface unless the attribute is undefined. In that case, it is initialized to an empty hash before proceeding as usual.
.ie n .IP """get_set_all""" 4
.el .IP "\f(CWget_set_all\fR" 4
.IX Item "get_set_all"
If called with no arguments, returns a list of key/value pairs in list context or a reference to the actual hash stored by the object in scalar context.
.Sp
If called with one argument, and that argument is a reference to a hash, that hash reference is used as the new value for the attribute.  Returns a list of key/value pairs in list context or a reference to the actual hash stored by the object in scalar context.
.Sp
Otherwise, the hash is emptied and the arguments are taken as name/value pairs that are then added to the hash.  It then returns a list of key/value pairs in list context or a reference to the actual hash stored by the object in scalar context.
.ie n .IP """get_set_init_all""" 4
.el .IP "\f(CWget_set_init_all\fR" 4
.IX Item "get_set_init_all"
Behaves like the \f(CW\*(C`get_set_all\*(C'\fR interface unless the attribute is undefined. In that case, the method specified by the \f(CW\*(C`init_method\*(C'\fR option is called and the attribute is set to the return value of that method, which should be a reference to a hash.
.ie n .IP """clear""" 4
.el .IP "\f(CWclear\fR" 4
.IX Item "clear"
Sets the attribute to an empty hash.
.ie n .IP """reset""" 4
.el .IP "\f(CWreset\fR" 4
.IX Item "reset"
Sets the attribute to undef.
.ie n .IP """delete""" 4
.el .IP "\f(CWdelete\fR" 4
.IX Item "delete"
Deletes the key(s) passed as arguments.  Failure to pass any arguments causes a fatal error.
.ie n .IP """exists""" 4
.el .IP "\f(CWexists\fR" 4
.IX Item "exists"
Returns true of the argument exists in the hash, false otherwise. Failure to pass an argument or passing more than one argument causes a fatal error.
.ie n .IP """keys""" 4
.el .IP "\f(CWkeys\fR" 4
.IX Item "keys"
Returns the keys of the hash in list context, or a reference to an array of the keys of the hash in scalar context.  The keys are not sorted.
.ie n .IP """names""" 4
.el .IP "\f(CWnames\fR" 4
.IX Item "names"
An alias for the \f(CW\*(C`keys\*(C'\fR interface.
.ie n .IP """values""" 4
.el .IP "\f(CWvalues\fR" 4
.IX Item "values"
Returns the values of the hash in list context, or a reference to an array of the values of the hash in scalar context.  The values are not sorted.
.RE
.RS 4
.RE
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 1
\&    package MyObject;
\&
\&    use Rose::Object::MakeMethods::Generic
\&    (
\&      hash =>
\&      [
\&        param        => { hash_key =>\*(Aqparams\*(Aq },
\&        params       => { interface=>\*(Aqget_set_all\*(Aq },
\&        param_names  => { interface=>\*(Aqkeys\*(Aq,   hash_key=>\*(Aqparams\*(Aq },
\&        param_values => { interface=>\*(Aqvalues\*(Aq, hash_key=>\*(Aqparams\*(Aq },
\&        param_exists => { interface=>\*(Aqexists\*(Aq, hash_key=>\*(Aqparams\*(Aq },
\&        delete_param => { interface=>\*(Aqdelete\*(Aq, hash_key=>\*(Aqparams\*(Aq },
\&
\&        clear_params => { interface=>\*(Aqclear\*(Aq, hash_key=>\*(Aqparams\*(Aq },
\&        reset_params => { interface=>\*(Aqreset\*(Aq, hash_key=>\*(Aqparams\*(Aq },
\&      ],
\&    );
\&    ...
\&
\&    $obj = MyObject\->new;
\&
\&    $obj\->params; # undef
\&
\&    $obj\->params(a => 1, b => 2); # add pairs
\&    $val = $obj\->param(\*(Aqb\*(Aq); # 2
\&
\&    %params = $obj\->params; # copy hash keys and values
\&    $params = $obj\->params; # get hash ref
\&
\&    $obj\->params({ c => 3, d => 4 }); # replace contents
\&
\&    $obj\->param_exists(\*(Aqa\*(Aq); # false
\&
\&    $keys = join(\*(Aq,\*(Aq, sort $obj\->param_names);  # \*(Aqc,d\*(Aq
\&    $vals = join(\*(Aq,\*(Aq, sort $obj\->param_values); # \*(Aq3,4\*(Aq
\&
\&    $obj\->delete_param(\*(Aqc\*(Aq);
\&    $obj\->param(f => 7, g => 8);
\&
\&    $vals = join(\*(Aq,\*(Aq, sort $obj\->param_values); # \*(Aq4,7,8\*(Aq
\&
\&    $obj\->clear_params;
\&    $params = $obj\->params; # empty hash
\&
\&    $obj\->reset_params;
\&    $params = $obj\->params; # undef
.Ve
.RE
.IP "\fBarray\fR" 4
.IX Item "array"
Create methods to manipulate array attributes.
.RS 4
.IP "Options" 4
.IX Item "Options"
.RS 4
.PD 0
.ie n .IP """hash_key""" 4
.el .IP "\f(CWhash_key\fR" 4
.IX Item "hash_key"
.PD
The key inside the hash-based object to use for the storage of this attribute.  Defaults to the name of the method.
.ie n .IP """init_method""" 4
.el .IP "\f(CWinit_method\fR" 4
.IX Item "init_method"
The name of the method to call when initializing the value of an undefined array attribute.    This method should return a reference to an array.  This option is only applicable when using the \f(CW\*(C`get_set_init\*(C'\fR, \f(CW\*(C`push\*(C'\fR, and \f(CW\*(C`add\*(C'\fR interfaces.  When using the \f(CW\*(C`get_set_init\*(C'\fR interface, \f(CW\*(C`init_method\*(C'\fR defaults to the method name with the prefix \f(CW\*(C`init_\*(C'\fR added.
.ie n .IP """interface""" 4
.el .IP "\f(CWinterface\fR" 4
.IX Item "interface"
Choose which interface to use.  Defaults to \f(CW\*(C`get_set\*(C'\fR.
.RE
.RS 4
.RE
.IP "Interfaces" 4
.IX Item "Interfaces"
.RS 4
.PD 0
.ie n .IP """get_set""" 4
.el .IP "\f(CWget_set\fR" 4
.IX Item "get_set"
.PD
If called with no arguments, returns the array contents in list context or a reference to the actual array stored by the object in scalar context.
.Sp
If called with one argument, and that argument is a reference to an array, that array reference is used as the new value for the attribute. Returns the array contents in list context or a reference to the actual array stored by the object in scalar context.
.Sp
If called with one argument, and that argument is not a reference to an array, or if called with more than one argument, then the array contents are replaced by the arguments.  Returns the array contents in list context or a reference to the actual array stored by the object in scalar context.
.ie n .IP """get_set_init""" 4
.el .IP "\f(CWget_set_init\fR" 4
.IX Item "get_set_init"
Behaves like the \f(CW\*(C`get_set\*(C'\fR interface unless the attribute is undefined. In that case, the method specified by the \f(CW\*(C`init_method\*(C'\fR option is called and the attribute is set to the return value of that method, which should be a reference to an array.
.ie n .IP """get_set_inited""" 4
.el .IP "\f(CWget_set_inited\fR" 4
.IX Item "get_set_inited"
Behaves like the \f(CW\*(C`get_set\*(C'\fR interface unless the attribute is undefined. In that case, it is initialized to an empty array before proceeding as usual.
.ie n .IP """get_set_item""" 4
.el .IP "\f(CWget_set_item\fR" 4
.IX Item "get_set_item"
If called with one argument, returns the item at that array index.
.Sp
If called with two arguments, sets the item at the array index specified by the first argument to the value specified by the second argument.
.Sp
Failure to pass any arguments causes a fatal error.
.ie n .IP """exists""" 4
.el .IP "\f(CWexists\fR" 4
.IX Item "exists"
Returns true of the argument exists in the hash, false otherwise. Failure to pass an argument or passing more than one argument causes a fatal error.
.ie n .IP """add""" 4
.el .IP "\f(CWadd\fR" 4
.IX Item "add"
An alias for the \f(CW\*(C`push\*(C'\fR interface.
.ie n .IP """push""" 4
.el .IP "\f(CWpush\fR" 4
.IX Item "push"
If called with a list or a reference to an array, the contents of the list or referenced array are added to the end of the array.  If called with no arguments, a fatal error will occur.
.ie n .IP """pop""" 4
.el .IP "\f(CWpop\fR" 4
.IX Item "pop"
Remove an item from the end of the array and returns it.  If an integer argument is passed, then that number of items is removed and returned. Otherwise, just one is removed and returned.
.ie n .IP """shift""" 4
.el .IP "\f(CWshift\fR" 4
.IX Item "shift"
Remove an item from the start of the array and returns it.  If an integer argument is passed, then that number of items is removed and returned. Otherwise, just one is removed and returned.
.ie n .IP """unshift""" 4
.el .IP "\f(CWunshift\fR" 4
.IX Item "unshift"
If called with a list or a reference to an array, the contents of the list or referenced array are added to the start of the array.  If called with no arguments, a fatal error will occur.
.ie n .IP """clear""" 4
.el .IP "\f(CWclear\fR" 4
.IX Item "clear"
Sets the attribute to an empty array.
.ie n .IP """reset""" 4
.el .IP "\f(CWreset\fR" 4
.IX Item "reset"
Sets the attribute to undef.
.RE
.RS 4
.RE
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 1
\&    package MyObject;
\&
\&    use Rose::Object::MakeMethods::Generic
\&    (
\&      array =>
\&      [
\&        jobs       => {},
\&        job        => { interface => \*(Aqget_set_item\*(Aq, 
\&                        hash_key  => \*(Aqjobs\*(Aq },
\&        clear_jobs => { interface => \*(Aqclear\*(Aq, hash_key => \*(Aqjobs\*(Aq },
\&        reset_jobs => { interface => \*(Aqreset\*(Aq, hash_key => \*(Aqjobs\*(Aq },
\&      ],
\&    );
\&    ...
\&
\&    $obj = MyObject\->new;
\&
\&    $jobs = $obj\->jobs; # undef
\&
\&    $obj\->clear_jobs();
\&    $jobs = $obj\->jobs; # ref to empty array
\&
\&    $obj\->jobs(\*(Aqbutcher\*(Aq, \*(Aqbaker\*(Aq); # add values
\&    $vals = join(\*(Aq,\*(Aq, $obj\->jobs);  # \*(Aqbutcher,baker\*(Aq
\&
\&    $obj\->jobs([ \*(Aqcandlestick\*(Aq, \*(Aqmaker\*(Aq ]); # replace values
\&
\&    $vals = join(\*(Aq,\*(Aq, $obj\->jobs); # \*(Aqcandlestick,maker\*(Aq
\&
\&    $job = $obj\->job(0);      # \*(Aqcandlestick\*(Aq
\&    $obj\->job(0 => \*(Aqsailor\*(Aq); # set value
\&    $job = $obj\->job(0);      # \*(Aqsailor\*(Aq
\&
\&    $obj\->reset_jobs;
\&    $jobs = $obj\->jobs; # undef
.Ve
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
John C. Siracusa (siracusa@gmail.com)
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 2010 by John C. Siracusa.  All rights reserved.  This program is
free software; you can redistribute it and/or modify it under the same terms
as Perl itself.
