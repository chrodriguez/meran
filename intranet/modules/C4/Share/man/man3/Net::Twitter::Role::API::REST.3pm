.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Twitter::Role::API::REST 3"
.TH Net::Twitter::Role::API::REST 3 "2012-04-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.IP "status" 4
.IX Item "status"
Required.  The text of your status update. \s-1URL\s0 encode as necessary. Statuses
over 140 characters will cause a 403 error to be returned from the \s-1API\s0.
.IP "in_reply_to_status_id" 4
.IX Item "in_reply_to_status_id"
Optional. The \s-1ID\s0 of an existing status that the update is in reply to.  o Note:
This parameter will be ignored unless the author of the tweet this parameter
references is mentioned within the status text. Therefore, you must include
\&\f(CW@username\fR, where username is the author of the referenced tweet, within the
update.
.IP "lat" 4
.IX Item "lat"
Optional. The location's latitude that this tweet refers to.  The valid ranges
for latitude is \-90.0 to +90.0 (North is positive) inclusive.  This parameter
will be ignored if outside that range, if it is not a number, if geo_enabled is
disabled, or if there not a corresponding long parameter with this tweet.
.IP "long" 4
.IX Item "long"
Optional. The location's longitude that this tweet refers to.  The valid ranges
for longitude is \-180.0 to +180.0 (East is positive) inclusive.  This parameter
will be ignored if outside that range, if it is not a number, if geo_enabled is
disabled, or if there not a corresponding lat parameter with this tweet.
.IP "place_id" 4
.IX Item "place_id"
Optional. The place to attach to this status update.  Valid place_ids can be
found by querying \f(CW\*(C`reverse_geocode\*(C'\fR.
.IP "display_coordinates" 4
.IX Item "display_coordinates"
Optional. By default, geo-tweets will have their coordinates exposed in the
status object (to remain backwards compatible with existing \s-1API\s0 applications).
To turn off the display of the precise latitude and longitude (but keep the
contextual location information), pass \f(CW\*(C`display_coordinates =\*(C'\fR 0> on the
status update.
.PP
\&\s-1EOT\s0
.PP
);
.PP
twitter_api_method destroy_status => (
    description => <<'',
Destroys the status specified by the required \s-1ID\s0 parameter.  The
authenticating user must be the author of the specified status.
.PP
.Vb 7
\&    path     => \*(Aqstatuses/destroy/:id\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/id trim_user include_entities/],
\&    booleans => [qw/trim_user include_entities/],
\&    required => [qw/id/],
\&    returns  => \*(AqStatus\*(Aq,
\&);
.Ve
.PP
twitter_api_method friends => (
    deprecated  => 1,
    description => <<'\s-1EOT\s0',
This method has been deprecated.  Twitter intends to stop support for it on May
14, 2012.  Use \f(CW\*(C`friends_ids\*(C'\fR and \f(CW\*(C`lookup_users\*(C'\fR instead.
.PP
Returns a reference to an array of the user's friends.  If \f(CW\*(C`id\*(C'\fR, \f(CW\*(C`user_id\*(C'\fR,
or \f(CW\*(C`screen_name\*(C'\fR is not specified, the friends of the authenticating user are
returned.  The returned users are ordered from most recently followed to least
recently followed.
.PP
Use the optional \f(CW\*(C`cursor\*(C'\fR parameter to retrieve users in pages of 100.  When
the \f(CW\*(C`cursor\*(C'\fR parameter is used, the return value is a reference to a hash with
keys \f(CW\*(C`previous_cursor\*(C'\fR, \f(CW\*(C`next_cursor\*(C'\fR, and \f(CW\*(C`users\*(C'\fR.  The value of \f(CW\*(C`users\*(C'\fR
is a reference to an array of the user's friends. The result set isn't
guaranteed to be 100 every time as suspended users will be filtered out.  Set
the optional \f(CW\*(C`cursor\*(C'\fR parameter to \-1 to get the first page of users.  Set it
to the prior return's value of \f(CW\*(C`previous_cursor\*(C'\fR or \f(CW\*(C`next_cursor\*(C'\fR to page
forward or backwards.  When there are no prior pages, the value of
\&\f(CW\*(C`previous_cursor\*(C'\fR will be 0.  When there are no subsequent pages, the value of
\&\f(CW\*(C`next_cursor\*(C'\fR will be 0.
\&\s-1EOT\s0
.PP
.Vb 8
\&    aliases  => [qw/following/],
\&    path     => \*(Aqstatuses/friends/:id\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw/id user_id screen_name cursor include_entities/],
\&    booleans => [qw/include_entities/],
\&    required => [qw//],
\&    returns  => \*(AqHashref|ArrayRef[User]\*(Aq,
\&);
.Ve
.PP
twitter_api_method followers => (
    deprecated  => 1,
    description => <<'\s-1EOT\s0',
This method has been deprecated.  Twitter intends to stop support for it on May
14, 2012.  Use \f(CW\*(C`friends_ids\*(C'\fR and \f(CW\*(C`lookup_users\*(C'\fR instead.
.PP
Returns a reference to an array of the user's followers.  If \f(CW\*(C`id\*(C'\fR, \f(CW\*(C`user_id\*(C'\fR,
or \f(CW\*(C`screen_name\*(C'\fR is not specified, the followers of the authenticating user are
returned.  The returned users are ordered from most recently followed to least
recently followed.
.PP
Use the optional \f(CW\*(C`cursor\*(C'\fR parameter to retrieve users in pages of 100.  When
the \f(CW\*(C`cursor\*(C'\fR parameter is used, the return value is a reference to a hash with
keys \f(CW\*(C`previous_cursor\*(C'\fR, \f(CW\*(C`next_cursor\*(C'\fR, and \f(CW\*(C`users\*(C'\fR.  The value of \f(CW\*(C`users\*(C'\fR
is a reference to an array of the user's friends. The result set isn't
guaranteed to be 100 every time as suspended users will be filtered out.  Set
the optional \f(CW\*(C`cursor\*(C'\fR parameter to \-1 to get the first page of users.  Set it
to the prior return's value of \f(CW\*(C`previous_cursor\*(C'\fR or \f(CW\*(C`next_cursor\*(C'\fR to page
forward or backwards.  When there are no prior pages, the value of
\&\f(CW\*(C`previous_cursor\*(C'\fR will be 0.  When there are no subsequent pages, the value of
\&\f(CW\*(C`next_cursor\*(C'\fR will be 0.
\&\s-1EOT\s0
.PP
.Vb 7
\&    path     => \*(Aqstatuses/followers/:id\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw/id user_id screen_name cursor include_entities/],
\&    booleans => [qw/include_entities/],
\&    required => [qw//],
\&    returns  => \*(AqHashRef|ArrayRef[User]\*(Aq,
\&);
.Ve
.PP
twitter_api_method show_user => (
    description => <<'',
Returns extended information of a given user, specified by \s-1ID\s0 or screen
name as per the required id parameter.  This information includes
design settings, so third party developers can theme their widgets
according to a given user's preferences. You must be properly
authenticated to request the page of a protected user.
.PP
.Vb 7
\&    path     => \*(Aqusers/show/:id\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw/id screen_name include_entities/],
\&    booleans => [qw/include_entities/],
\&    required => [qw/id/],
\&    returns  => \*(AqExtendedUser\*(Aq,
\&);
.Ve
.PP
twitter_api_method contributees => (
    path        => 'users/contributees',
    method      => '\s-1GET\s0',
    params      => [qw/user_id screen_name include_entities skip_satus/],
    required    => [],
    booleans    => [qw/include_entities skip_satus/],
    returns     => 'ArrayRef[User]',
    description => <<'',
Returns an array of users that the specified user can contribute to.
.PP
);
.PP
twitter_api_method contributors => (
    path        => 'users/contributors',
    method      => '\s-1GET\s0',
    params      => [qw/user_id screen_name include_entities skip_satus/],
    required    => [],
    booleans    => [qw/include_entities skip_satus/],
    returns     => 'ArrayRef[User]',
    description => <<'',
Returns an array of users who can contribute to the specified account.
.PP
);
.PP
twitter_api_method direct_messages => (
    description => <<'',
Returns a list of the 20 most recent direct messages sent to the authenticating
user including detailed information about the sending and recipient users.
.PP
.Vb 6
\&    path     => \*(Aqdirect_messages\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw/since_id max_id count page include_entities/],
\&    required => [qw/include_entities/],
\&    returns  => \*(AqArrayRef[DirectMessage]\*(Aq,
\&);
.Ve
.PP
twitter_api_method sent_direct_messages => (
    description => <<'',
Returns a list of the 20 most recent direct messages sent by the authenticating
user including detailed information about the sending and recipient users.
.PP
.Vb 7
\&    path     => \*(Aqdirect_messages/sent\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw/since_id max_id page count include_entities/],
\&    booleans => [qw/include_entities/],
\&    required => [qw//],
\&    returns  => \*(AqArrayRef[DirectMessage]\*(Aq,
\&);
.Ve
.PP
twitter_api_method new_direct_message => (
    description => <<'',
Sends a new direct message to the specified user from the authenticating user.
Requires both the user and text parameters.  Returns the sent message when
successful.  In order to support numeric screen names, the \f(CW\*(C`screen_name\*(C'\fR or
\&\f(CW\*(C`user_id\*(C'\fR parameters may be used instead of \f(CW\*(C`user\*(C'\fR.
.PP
.Vb 7
\&    path     => \*(Aqdirect_messages/new\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/user text screen_name user_id include_entities/],
\&    booleans => [qw/include_entities/],
\&    required => [qw/user text/],
\&    returns  => \*(AqDirectMessage\*(Aq,
\&);
.Ve
.PP
twitter_api_method destroy_direct_message => (
    description => <<'',
Destroys the direct message specified in the required \s-1ID\s0 parameter.
The authenticating user must be the recipient of the specified direct
message.
.PP
.Vb 7
\&    path     => \*(Aqdirect_messages/destroy/:id\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/id include_entities/],
\&    booleans => [qw/include_entities/],
\&    required => [qw/id/],
\&    returns  => \*(AqDirectMessage\*(Aq,
\&);
.Ve
.PP
twitter_api_method show_friendship => (
    description => <<'',
Returns detailed information about the relationship between two users.
.PP
.Vb 7
\&    aliases  => [qw/show_relationship/],
\&    path     => \*(Aqfriendships/show\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw/source_id source_screen_name target_id target_id_name/],
\&    required => [qw/id/],
\&    returns  => \*(AqRelationship\*(Aq,
\&);
.Ve
.PP
twitter_api_method create_friend => (
    description => <<'',
Befriends the user specified in the \s-1ID\s0 parameter as the authenticating user.
Returns the befriended user when successful.  Returns a string describing the
failure condition when unsuccessful.
.PP
.Vb 8
\&    aliases  => [qw/follow_new/],
\&    path     => \*(Aqfriendships/create/:id\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/id user_id screen_name follow include_entities/],
\&    booleans => [qw/include_entities follow/],
\&    required => [qw/id/],
\&    returns  => \*(AqBasicUser\*(Aq,
\&);
.Ve
.PP
twitter_api_method destroy_friend => (
    description => <<'',
Discontinues friendship with the user specified in the \s-1ID\s0 parameter as the
authenticating user.  Returns the un-friended user when successful.
Returns a string describing the failure condition when unsuccessful.
.PP
.Vb 8
\&    aliases  => [qw/unfollow/],
\&    path     => \*(Aqfriendships/destroy/:id\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/id user_id screen_name include_entities/],
\&    booleans => [qw/include_entities/],
\&    required => [qw/id/],
\&    returns  => \*(AqBasicUser\*(Aq,
\&);
.Ve
.PP
twitter_api_method friendship_exists => (
    aliases     => [qw/relationship_exists follows/], # Net::Twitter
    description => <<'\s-1EOT\s0',
Tests for the existence of friendship between two users. Will return true if
user_a follows user_b, otherwise will return false.
.PP
Use of \f(CW\*(C`user_a\*(C'\fR and \f(CW\*(C`user_b\*(C'\fR is deprecated.  It has been preserved for backwards
compatibility, and is used for the two-argument positional form:
.PP
.Vb 1
\&    $nt\->friendship_exists($user_a, $user_b);
.Ve
.PP
Instead, you should use one of the named argument forms:
.PP
.Vb 2
\&    $nt\->friendship_exists({ user_id_a => $id1, user_id_b => $id2 });
\&    $nt\->friendship_exists({ screen_name_a => $name1, screen_name_b => $name2 });
.Ve
.PP
Consider using \f(CW\*(C`show_friendship\*(C'\fR instead.
\&\s-1EOT\s0
.PP
.Vb 6
\&    path     => \*(Aqfriendships/exists\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw/user_id_a user_id_b screen_name_a screen_name_b user_a user_b/],
\&    required => [qw/user_a user_b/],
\&    returns  => \*(AqBool\*(Aq,
\&);
.Ve
.PP
twitter_api_method no_retweet_ids => (
    description => <<'',
Returns an \s-1ARRAY\s0 ref of user IDs for which the authenticating user does not
want to receive retweets.
.PP
.Vb 6
\&    path     => \*(Aqfriendships/no_retweet_ids\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [],
\&    required => [],
\&    returns  => \*(AqArrayRef[UserIDs]\*(Aq,
\&);
.Ve
.PP
twitter_api_method friends_ids => (
    description => <<'\s-1EOT\s0',
Returns a reference to an array of numeric IDs for every user followed by the
specified user. The order of the IDs is reverse chronological.
.PP
Use the optional \f(CW\*(C`cursor\*(C'\fR parameter to retrieve IDs in pages of 5000.  When
the \f(CW\*(C`cursor\*(C'\fR parameter is used, the return value is a reference to a hash with
keys \f(CW\*(C`previous_cursor\*(C'\fR, \f(CW\*(C`next_cursor\*(C'\fR, and \f(CW\*(C`ids\*(C'\fR.  The value of \f(CW\*(C`ids\*(C'\fR is a
reference to an array of \s-1IDS\s0 of the user's friends. Set the optional \f(CW\*(C`cursor\*(C'\fR
parameter to \-1 to get the first page of IDs.  Set it to the prior return's
value of \f(CW\*(C`previous_cursor\*(C'\fR or \f(CW\*(C`next_cursor\*(C'\fR to page forward or backwards.
When there are no prior pages, the value of \f(CW\*(C`previous_cursor\*(C'\fR will be 0.  When
there are no subsequent pages, the value of \f(CW\*(C`next_cursor\*(C'\fR will be 0.
\&\s-1EOT\s0
.PP
.Vb 7
\&    aliases  => [qw/following_ids/],
\&    path     => \*(Aqfriends/ids/:id\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw/id user_id screen_name cursor/],
\&    required => [qw/id/],
\&    returns  => \*(AqHashRef|ArrayRef[Int]\*(Aq,
\&);
.Ve
.PP
twitter_api_method followers_ids => (
    description => <<'\s-1EOT\s0',
Returns a reference to an array of numeric IDs for every user following the
specified user. The order of the IDs may change from call to call. To obtain
the screen names, pass the arrayref to \*(L"lookup_users\*(R".
.PP
Use the optional \f(CW\*(C`cursor\*(C'\fR parameter to retrieve IDs in pages of 5000.  When
the \f(CW\*(C`cursor\*(C'\fR parameter is used, the return value is a reference to a hash with
keys \f(CW\*(C`previous_cursor\*(C'\fR, \f(CW\*(C`next_cursor\*(C'\fR, and \f(CW\*(C`ids\*(C'\fR.  The value of \f(CW\*(C`ids\*(C'\fR is a
reference to an array of \s-1IDS\s0 of the user's followers. Set the optional \f(CW\*(C`cursor\*(C'\fR
parameter to \-1 to get the first page of IDs.  Set it to the prior return's
value of \f(CW\*(C`previous_cursor\*(C'\fR or \f(CW\*(C`next_cursor\*(C'\fR to page forward or backwards.
When there are no prior pages, the value of \f(CW\*(C`previous_cursor\*(C'\fR will be 0.  When
there are no subsequent pages, the value of \f(CW\*(C`next_cursor\*(C'\fR will be 0.
\&\s-1EOT\s0
.PP
.Vb 6
\&    path     => \*(Aqfollowers/ids/:id\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw/id user_id screen_name cursor/],
\&    required => [qw/id/],
\&    returns  => \*(AqHashRef|ArrayRef[Int]\*(Aq,
\&);
.Ve
.PP
twitter_api_method verify_credentials => (
    description => <<'',
Returns an \s-1HTTP\s0 200 \s-1OK\s0 response code and a representation of the
requesting user if authentication was successful; returns a 401 status
code and an error message if not.  Use this method to test if supplied
user credentials are valid.
.PP
.Vb 7
\&    path     => \*(Aqaccount/verify_credentials\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw/include_entities/],
\&    booleans => [qw/include_entities/],
\&    required => [qw//],
\&    returns  => \*(AqExtendedUser\*(Aq,
\&);
.Ve
.PP
twitter_api_method end_session => (
    description => <<'',
Ends the session of the authenticating user, returning a null cookie.
Use this method to sign users out of client-facing applications like
widgets.
.PP
.Vb 6
\&    path     => \*(Aqaccount/end_session\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw//],
\&    required => [qw//],
\&    returns  => \*(AqError\*(Aq, # HTTP Status: 200, error content. Silly!
\&);
.Ve
.PP
twitter_api_method update_location => (
    description => <<'',
This method has been deprecated in favor of the update_profile method.
Its \s-1URL\s0 will continue to work, but please consider migrating to the newer
and more comprehensive method of updating profile attributes.
.PP
.Vb 7
\&    deprecated  => 1,
\&    path     => \*(Aqaccount/update_location\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/location/],
\&    required => [qw/location/],
\&    returns  => \*(AqBasicUser\*(Aq,
\&);
.Ve
.PP
twitter_api_method update_delivery_device => (
    description => <<'',
Sets which device Twitter delivers updates to for the authenticating
user.  Sending none as the device parameter will disable \s-1IM\s0 or \s-1SMS\s0
updates.
.PP
.Vb 6
\&    path     => \*(Aqaccount/update_delivery_device\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/device/],
\&    required => [qw/device/],
\&    returns  => \*(AqBasicUser\*(Aq,
\&);
.Ve
.PP
twitter_api_method update_profile_colors => (
    description => <<'',
Sets one or more hex values that control the color scheme of the
authenticating user's profile page on twitter.com.  These values are
also returned in the /users/show \s-1API\s0 method.
.PP
.Vb 12
\&    path     => \*(Aqaccount/update_profile_colors\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/
\&        profile_background_color
\&        profile_text_color
\&        profile_link_color
\&        profile_sidebar_fill_color
\&        profile_sidebar_border_color
\&    /],
\&    required => [qw//],
\&    returns  => \*(AqExtendedUser\*(Aq,
\&);
.Ve
.PP
twitter_api_method update_profile_image => (
    description => <<'\s-1EOT\s0',
Updates the authenticating user's profile image.  The \f(CW\*(C`image\*(C'\fR parameter is an
arrayref with the following interpretation:
.PP
.Vb 4
\&  [ $file ]
\&  [ $file, $filename ]
\&  [ $file, $filename, Content_Type => $mime_type ]
\&  [ undef, $filename, Content_Type => $mime_type, Content => $raw_image_data ]
.Ve
.PP
The first value of the array (\f(CW$file\fR) is the name of a file to open.  The
second value (\f(CW$filename\fR) is the name given to Twitter for the file.  If
\&\f(CW$filename\fR is not provided, the basename portion of \f(CW$file\fR is used.  If
\&\f(CW$mime_type\fR is not provided, it will be provided automatically using
\&\fILWP::MediaTypes::guess_media_type()\fR.
.PP
\&\f(CW$raw_image_data\fR can be provided, rather than opening a file, by passing
\&\f(CW\*(C`undef\*(C'\fR as the first array value.
\&\s-1EOT\s0
.PP
.Vb 6
\&    path     => \*(Aqaccount/update_profile_image\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/image/],
\&    required => [qw/image/],
\&    returns  => \*(AqExtendedUser\*(Aq,
\&);
.Ve
.PP
twitter_api_method update_profile_background_image => (
    description => <<'',
Updates the authenticating user's profile background image. The \f(CW\*(C`image\*(C'\fR
parameter must be an arrayref with the same interpretation as the \f(CW\*(C`image\*(C'\fR
parameter in the \f(CW\*(C`update_profile_image\*(C'\fR method.  The \f(CW\*(C`use\*(C'\fR parameter allows
you to specify whether to use the  uploaded profile background or not. See
that method's documentation for details.
.PP
.Vb 7
\&    path     => \*(Aqaccount/update_profile_background_image\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/image use/],
\&    required => [qw/image/],
\&    booleans => [qw/use/],
\&    returns  => \*(AqExtendedUser\*(Aq,
\&);
.Ve
.PP
twitter_api_method rate_limit_status => (
    description => <<'\s-1EOT\s0',
Returns the remaining number of \s-1API\s0 requests available to the
authenticated user before the \s-1API\s0 limit is reached for the current hour.
.PP
Use \f(CW\*(C`\->rate_limit_status({ authenticate => 0 })\*(C'\fR to force an
unauthenticated call, which will return the status for the \s-1IP\s0 address rather
than the authenticated user. (Note: for a web application, this is the server's
\&\s-1IP\s0 address.)
\&\s-1EOT\s0
.PP
.Vb 6
\&    path     => \*(Aqaccount/rate_limit_status\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw//],
\&    required => [qw//],
\&    returns  => \*(AqRateLimitStatus\*(Aq,
\&);
.Ve
.PP
twitter_api_method update_profile => (
    description => <<'',
Sets values that users are able to set under the \*(L"Account\*(R" tab of their
settings page. Only the parameters specified will be updated; to only
update the \*(L"name\*(R" attribute, for example, only include that parameter
in your request.
.PP
.Vb 7
\&    path     => \*(Aqaccount/update_profile\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/ name email url location description include_entities/],
\&    booleans => [qw/include_entities/],
\&    required => [qw//],
\&    returns  => \*(AqExtendedUser\*(Aq,
\&);
.Ve
.PP
twitter_api_method favorites => (
    description => <<'',
Returns the 20 most recent favorite statuses for the authenticating
user or user specified by the \s-1ID\s0 parameter.
.PP
.Vb 7
\&    path     => \*(Aqfavorites/:id\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw/id page include_entities/],
\&    booleans => [qw/include_entities/],
\&    required => [qw//],
\&    returns  => \*(AqArrayRef[Status]\*(Aq,
\&);
.Ve
.PP
twitter_api_method create_favorite => (
    description => <<'',
Favorites the status specified in the \s-1ID\s0 parameter as the
authenticating user.  Returns the favorite status when successful.
.PP
.Vb 7
\&    path     => \*(Aqfavorites/create/:id\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/id include_entities/],
\&    booleans => [qw/include_entities/],
\&    required => [qw/id/],
\&    returns  => \*(AqStatus\*(Aq,
\&);
.Ve
.PP
twitter_api_method destroy_favorite => (
    description => <<'',
Un-favorites the status specified in the \s-1ID\s0 parameter as the
authenticating user.  Returns the un-favorited status.
.PP
.Vb 7
\&    path     => \*(Aqfavorites/destroy/:id\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/id include_entities/],
\&    booleans => [qw/include_entities/],
\&    required => [qw/id/],
\&    returns  => \*(AqStatus\*(Aq,
\&);
.Ve
.PP
twitter_api_method enable_notifications  => (
    description => <<'',
Enables notifications for updates from the specified user to the
authenticating user.  Returns the specified user when successful.
.PP
.Vb 7
\&    path     => \*(Aqnotifications/follow/:id\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/id screen_name include_entities/],
\&    booleans => [qw/include_entities/],
\&    required => [qw/id/],
\&    returns  => \*(AqBasicUser\*(Aq,
\&);
.Ve
.PP
twitter_api_method disable_notifications => (
    description => <<'',
Disables notifications for updates from the specified user to the
authenticating user.  Returns the specified user when successful.
.PP
.Vb 7
\&    path     => \*(Aqnotifications/leave/:id\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/id screen_name include_entities/],
\&    booleans => [qw/include_entities/],
\&    required => [qw/id/],
\&    returns  => \*(AqBasicUser\*(Aq,
\&);
.Ve
.PP
twitter_api_method create_block => (
    description => <<'',
Blocks the user specified in the \s-1ID\s0 parameter as the authenticating user.
Returns the blocked user when successful.  You can find out more about
blocking in the Twitter Support Knowledge Base.
.PP
.Vb 7
\&    path     => \*(Aqblocks/create/:id\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/id user_id screen_name include_entities/],
\&    booleans => [qw/include_entities/],    
\&    required => [qw/id/],
\&    returns  => \*(AqBasicUser\*(Aq,
\&);
.Ve
.PP
twitter_api_method destroy_block => (
    description => <<'',
Un-blocks the user specified in the \s-1ID\s0 parameter as the authenticating user.
Returns the un-blocked user when successful.
.PP
.Vb 7
\&    path     => \*(Aqblocks/destroy/:id\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/id user_id screen_name/],
\&    booleans => [qw/include_entities/],
\&    required => [qw/id/],
\&    returns  => \*(AqBasicUser\*(Aq,
\&);
.Ve
.PP
twitter_api_method block_exists => (
    description => <<'',
Returns if the authenticating user is blocking a target user. Will return the blocked user's
object if a block exists, and error with \s-1HTTP\s0 404 response code otherwise.
.PP
.Vb 7
\&    path     => \*(Aqblocks/exists/:id\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw/id user_id screen_name include_entities/],
\&    booleans => [qw/include_entities/],
\&    required => [qw/id/],
\&    returns  => \*(AqBasicUser\*(Aq,
\&);
.Ve
.PP
twitter_api_method blocking => (
    description => <<'',
Returns an array of user objects that the authenticating user is blocking.
.PP
.Vb 7
\&    path     => \*(Aqblocks/blocking\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw/page include_entities/],
\&    booleans => [qw/include_entities/],
\&    required => [qw//],
\&    returns  => \*(AqArrayRef[BasicUser]\*(Aq,
\&);
.Ve
.PP
twitter_api_method blocking_ids => (
    description => <<'',
Returns an array of numeric user ids the authenticating user is blocking.
.PP
.Vb 6
\&    path     => \*(Aqblocks/blocking/ids\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw//],
\&    required => [qw//],
\&    returns  => \*(AqArrayRef[Int]\*(Aq,
\&);
.Ve
.PP
twitter_api_method test => (
    description => <<'',
Returns the string \*(L"ok\*(R" status code.
.PP
.Vb 6
\&    path     => \*(Aqhelp/test\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw//],
\&    required => [qw//],
\&    returns  => \*(AqStr\*(Aq,
\&);
.Ve
.PP
twitter_api_method downtime_schedule => (
    description => <<'',
Returns the same text displayed on <http://twitter.com/home> when a
maintenance window is scheduled.
.PP
.Vb 7
\&    deprecated => 1,
\&    path     => \*(Aqhelp/downtime_schedule\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw//],
\&    required => [qw//],
\&    returns  => \*(AqStr\*(Aq,
\&);
.Ve
.PP
twitter_api_method get_configuration => (
    path        => 'help/configuration',
    method      => '\s-1GET\s0',
    params      => [],
    required    => [],
    returns     => 'HashRef',
    description => <<'\s-1EOT\s0',
Returns the current configuration used by Twitter including twitter.com slugs
which are not usernames, maximum photo resolutions, and t.co \s-1URL\s0 lengths.
.PP
It is recommended applications request this endpoint when they are loaded, but
no more than once a day.
\&\s-1EOT\s0
.PP
);
.PP
twitter_api_method get_languages => (
    path        => 'help/languages',
    method      => '\s-1GET\s0',
    params      => [],
    required    => [],
    returns     => 'ArrayRef[Lanugage]',
    description => <<'',
Returns the list of languages supported by Twitter along with their \s-1ISO\s0 639\-1
code. The \s-1ISO\s0 639\-1 code is the two letter value to use if you include lang
with any of your requests.
.PP
);
.PP
twitter_api_method saved_searches => (
    description => <<'',
Returns the authenticated user's saved search queries.
.PP
.Vb 6
\&    path     => \*(Aqsaved_searches\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [],
\&    required => [],
\&    returns  => \*(AqArrayRef[SavedSearch]\*(Aq,
\&);
.Ve
.PP
twitter_api_method show_saved_search => (
    description => <<'',
Retrieve the data for a saved search, by \f(CW\*(C`id\*(C'\fR, owned by the authenticating user.
.PP
.Vb 6
\&    path     => \*(Aqsaved_searches/show/:id\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw/id/],
\&    required => [qw/id/],
\&    returns  => \*(AqSavedSearch\*(Aq,
\&);
.Ve
.PP
twitter_api_method create_saved_search => (
    description => <<'',
Creates a saved search for the authenticated user.
.PP
.Vb 6
\&    path     => \*(Aqsaved_searches/create\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/query/],
\&    required => [qw/query/],
\&    returns  => \*(AqSavedSearch\*(Aq,
\&);
.Ve
.PP
twitter_api_method destroy_saved_search => (
    description => <<'',
Destroys a saved search. The search, specified by \f(CW\*(C`id\*(C'\fR, must be owned
by the authenticating user.
.PP
.Vb 6
\&    path     => \*(Aqsaved_searches/destroy/:id\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/id/],
\&    required => [qw/id/],
\&    returns  => \*(AqSavedSearch\*(Aq,
\&);
.Ve
.PP
twitter_api_method report_spam => (
    description => <<'',
The user specified in the id is blocked by the authenticated user and reported as a spammer.
.PP
.Vb 7
\&    path     => \*(Aqreport_spam\*(Aq,
\&    method   => \*(AqPOST\*(Aq,
\&    params   => [qw/id user_id screen_name include_entities/],
\&    booleans => [qw/include_entities/],
\&    required => [qw/id/],
\&    returns  => \*(AqUser\*(Aq,
\&);
.Ve
.PP
twitter_api_method users_search => (
    aliases     => [qw/find_people search_users/],
    path        => 'users/search',
    method      => '\s-1GET\s0',
    params      => [qw/q per_page page include_entities/],
    booleans    => [qw/include_entities/],
    required    => [qw/q/],
    returns     => 'ArrayRef[Users]',
    description => <<'',
Run a search for users similar to Find People button on Twitter.com; the same
results returned by people search on Twitter.com will be returned by using this
\&\s-1API\s0 (about being listed in the People Search).  It is only possible to retrieve
the first 1000 matches from this \s-1API\s0.
.PP
);
.PP
twitter_api_method trends_available => (
    path        => 'trends/available',
    method      => '\s-1GET\s0',
    params      => [qw/lat long/],
    required    => [],
    authenticate => 0,
    returns     => 'ArrayRef[Location]',
    description => <<\s-1EOT\s0,
Returns the locations with trending topic information. The response is an
array of \*(L"locations\*(R" that encode the location's \s-1WOEID\s0 (a Yahoo!  Where On Earth
\&\s-1ID\s0 <http://developer.yahoo.com/geo/geoplanet/>) and some other human-readable
information such as a the location's canonical name and country.
.PP
When the optional \f(CW\*(C`lat\*(C'\fR and \f(CW\*(C`long\*(C'\fR parameters are passed, the available trend
locations are sorted by distance from that location, nearest to farthest.
.PP
Use the \s-1WOEID\s0 returned in the location object to query trends for a specific
location.
\&\s-1EOT\s0
);
.PP
twitter_api_method trends_location => (
    path        => 'trends/:woeid',
    method      => '\s-1GET\s0',
    params      => [qw/woeid/],
    required    => [qw/woeid/],
    returns     => 'ArrayRef[Trend]',
    authenticate => 0,
    description => <<'',
Returns the top 10 trending topics for a specific location. The response is an
array of \*(L"trend\*(R" objects that encode the name of the trending topic, the query
parameter that can be used to search for the topic on Search, and the direct
\&\s-1URL\s0 that can be issued against Search.  This information is cached for five
minutes, and therefore users are discouraged from querying these endpoints
faster than once every five minutes.  Global trends information is also
available from this \s-1API\s0 by using a \s-1WOEID\s0 of 1.
.PP
);
.PP
twitter_api_method trends => (
    description => <<'',
Returns the top ten queries that are currently trending on Twitter.  The
response includes the time of the request, the name of each trending topic, and
the url to the Twitter Search results page for that topic.
.PP
.Vb 8
\&    path     => \*(Aqtrends\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw//],
\&    required => [qw//],
\&    authenticate => 0,
\&    returns  => \*(AqArrayRef[Query]\*(Aq,
\&    deprecated => 1,
\&);
.Ve
.PP
my \f(CW$trends_deprecation_warned\fR = 0;
around trends => sub {
    my \f(CW$orig\fR = shift;
    my \f(CW$self\fR = shift;
.PP
.Vb 1
\&    my $args = ref $_[\-1] eq ref {} ? pop : {};
\&
\&    $trends_deprecation_warned ||= do {
\&        local $Carp::CarpLevel = 3;
\&        carp "The \*(Aqtrends\*(Aq API method has been deprecated; instead, use trends_location({ woeid => 1 })";
\&        1;
\&    };
\&
\&    $args\->{woeid} = 1;
\&
\&    return $self\->trends_location(@_, $args);
\&};
.Ve
.PP
twitter_api_method trends_current => (
    description => <<'',
Returns the current top ten trending topics on Twitter.  The response includes
the time of the request, the name of each trending topic, and query used on
Twitter Search results page for that topic.
.PP
.Vb 7
\&    path     => \*(Aqtrends/current\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw/exclude/],
\&    required => [qw//],
\&    authenticate => 0,
\&    returns  => \*(AqHashRef\*(Aq,
\&);
.Ve
.PP
twitter_api_method trends_daily => (
    description => <<'',
Returns the top 20 trending topics for each hour in a given day.
.PP
.Vb 7
\&    path     => \*(Aqtrends/daily\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw/date exclude/],
\&    required => [qw//],
\&    authenticate => 0,
\&    returns  => \*(AqHashRef\*(Aq,
\&);
.Ve
.PP
twitter_api_method trends_weekly => (
    description => <<'',
Returns the top 30 trending topics for each day in a given week.
.PP
.Vb 7
\&    path     => \*(Aqtrends/weekly\*(Aq,
\&    method   => \*(AqGET\*(Aq,
\&    params   => [qw/date exclude/],
\&    required => [qw//],
\&    authenticate => 0,
\&    returns  => \*(AqHashRef\*(Aq,
\&);
.Ve
.PP
twitter_api_method reverse_geocode => (
    path        => 'geo/reverse_geocode',
    method      => '\s-1GET\s0',
    params      => [qw/lat long accuracy granularity max_results/],
    required    => [qw/lat long/],
    returns     => 'HashRef',
    description => <<'\s-1EOT\s0',
.PP
Search for places (cities and neighborhoods) that can be attached to a
statuses/update.  Given a latitude and a longitude, return a list of all the
valid places that can be used as a place_id when updating a status.
Conceptually, a query can be made from the user's location, retrieve a list of
places, have the user validate the location he or she is at, and then send the
\&\s-1ID\s0 of this location up with a call to statuses/update.
.PP
There are multiple granularities of places that can be returned \*(--
\&\*(L"neighborhoods\*(R", \*(L"cities\*(R", etc.  At this time, only United States data is
available through this method.
.IP "lat" 4
.IX Item "lat"
Required.  The latitude to query about.  Valid ranges are \-90.0 to +90.0 (North
is positive) inclusive.
.IP "long" 4
.IX Item "long"
Required. The longitude to query about.  Valid ranges are \-180.0 to +180.0
(East is positive) inclusive.
.IP "accuracy" 4
.IX Item "accuracy"
Optional. A hint on the \*(L"region\*(R" in which to search.  If a number, then this is
a radius in meters, but it can also take a string that is suffixed with ft to
specify feet.  If this is not passed in, then it is assumed to be 0m.  If
coming from a device, in practice, this value is whatever accuracy the device
has measuring its location (whether it be coming from a \s-1GPS\s0, WiFi
triangulation, etc.).
.IP "granularity" 4
.IX Item "granularity"
Optional.  The minimal granularity of data to return.  If this is not passed
in, then \f(CW\*(C`neighborhood\*(C'\fR is assumed.  \f(CW\*(C`city\*(C'\fR can also be passed.
.IP "max_results" 4
.IX Item "max_results"
Optional.  A hint as to the number of results to return.  This does not
guarantee that the number of results returned will equal max_results, but
instead informs how many \*(L"nearby\*(R" results to return.  Ideally, only pass in the
number of places you intend to display to the user here.
.PP
\&\s-1EOT\s0
);
.PP
twitter_api_method geo_id => (
    path => 'geo/id/:id',
    method => '\s-1GET\s0',
    params => [qw/id/],
    required => [qw/id/],
    returns  => 'HashRef',
    description => <<'\s-1EOT\s0',
Returns details of a place returned from the \f(CW\*(C`reverse_geocode\*(C'\fR method.
\&\s-1EOT\s0
);
.PP
twitter_api_method geo_search => (
    path        => 'geo/search',
    method      => '\s-1GET\s0',
    params      => [qw/
        lat long query ip granularity accuracy max_results
        contained_within attribute:street_address callback
    /],
    required    => [],
    returns     => 'HashRef',
    description => <<'\s-1EOT\s0',
Search for places that can be attached to a statuses/update. Given a latitude
and a longitude pair, an \s-1IP\s0 address, or a name, this request will return a list
of all the valid places that can be used as the place_id when updating a
status.
.PP
Conceptually, a query can be made from the user's location, retrieve a list of
places, have the user validate the location he or she is at, and then send the
\&\s-1ID\s0 of this location with a call to statuses/update.
.PP
This is the recommended method to use find places that can be attached to
statuses/update. Unlike geo/reverse_geocode which provides raw data access,
this endpoint can potentially re-order places with regards to the user who
is authenticated. This approach is also preferred for interactive place
matching with the user.
\&\s-1EOT\s0
.PP
);
.PP
twitter_api_method similar_places => (
    path        => 'geo/similar_places',
    method      => '\s-1GET\s0',
    params      => [qw/lat long name contained_within attribute:street_address callback/],
    required    => [qw/lat long name/],
    returns     => 'HashRef',
    description => <<'\s-1EOT\s0',
Locates places near the given coordinates which are similar in name.
.PP
Conceptually you would use this method to get a list of known places to choose
from first. Then, if the desired place doesn't exist, make a request to
\&\f(CW\*(C`add_place\*(C'\fR to create a new one.
.PP
The token contained in the response is the token needed to be able to create a
new place.
\&\s-1EOT\s0
.PP
);
.PP
twitter_api_method add_place => (
    path        => 'geo/place',
    method      => '\s-1POST\s0',
    params      => [qw/name contained_within token lat long attribute:street_address callback/],
    required    => [qw/name contained_within token lat long/],
    returns     => 'Place',
    description => <<'\s-1EOT\s0',
Creates a new place object at the given latitude and longitude.
.PP
Before creating a place you need to query \f(CW\*(C`similar_places\*(C'\fR with the latitude,
longitude and name of the place you wish to create. The query will return an
array of places which are similar to the one you wish to create, and a token.
If the place you wish to create isn't in the returned array you can use the
token with this method to create a new one.
\&\s-1EOT\s0
.PP
);
.PP
twitter_api_method lookup_users => (
    path => 'users/lookup',
    method => '\s-1GET\s0',
    params => [qw/user_id screen_name include_entities/],
    booleans => [qw/include_entities/],
    required => [],
    returns => 'ArrayRef[User]',
    description => <<'\s-1EOT\s0'
Return up to 100 users worth of extended information, specified by either \s-1ID\s0,
screen name, or combination of the two. The author's most recent status (if the
authenticating user has permission) will be returned inline.  This method is
rate limited to 1000 calls per hour.
.PP
This method will accept user IDs or screen names as either a comma delimited
string, or as an \s-1ARRAY\s0 ref.  It will also accept arguments in the normal
\&\s-1HASHREF\s0 form or as a simple list of named arguments.  I.e., any of the
following forms are acceptable:
.PP
.Vb 5
\&    $nt\->lookup_users({ user_id => \*(Aq1234,6543,3333\*(Aq });
\&    $nt\->lookup_users(user_id => \*(Aq1234,6543,3333\*(Aq);
\&    $nt\->lookup_users({ user_id => [ 1234, 6543, 3333 ] });
\&    $nt\->lookup_users({ screen_name => \*(Aqfred,barney,wilma\*(Aq });
\&    $nt\->lookup_users(screen_name => [\*(Aqfred\*(Aq, \*(Aqbarney\*(Aq, \*(Aqwilma\*(Aq]);
\&
\&    $nt\->lookup_users(
\&        screen_name => [\*(Aqfred\*(Aq, \*(Aqbarney\*(Aq ],
\&        user_id     => \*(Aq4321,6789\*(Aq,
\&    );
.Ve
.PP
\&\s-1EOT\s0
);
.PP
twitter_api_method retweeted_by => (
    path => 'statuses/:id/retweeted_by',
    method => '\s-1GET\s0',
    params => [qw/id count page trim_user include_entities/],
    booleans => [qw/include_entities trim_user/],
    required => [qw/id/],
    returns  => 'ArrayRef[User]',
    description => <<''
Returns up to 100 users who retweeted the status identified by \f(CW\*(C`id\*(C'\fR.
.PP
);
.PP
twitter_api_method retweeted_by_ids => (
    path     => 'statuses/:id/retweeted_by/ids',
    method   => '\s-1GET\s0',
    params   => [qw/id count page trim_user include_entities/],
    booleans => [qw/include_entities trim_user/],
    required => [qw/id/],
    returns  => 'ArrayRef[User]',
    description => <<''
Returns the IDs of up to 100 users who retweeted the status identified by \f(CW\*(C`id\*(C'\fR.
.PP
);
.PP
twitter_api_method friendships_incoming => (
    path => 'friendships/incoming',
    method => '\s-1GET\s0',
    params => [qw/cursor/],
    required => [qw/cursor/],
    returns  => 'HashRef',
    description => <<'',
Returns an \s-1HASH\s0 ref with an array of numeric IDs in the \f(CW\*(C`ids\*(C'\fR element for
every user who has a pending request to follow the authenticating user.
.PP
);
.PP
twitter_api_method friendships_outgoing => (
    path => 'friendships/outgoing',
    method => '\s-1GET\s0',
    params => [qw/cursor/],
    required => [qw/cursor/],
    returns  => 'HashRef',
    description => <<'',
Returns an \s-1HASH\s0 ref with an array of numeric IDs in the \f(CW\*(C`ids\*(C'\fR element for
every protected user for whom the authenticating user has a pending follow
request.
.PP
);
.PP
# new in 3.17001 2010\-10\-19
.PP
twitter_api_method account_totals => (
    path        => 'account/totals',
    method      => '\s-1GET\s0',
    params      => [],
    required    => [],
    returns     => 'HashRef',
    description => <<''
Returns the current count of friends, followers, updates (statuses)
and favorites of the authenticating user.
.PP
);
.PP
twitter_api_method account_settings => (
    path => 'account/settings',
    method      => '\s-1GET\s0',
    params      => [],
    required    => [],
    returns     => 'HashRef',
    description => <<''
Returns the current trend, geo and sleep time information for the
authenticating user.
.PP
);
.PP
twitter_api_method suggestion_categories => (
    path        => 'users/suggestions',
    method      => '\s-1GET\s0',
    params      => [],
    required    => [],
    returns     => 'ArrayRef',
    description => <<''
Returns the list of suggested user categories. The category slug can be used in
the \f(CW\*(C`user_suggestions\*(C'\fR \s-1API\s0 method get the users in that category .  Does not
require authentication.
.PP
);
.PP
twitter_api_method user_suggestions => (
    aliases     => [qw/follow_suggestions/],
    path        => 'users/suggestions/:category/members',
    method      => '\s-1GET\s0',
    params      => [qw/category lang/],
    required    => [qw/category/],
    returns     => 'ArrayRef',
    description => <<''
Access the users in a given category of the Twitter suggested user list and
return their most recent status if they are not a protected user. Currently
supported values for optional parameter \f(CW\*(C`lang\*(C'\fR are \f(CW\*(C`en\*(C'\fR, \f(CW\*(C`fr\*(C'\fR, \f(CW\*(C`de\*(C'\fR, \f(CW\*(C`es\*(C'\fR,
\&\f(CW\*(C`it\*(C'\fR.  Does not require authentication.
.PP
);
.PP
twitter_api_method show_direct_message => (
    path => 'direct_messages/show/:id',
    method      => '\s-1GET\s0',
    params      => [qw/id include_entities/],
    booleans => [qw/include_entities/],
    required    => [qw/id/],
    returns     => 'HashRef',
    description => <<''
Returns a single direct message, specified by an id parameter. Like
the \f(CW\*(C`direct_messages\*(C'\fR request, this method will include the
user objects of the sender and recipient.  Requires authentication.
.PP
);
.PP
twitter_api_method retweeted_to_user => (
    path => 'statuses/retweeted_to_user',
    method      => '\s-1GET\s0',
    params      => [qw/id user_id screen_name/],
    required    => [qw/id/],
    returns     => 'ArrayRef',
    description => <<''
Returns the 20 most recent retweets posted by users the specified user
follows. The user is specified using the user_id or screen_name
parameters. This method is identical to \f(CW\*(C`retweeted_to_me\*(C'\fR
except you can choose the user to view.
Does not require authentication, unless the user is protected.
.PP
);
.PP
twitter_api_method retweeted_by_user => (
    path        => 'statuses/retweeted_by_user',
    method      => '\s-1GET\s0',
    params      => [qw/id user_id screen_name/],
    required    => [qw/id/],
    returns     => 'ArrayRef',
    description => <<''
Returns the 20 most recent retweets posted by the specified user. The user is
specified using the user_id or screen_name parameters. This method is identical
to \f(CW\*(C`retweeted_by_me\*(C'\fR except you can choose the user to view.  Does not require
authentication, unless the user is protected.
.PP
);
.PP
twitter_api_method lookup_friendships => (
    path        => 'friendships/lookup',
    method      => '\s-1GET\s0',
    params      => [qw/user_id screen_name/],
    required    => [],
    returns     => 'ArrayRef',
    description => <<''
Returns the relationship of the authenticating user to the comma separated list
or \s-1ARRAY\s0 ref of up to 100 screen_names or user_ids provided. Values for
connections can be: following, following_requested, followed_by, none.
Requires authentication.
.PP
);
.PP
twitter_api_method update_friendship => (
    path        => 'friendships/update',
    method      => '\s-1POST\s0',
    params      => [qw/id user_id screen_name device retweets/],
    required    => [qw/id/],
    booleans    => [qw/device retweets/],
    returns     => 'HashRef',
    description => <<''
Allows you enable or disable retweets and device notifications from the
specified user. All other values are assumed to be false.  Requires
authentication.
.PP
);
.PP
twitter_api_method related_results => (
    path        => 'related_results/show/:id',
    method      => '\s-1GET\s0',
    params      => [qw/id/],
    required    => [qw/id/],
    returns     => 'ArrayRef[Status]',
    description => <<''
If available, returns an array of replies and mentions related to the specified
status. There is no guarantee there will be any replies or mentions in the
response. This method is only available to users who have access to
#newtwitter.  Requires authentication.
.PP
);
.PP
### Lists ###
.PP
twitter_api_method all_subscriptions => (
    path        => 'lists/all',
    method      => '\s-1GET\s0',
    params      => [qw/user_id screen_name count cursor/],
    required    => [],
    returns     => 'ArrayRef[List]',
    aliases     => [qw/all_lists list_subscriptions/],
    description => <<'',
Returns all lists the authenticating or specified user subscribes to, including
their own. The user is specified using the user_id or screen_name parameters.
If no user is given, the authenticating user is used.
.PP
);
.PP
twitter_api_method list_statuses => (
    path        => 'lists/statuses',
    method      => '\s-1GET\s0',
    params      => [qw/
        list_id slug owner_screen_name owner_id since_id max_id per_page page
        include_entities include_rts
    /],
    required    => [],
    booleans    => [qw/include_entities include_rts/],
    returns     => 'ArrayRef[Status]',
    description => <<'',
Returns tweet timeline for members of the specified list. Historically,
retweets were not available in list timeline responses but you can now use the
include_rts=true parameter to additionally receive retweet objects.
.PP
);
.PP
twitter_api_method delete_list_member => (
    path        => 'lists/members/destroy',
    method      => '\s-1POST\s0',
    params      => [qw/list_id slug user_id screen_name owner_screen_name owner_id/],
    required    => [],
    returns     => 'User',
    aliases     => [qw/remove_list_member/],
    description => <<'',
Removes the specified member from the list. The authenticated user must be the
list's owner to remove members from the list.
.PP
);
.PP
twitter_api_method list_memberships => (
    path        => 'lists/memberships',
    method      => '\s-1GET\s0',
    params      => [qw/user_id screen_name cursor filter_to_owned_lists/],
    required    => [],
    booleans    => [qw/filter_to_owned_lists/],
    returns     => 'Hashref',
    description => <<'',
Returns the lists the specified user has been added to. If user_id or
screen_name are not provided the memberships for the authenticating user are
returned.
.PP
);
.PP
twitter_api_method list_subscribers => (
    path        => 'lists/subscribers',
    method      => '\s-1GET\s0',
    params      => [qw/list_id slug owner_screen_name owner_id cursor include_entities skip_status/],
    required    => [],
    booleans    => [qw/include_entities skip_status/],
    returns     => 'Hashref',
    description => <<'',
Returns the subscribers of the specified list. Private list subscribers will
only be shown if the authenticated user owns the specified list.
.PP
);
.PP
twitter_api_method subscribe_list => (
    path        => 'lists/subscribers/create',
    method      => '\s-1POST\s0',
    params      => [qw/owner_screen_name owner_id list_id slug/],
    required    => [],
    returns     => 'List',
    description => <<'',
Subscribes the authenticated user to the specified list.
.PP
);
.PP
twitter_api_method is_list_subscriber => (
    path        => 'lists/subscribers/show',
    method      => '\s-1GET\s0',
    params      => [qw/
        owner_screen_name owner_id list_id slug user_id screen_name
        include_entities skip_status
    /],
    required    => [],
    booleans    => [qw/include_entities skip_status/],
    returns     => 'Maybe[User]',
    aliases     => [qw/is_subscribed_list/],
    description => <<'',
Check if the specified user is a subscriber of the specified list. Returns the
user or undef.
.PP
);
.PP
around [qw/is_list_subscriber is_subscribed_list/] => sub {
    my \f(CW$orig\fR = shift;
    my \f(CW$self\fR = shift;
.PP
.Vb 2
\&    $self\->_user_or_undef($orig, \*(Aqsubscriber\*(Aq, @_);
\&};
.Ve
.PP
twitter_api_method unsubscribe_list => (
    path        => 'lists/subscribers/destroy',
    method      => '\s-1POST\s0',
    params      => [qw/list_id slug owner_screen_name owner_id/],
    required    => [],
    returns     => 'List',
    description => <<'',
Unsubscribes the authenticated user from the specified list.
.PP
);
.PP
twitter_api_method members_create_all => (
    path        => 'lists/members/create_all',
    method      => '\s-1POST\s0',
    params      => [qw/list_id slug owner_screen_name owner_id/],
    required    => [],
    returns     => 'List',
    aliases     => [qw/add_list_members/],
    description => <<'',
Adds multiple members to a list, by specifying a reference to an array or a
comma-separated list of member ids or screen names. The authenticated user must
own the list to be able to add members to it. Note that lists can't have more
than 500 members, and you are limited to adding up to 100 members to a list at
a time with this method.
.PP
);
.PP
twitter_api_method members_destroy_all => (
    path        => 'lists/members/destroy_all',
    method      => '\s-1POST\s0',
    params      => [qw/list_id slug user_id screen_name owner_screen_name owner_id/],
    required    => [],
    returns     => 'List',
    aliases     => [qw/remove_list_members/],
    description => <<'\s-1EOT\s0',
Removes multiple members from a list, by specifying a reference to an array of
member ids or screen names, or a string of comma separated user ids or screen
names.  The authenticated user must own the list to be able to remove members
from it. Note that lists can't have more than 500 members, and you are limited
to removing up to 100 members to a list at a time with this method.
.PP
Please note that there can be issues with lists that rapidly remove and add
memberships. Take care when using these methods such that you are not too
rapidly switching between removals and adds on the same list.
.PP
\&\s-1EOT\s0
);
.PP
twitter_api_method is_list_member => (
    path        => 'lists/members/show',
    method      => '\s-1GET\s0',
    params      => [qw/
        owner_screen_name owner_id list_id slug user_id screen_name
        include_entities skip_status
    /],
    required    => [],
    booleans    => [qw/include_entities skip_status/],
    returns     => 'Maybe[User]',
    description => <<'',
Check if the specified user is a member of the specified list. Returns the user or undef.
.PP
);
.PP
around is_list_member => sub {
    my \f(CW$orig\fR = shift;
    my \f(CW$self\fR = shift;
.PP
.Vb 2
\&    $self\->_user_or_undef($orig, \*(Aqmember\*(Aq, @_);
\&};
.Ve
.PP
twitter_api_method list_members => (
    path        => 'lists/members',
    method      => '\s-1GET\s0',
    params      => [qw/
        list_id slug owner_screen_name owner_id cursor
        include_entities skip_status
    /],
    required    => [],
    booleans    => [qw/include_entities skip_status/],
    returns     => 'Hashref',
    description => <<'',
Returns the members of the specified list. Private list members will only be
shown if the authenticated user owns the specified list.
.PP
);
.PP
twitter_api_method add_list_member => (
    path        => 'lists/members/create',
    method      => '\s-1POST\s0',
    params      => [qw/list_id slug user_id screen_name owner_screen_name owner_id/],
    required    => [],
    returns     => 'User',
    description => <<'',
Add a member to a list. The authenticated user must own the list to be able to
add members to it. Note that lists can't have more than 500 members.
.PP
);
.PP
twitter_api_method delete_list => (
    path        => 'lists/destroy',
    method      => '\s-1POST\s0',
    params      => [qw/owner_screen_name owner_id list_id slug/],
    required    => [],
    returns     => 'List',
    description => <<'',
Deletes the specified list. The authenticated user must own the list to be able
to destroy it.
.PP
);
.PP
twitter_api_method update_list => (
    path        => 'lists/update',
    method      => '\s-1POST\s0',
    params      => [qw/list_id slug name mode description owner_screen_name owner_id/],
    required    => [],
    returns     => 'List',
    description => <<'',
Updates the specified list. The authenticated user must own the list to be able
to update it.
.PP
);
.PP
twitter_api_method create_list => (
    path        => 'lists/create',
    method      => '\s-1POST\s0',
    params      => [qw/list_id slug name mode description owner_screen_name owner_id/],
    required    => [],
    returns     => 'List',
    description => <<'',
Creates a new list for the authenticated user. Note that you can't create more
than 20 lists per account.
.PP
);
.PP
twitter_api_method get_lists => (
    path        => 'lists',
    method      => '\s-1GET\s0',
    params      => [qw/user_id screen_name cursor/],
    required    => [],
    returns     => 'Hashref',
    aliases     => [qw/list_lists/],
    description => <<'',
Returns the lists of the specified (or authenticated) user. Private lists will
be included if the authenticated user is the same as the user whose lists are
being returned.
.PP
);
.PP
twitter_api_method get_list => (
    path        => 'lists/show',
    method      => '\s-1GET\s0',
    params      => [qw/list_id slug owner_screen_name owner_id/],
    required    => [],
    returns     => 'List',
    description => <<'',
Returns the specified list. Private lists will only be shown if the
authenticated user owns the specified list.
.PP
);
.PP
twitter_api_method subscriptions => (
    path        => 'lists/subscriptions',
    method      => '\s-1GET\s0',
    params      => [qw/user_id screen_name count cursor/],
    required    => [],
    returns     => 'ArrayRef[List]',
    aliases     => [],
    description => <<'',
Obtain a collection of the lists the specified user is subscribed to, 20 lists
per page by default. Does not include the user's own lists.
.PP
);
.PP
### Legal ###
.PP
twitter_api_method get_privacy_policy => (
    path        => 'legal/privacy',
    method      => '\s-1GET\s0',
    params      => [],
    required    => [],
    returns     => 'HashRef',
    description => <<'',
Returns Twitter's privacy policy.
.PP
);
.PP
twitter_api_method get_tos => (
    path        => 'legal/tos',
    method      => '\s-1GET\s0',
    params      => [],
    required    => [],
    returns     => 'HashRef',
    description => <<'',
Returns the Twitter Terms of Service. These are not the same as the Developer
Rules of the Road.
.PP
);
.PP
1;
.PP
_\|_END_\|_
.SH "NAME"
Net::Twitter::Role::API::REST \- A definition of the Twitter REST API as a Moose role
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  package My::Twitter;
\&  use Moose;
\&  with \*(AqNet::Twitter::API::REST\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBNet::Twitter::Role::API::REST\fR provides definitions for all the Twitter \s-1REST\s0 \s-1API\s0
methods.  Applying this role to any class provides methods for all of the
Twitter \s-1REST\s0 \s-1API\s0 methods.
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Mims <marc@questright.com>
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 2009 Marc Mims
.PP
The Twitter \s-1API\s0 itself, and the description text used in this module is:
.PP
Copyright (c) 2009 Twitter
.PP
This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
\&\s-1BECAUSE\s0 \s-1THIS\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1LICENSED\s0 \s-1FREE\s0 \s-1OF\s0 \s-1CHARGE\s0, \s-1THERE\s0 \s-1IS\s0 \s-1NO\s0 \s-1WARRANTY\s0
\&\s-1FOR\s0 \s-1THE\s0 \s-1SOFTWARE\s0, \s-1TO\s0 \s-1THE\s0 \s-1EXTENT\s0 \s-1PERMITTED\s0 \s-1BY\s0 \s-1APPLICABLE\s0 \s-1LAW\s0. \s-1EXCEPT\s0 \s-1WHEN\s0
\&\s-1OTHERWISE\s0 \s-1STATED\s0 \s-1IN\s0 \s-1WRITING\s0 \s-1THE\s0 \s-1COPYRIGHT\s0 \s-1HOLDERS\s0 \s-1AND/OR\s0 \s-1OTHER\s0 \s-1PARTIES\s0
\&\s-1PROVIDE\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \*(L"\s-1AS\s0 \s-1IS\s0\*(R" \s-1WITHOUT\s0 \s-1WARRANTY\s0 \s-1OF\s0 \s-1ANY\s0 \s-1KIND\s0, \s-1EITHER\s0
\&\s-1EXPRESSED\s0 \s-1OR\s0 \s-1IMPLIED\s0, \s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1THE\s0 \s-1IMPLIED\s0
\&\s-1WARRANTIES\s0 \s-1OF\s0 \s-1MERCHANTABILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0. \s-1THE\s0
\&\s-1ENTIRE\s0 \s-1RISK\s0 \s-1AS\s0 \s-1TO\s0 \s-1THE\s0 \s-1QUALITY\s0 \s-1AND\s0 \s-1PERFORMANCE\s0 \s-1OF\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1WITH\s0
\&\s-1YOU\s0. \s-1SHOULD\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1PROVE\s0 \s-1DEFECTIVE\s0, \s-1YOU\s0 \s-1ASSUME\s0 \s-1THE\s0 \s-1COST\s0 \s-1OF\s0 \s-1ALL\s0
\&\s-1NECESSARY\s0 \s-1SERVICING\s0, \s-1REPAIR\s0, \s-1OR\s0 \s-1CORRECTION\s0.
.PP
\&\s-1IN\s0 \s-1NO\s0 \s-1EVENT\s0 \s-1UNLESS\s0 \s-1REQUIRED\s0 \s-1BY\s0 \s-1APPLICABLE\s0 \s-1LAW\s0 \s-1OR\s0 \s-1AGREED\s0 \s-1TO\s0 \s-1IN\s0 \s-1WRITING\s0
\&\s-1WILL\s0 \s-1ANY\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0, \s-1OR\s0 \s-1ANY\s0 \s-1OTHER\s0 \s-1PARTY\s0 \s-1WHO\s0 \s-1MAY\s0 \s-1MODIFY\s0 \s-1AND/OR\s0
\&\s-1REDISTRIBUTE\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1AS\s0 \s-1PERMITTED\s0 \s-1BY\s0 \s-1THE\s0 \s-1ABOVE\s0 \s-1LICENSE\s0, \s-1BE\s0
\&\s-1LIABLE\s0 \s-1TO\s0 \s-1YOU\s0 \s-1FOR\s0 \s-1DAMAGES\s0, \s-1INCLUDING\s0 \s-1ANY\s0 \s-1GENERAL\s0, \s-1SPECIAL\s0, \s-1INCIDENTAL\s0,
\&\s-1OR\s0 \s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 \s-1ARISING\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0 \s-1USE\s0 \s-1OR\s0 \s-1INABILITY\s0 \s-1TO\s0 \s-1USE\s0
\&\s-1THE\s0 \s-1SOFTWARE\s0 (\s-1INCLUDING\s0 \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0 \s-1LOSS\s0 \s-1OF\s0 \s-1DATA\s0 \s-1OR\s0 \s-1DATA\s0 \s-1BEING\s0
\&\s-1RENDERED\s0 \s-1INACCURATE\s0 \s-1OR\s0 \s-1LOSSES\s0 \s-1SUSTAINED\s0 \s-1BY\s0 \s-1YOU\s0 \s-1OR\s0 \s-1THIRD\s0 \s-1PARTIES\s0 \s-1OR\s0 A
\&\s-1FAILURE\s0 \s-1OF\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1TO\s0 \s-1OPERATE\s0 \s-1WITH\s0 \s-1ANY\s0 \s-1OTHER\s0 \s-1SOFTWARE\s0), \s-1EVEN\s0 \s-1IF\s0
\&\s-1SUCH\s0 \s-1HOLDER\s0 \s-1OR\s0 \s-1OTHER\s0 \s-1PARTY\s0 \s-1HAS\s0 \s-1BEEN\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0
\&\s-1SUCH\s0 \s-1DAMAGES\s0.
