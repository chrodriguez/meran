[% INCLUDE "intranet-top.inc" %]

<!-- Se incluyen las librerias necesarias para manejar autocomplete -->
[% INCLUDE "AutocompleteHelper.inc" %]

<script src="/intranet-tmpl/blue/includes/CombosHelper.js"></script> 
<!-- para manejar la ventana de campos MARC -->
<script src="/intranet-tmpl/blue/includes/popups/helpCamposMARC.js"></script>
<!-- para validar -->
<script src="/intranet-tmpl/blue/includes/jquery/validate/jquery.validate.js"></script>

<script>

//************************************************REVISADO******************************************************************
ID_N1=0; //para saber el id del nivel 1
ID_N2=0; //para saber el id del nivel 2
ID_N3=0; //para saber el id del nivel 3
TAB_INDEX= 0;//tabindex para las componentes
//arreglo de objetos componentes, estos objetos son actualizados por el usuario y luego son enviados al servidor
COMPONENTES_ARRAY= new Array();
//arreglo con datos del servidor para modificar las componentes
DATA_ARRAY = new Array();
MODIFICAR = 0;
ID3_ARRAY = new Array(); //para enviar 1 o mas ID_N3 para agregar/modificar/eliminar
BARCODES_ARRAY = new Array(); //para enviar 1 o mas barcodes

_message= "El campo no puede estar en blanco";

//objeto generico para enviar parametros a cualquier funcion, se le van creando dinamicamente los mismos
function objeto_params(){
	
}


function inicializar(){

	_freeMemory(COMPONENTES_ARRAY);
	_freeMemory(DATA_ARRAY);
	TAB_INDEX= 0;
}

function _freeMemory(array){
	for(var i=0;i<array.length;i++){
		delete array[i];
	}
	
	array= [];
}

function _existeEnArray(array, elemento){
	var cant=0;

	for(var i=0;i<array.length;i++){
		if( jQuery.trim(array[i]) == jQuery.trim(elemento) ){
			cant++;
			if(cant > 1){
			//el elemento existe mas de 1 vez, esta repetido
				return 1;	
			}			
		}
	}
	return 0;
}

function verificarAgregarDocumentoN3(){
	var repetidos_array= new Array();
	var existe= 0;

	if(_getBarcodes()){
		//verifico que los barcodes no esten repetidos
		for(var i=0;i<BARCODES_ARRAY.length;i++){
			if( _existeEnArray(BARCODES_ARRAY, BARCODES_ARRAY[i]) ){
				existe= 1;
				repetidos_array.push(BARCODES_ARRAY[i]);
			}
		}
	
		if(existe){
			alert('Hay barcodes repetidos');
			return 0;
		}
	}

	return 1;
}

function _setFoco(){
	//obtengo cualquer componente que tenga tabindex = 1
	if($("[tabindex='1']")[0]){
		$("[tabindex='1']")[0].focus();
	}
}

function _recuperarSeleccionados(chckbox){
	var chck=$("input[name="+chckbox+"]:checked");
	var array= new Array;
	var long=chck.length;
	if ( long == 0){
		alert("Elija al menos un ejemplar para realizar la acci&oacute;n");
	}
	else{

		for(var i=0; i< long; i++){
			array[i]=chck[i].value;
		}
	}
	
	return array;
}

/*
Esta funcion retorna el ID de la componente en COMPONENTE_ARRAY segun campo, subcampo
*/
function _getIdComponente(campo, subcampo){
	for(var i=0;i<COMPONENTES_ARRAY.length;i++){
		if( (COMPONENTES_ARRAY[i].campo == campo) && (COMPONENTES_ARRAY[i].subcampo == subcampo) ){
			return COMPONENTES_ARRAY[i].idCompCliente;
		}
	}

	return 0;
}

function _getBarcodes(){
	var barcodes_string = $('#'+_getIdComponente('995','f')).val();
	//inicializo el arreglo
	_freeMemory(BARCODES_ARRAY);

	if(barcodes_string != ''){
		BARCODES_ARRAY = barcodes_string.split(",");
		return 1;
	}
	
	return 0;
}

//esta funcion elimina el arreglo de opciones, para enviar menos info al servidor
function _sacarOpciones(){
	for(var i=0;i<COMPONENTES_ARRAY.length;i++){
		if(COMPONENTES_ARRAY[i].opciones){//si esta definido...
			if(COMPONENTES_ARRAY[i].opciones.length > 0){
				//elimino la propiedad opciones, para enviar menos info al servidor
				COMPONENTES_ARRAY[i].opciones= [];
			}
		}
	}
}

function _clearDataFromComponentesArray(){
    for(var i=0;i< COMPONENTES_ARRAY.length;i++){
        COMPONENTES_ARRAY[i].dato= '';
    }
}

function _clearContentsEstructuraDelNivel(){
    $("#estructuraDelNivel1").html("");
    $("#estructuraDelNivel2").html("");
    $("#estructuraDelNivel3").html("");
}

// muestra/oculta los divs de la estructura segun el nivel que se este procesando
function _showAndHiddeEstructuraDelNivel(nivel){
	 if(nivel == 0){
        $('#nivel1Tabla').hide();
        $('#nivel2Tabla').hide();
        $('#nivel3Tabla').hide();	
    }else if(nivel == 1){
        $('#nivel1Tabla').show();
        $('#nivel2Tabla').hide();
        $('#nivel3Tabla').hide();
    }else if(nivel == 2){
        $('#nivel2Tabla').show();
        $('#nivel1Tabla').hide();
        $('#nivel3Tabla').hide();
    }else if(nivel == 3){
        $('#nivel3Tabla').show();
        $('#nivel1Tabla').hide();
        $('#nivel2Tabla').hide();
    }
}

//esta funcion sincroniza la informacion del cliente con el arreglo de componentes para enviarlos al servidor
function syncComponentesArray(){
    for(var i=0; i < COMPONENTES_ARRAY.length; i++){
       COMPONENTES_ARRAY[i].dato= $('#'+COMPONENTES_ARRAY[i].idCompCliente).val();
    }
}

//para mantener el nivel que se esta procesando
_nivelActual= 1;

function getDivDelNivel(){
    
    switch(_nivelActual){
        case 1:
            return 'estructuraDelNivel1';   
        break;
        case 2:
            return 'estructuraDelNivel2';
        break;
        case 3:
            return 'estructuraDelNivel3';
        break;
    }
}


// FIXME esto podria ser generico para los 3 niveles
function mostrarEstructuraDelNivel1(){
    _nivelActual= 1;
    objAH=new AjaxHelper(updateMostrarEstructuraDelNivel1);
    objAH.debug= true;
    objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
    objAH.tipoAccion= "MOSTRAR_ESTRUCTURA_DEL_NIVEL";
    objAH.nivel= _nivelActual;
    
    objAH.id_tipo_doc= 'ALL';
    objAH.sendToServer();
}


// FIXME ver si se puede hacer solo una funcion
function mostrarDataNivel1(){

    if (MODIFICAR){
        for (x=0; x<DATA_ARRAY.length; x++){
			$('#'+DATA_ARRAY[x].idCompCliente).val(DATA_ARRAY[x].dato);
            COMPONENTES_ARRAY[x].rep_n1_id = DATA_ARRAY[x].rep_n1_id;
        }
   }
}

function mostrarDataNivel2(){

    if (MODIFICAR){
        for (x=0; x<DATA_ARRAY.length; x++){
			$('#'+DATA_ARRAY[x].idCompCliente).val(DATA_ARRAY[x].dato);
            COMPONENTES_ARRAY[x].rep_n2_id = DATA_ARRAY[x].rep_n2_id;
        }
   }
}

function mostrarDataNivel3(){

    if (MODIFICAR){
        for (x=0; x<DATA_ARRAY.length; x++){
			$('#'+DATA_ARRAY[x].idCompCliente).val(DATA_ARRAY[x].dato);
            COMPONENTES_ARRAY[x].rep_n3_id = DATA_ARRAY[x].rep_n3_id;
        }
   }
}

function updateMostrarEstructuraDelNivel1(responseText){
    _clearContentsEstructuraDelNivel();
    _showAndHiddeEstructuraDelNivel(1);
    //proceso la info del servidor y se crean las componentes en el cliente
    //ademas se carga el arreglo COMPONENTES_ARRAY donde se hace el mapeo de componente del cliente y dato
    procesarInfoJson(responseText); 
    //carga los datos en los campos solo si se esta modificando
    mostrarDataNivel1();
    scrollTo('nivel1Tabla');
    
	//asigno el handler para el validador
	validateForm('formNivel1',guardarModificarDocumentoN1);
}

function mostrarEstructuraDelNivel2(){
    _nivelActual= 2;
    objAH=new AjaxHelper(updateMostrarEstructuraDelNivel2);
    objAH.debug= true;
    objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
    objAH.tipoAccion= "MOSTRAR_ESTRUCTURA_DEL_NIVEL";
    objAH.nivel= 2;
    objAH.id_tipo_doc= $("#tipo_nivel3_id").val();
    objAH.sendToServer();
}

function updateMostrarEstructuraDelNivel2(responseText){
    _clearContentsEstructuraDelNivel();
    _showAndHiddeEstructuraDelNivel(2);
    //proceso la info del servidor y se crean las componentes en el cliente
    procesarInfoJson(responseText);
	mostrarDataNivel2();
    scrollTo('nivel2Tabla');
    
	//asigno el handler para el validador
	validateForm('formNivel2',guardarModificarDocumentoN2);
}

function mostrarEstructuraDelNivel3(){
    _nivelActual= 3;

    objAH=new AjaxHelper(updateMostrarEstructuraDelNivel3);
    objAH.debug= true;
    objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
    objAH.tipoAccion= "MOSTRAR_ESTRUCTURA_DEL_NIVEL";
    objAH.nivel= _nivelActual;
    objAH.id_tipo_doc= $("#tipo_nivel3_id").val();
    objAH.sendToServer();
}

function updateMostrarEstructuraDelNivel3(responseText){
    _clearContentsEstructuraDelNivel();
    _showAndHiddeEstructuraDelNivel(3);
	TAB_INDEX= 0;
    //proceso la info del servidor y se crean las componentes en el cliente
    procesarInfoJson(responseText);
	mostrarDataNivel3();
    scrollTo('nivel3Tabla');
	
	//asigno el handler para el validador
	validateForm('formNivel3',guardarModificarDocumentoN3);
}

function agregarN2(){
	MODIFICAR = 0;
	mostrarEstructuraDelNivel2();
}

function agregarN3(){
	MODIFICAR = 0;
	$('#divCantEjemplares').show();
	mostrarEstructuraDelNivel3();
}

//esta funcion muestra la info en la barra laterarl del NIVEL 1 luego de ser guardado
function mostrarInfoAltaNivel1(id1){
	ID_N1= id1;
    objAH=new AjaxHelper(updateMostrarInfoAltaNivel1);
    objAH.debug= true;
    objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
    objAH.tipoAccion= "MOSTRAR_INFO_NIVEL1_LATERARL";
    objAH.id1= ID_N1;
    objAH.sendToServer();
}

function updateMostrarInfoAltaNivel1(responseText){
    $('#nivel1Tabla').slideUp('slow');
    $('#estructuraDelNivel1').html('');
    $('#nivel1').html(responseText);
}

//esta funcion muestra la info en la barra laterarl del NIVEL 2 luego de ser guardado
function mostrarInfoAltaNivel2(id2){
    objAH=new AjaxHelper(updateMostrarInfoAltaNivel2);
    objAH.debug= true;
    objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
    objAH.tipoAccion= "MOSTRAR_INFO_NIVEL2_LATERARL";
    objAH.id2= id2; //mostrar todos los nivel 2 del nivel1 con el q se esta trabajando, asi este vuela
    objAH.id1= ID_N1;
    objAH.sendToServer();
}

function updateMostrarInfoAltaNivel2(responseText){
    $('#nivel2Tabla').slideUp('slow');
    $('#estructuraDelNivel2').html('');
    $('#nivel2').html(responseText);
}

/*
Esta funcion es la asignada al handler del validate, ejecuta guardarModificacionDocumentoN1 o guardarDocumentoN1
dependiendo de si se esta modificando o agregando
*/
function guardarModificarDocumentoN1(){
	if(MODIFICAR){
		guardarModificacionDocumentoN1();
	}else{
		guardarDocumentoN1();
	}
}

/*
Esta funcion es la asignada al handler del validate, ejecuta guardarModificacionDocumentoN2 o guardarDocumentoN2
dependiendo de si se esta modificando o agregando
*/
function guardarModificarDocumentoN2(){
	if(MODIFICAR){
		guardarModificacionDocumentoN2();
	}else{
		guardarDocumentoN2();
	}
}

/*
Esta funcion es la asignada al handler del validate, ejecuta guardarModificacionDocumentoN3 o guardarDocumentoN3
dependiendo de si se esta modificando o agregando
*/
function guardarModificarDocumentoN3(){
	if(MODIFICAR){
		guardarModificacionDocumentoN3();
	}else{
		guardarDocumentoN3();
	}
}

function guardarDocumentoN1(){

    syncComponentesArray();
    objAH=new AjaxHelper(updateGuardarDocumentoN1);
    objAH.debug= true;
    objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
    objAH.tipoAccion= "GUARDAR_NIVEL_1";
    objAH.id_tipo_doc= $("#tipo_nivel3_id").val();
	_sacarOpciones();
    objAH.infoArrayNivel1= COMPONENTES_ARRAY;
    objAH.id1 = ID_N1;
    objAH.sendToServer();
}

function updateGuardarDocumentoN1(responseText){

    var info=JSONstring.toObject(responseText);
    var Messages= info.Message_arrayref;
    ID_N1= info.id1; //recupero el id desde el servidor
    setMessages(Messages);
    if (! (hayError(Messages) ) ){
        inicializar();
        //carga la barra lateral con info de nivel 1
        mostrarInfoAltaNivel1(ID_N1);
        mostrarEstructuraDelNivel2();
    }
}

function guardarDocumentoN2(){
    syncComponentesArray();
    objAH=new AjaxHelper(updateGuardarDocumentoN2);
    objAH.debug= true;
    objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
    objAH.tipoAccion= "GUARDAR_NIVEL_2";
	_sacarOpciones();
    objAH.infoArrayNivel2= COMPONENTES_ARRAY;
    objAH.id1 = ID_N1;
    objAH.id2 = ID_N2; //por si se modificó
    objAH.sendToServer();
}

function updateGuardarDocumentoN2(responseText){

    var info=JSONstring.toObject(responseText);
    var Messages= info.Message_arrayref;//obtengo los mensajes para el usuario
    ID_N2= info.id2; //recupero el id desde el servidor
    setMessages(Messages);
    if (! (hayError(Messages) ) ){
        inicializar();
        //carga la barra lateral con info de nivel 2
        mostrarInfoAltaNivel2(ID_N2);
        mostrarEstructuraDelNivel3();
    }
}


function guardarDocumentoN3(){
	if( verificarAgregarDocumentoN3() ){
		syncComponentesArray();
		objAH=new AjaxHelper(updateGuardarDocumentoN3);
		objAH.debug= true;
		objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
		objAH.tipoAccion= "GUARDAR_NIVEL_3";
		objAH.tipo_documento= $("#tipo_nivel3_id").val();
		//recupero todos los barcodes, 0 o mas
// 		_getBarcodes();
		objAH.BARCODES_ARRAY= BARCODES_ARRAY;
		objAH.cantEjemplares= $("#cantEjemplares").val();
		_sacarOpciones();
		objAH.infoArrayNivel3= COMPONENTES_ARRAY;
		objAH.id1 = ID_N1;
		objAH.id2 = ID_N2;
		objAH.sendToServer();
	}
}

function updateGuardarDocumentoN3(responseText){

	//inicializo el arreglo
	_freeMemory(ID3_ARRAY);
    var info=JSONstring.toObject(responseText);
    var Messages= info.Message_arrayref; //obtengo los mensajes para el usuario
    setMessages(Messages);

   //PARA LIMPIAR EL VALUE DE TODOS (ASI INGRESA UNO NUEVO)
   var allInputs = $('#estructuraDelNivel3 :input');
       for (x=0; x< allInputs.length; x++)
            allInputs[x].value="";
    if (! (hayError(Messages) ) ){
        //deja la misma estructura, solo borra el campo dato
        _clearDataFromComponentesArray();
        //muestra la tabla con los ejemplares agregados
        mostrarInfoAltaNivel3(ID_N1, ID_N2);
    }
}

function guardarModificacionDocumentoN1(){

    syncComponentesArray();
    objAH=new AjaxHelper(updateGuardarModificacionDocumentoN1);
    objAH.debug= true;
    objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
    objAH.tipoAccion= "MODIFICAR_NIVEL_1";
    objAH.id_tipo_doc= $("#tipo_nivel3_id").val();
	_sacarOpciones();
    objAH.infoArrayNivel1= COMPONENTES_ARRAY;
    objAH.id1 = ID_N1;
    objAH.sendToServer();
}

function updateGuardarModificacionDocumentoN1(responseText){

	MODIFICAR=0;
    var info=JSONstring.toObject(responseText);
    var Messages= info.Message_arrayref;
    ID_N1= info.id1; //recupero el id desde el servidor
    setMessages(Messages);
    if (! (hayError(Messages) ) ){
        inicializar();
        //carga la barra lateral con info de nivel 1
        mostrarInfoAltaNivel1(ID_N1);
        mostrarEstructuraDelNivel2();
    }
}

function guardarModificacionDocumentoN2(){
    syncComponentesArray();
    objAH=new AjaxHelper(updateGuardarModificacionDocumentoN2);
    objAH.debug= true;
    objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
    objAH.tipoAccion= "MODIFICAR_NIVEL_2";
	_sacarOpciones();
    objAH.infoArrayNivel2= COMPONENTES_ARRAY;
    objAH.id1 = ID_N1;
    objAH.id2 = ID_N2; //por si se modificó
    objAH.sendToServer();
}

function updateGuardarModificacionDocumentoN2(responseText){

	MODIFICAR=0;
    var info=JSONstring.toObject(responseText);
    var Messages= info.Message_arrayref;//obtengo los mensajes para el usuario
    ID_N2= info.id2; //recupero el id desde el servidor
    setMessages(Messages);
    if (! (hayError(Messages) ) ){
        inicializar();
        //carga la barra lateral con info de nivel 2
        mostrarInfoAltaNivel2(ID_N2);
        mostrarEstructuraDelNivel3();
    }
}

function guardarModificacionDocumentoN3(){
    syncComponentesArray();
    objAH=new AjaxHelper(updateGuardarModificacionDocumentoN3);
    objAH.debug= true;
    objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
    objAH.tipoAccion= "MODIFICAR_NIVEL_3";
    objAH.tipo_documento= $("#tipo_nivel3_id").val();
	objAH.cantEjemplares= $("#cantEjemplares").val();
	_sacarOpciones();
    objAH.infoArrayNivel3= COMPONENTES_ARRAY;
    objAH.id1 = ID_N1;
    objAH.id2 = ID_N2;
	objAH.ID3_ARRAY= ID3_ARRAY;
    objAH.sendToServer();
}

function updateGuardarModificacionDocumentoN3(responseText){

	//inicializo el arreglo
	_freeMemory(ID3_ARRAY);
	MODIFICAR=0;
    var info=JSONstring.toObject(responseText);
    var Messages= info.Message_arrayref; //obtengo los mensajes para el usuario
    setMessages(Messages);

   	//PARA LIMPIAR EL VALUE DE TODOS (ASI INGRESA UNO NUEVO)
  	var allInputs = $('#estructuraDelNivel3 :input');
	for (x=0; x< allInputs.length; x++){
		allInputs[x].value="";
	}

    if (! (hayError(Messages) ) ){
        //deja la misma estructura, solo borra el campo dato
        _clearDataFromComponentesArray();
        //muestra la tabla con los ejemplares agregados
        mostrarInfoAltaNivel3(ID_N1, ID_N2);
    }
}


function guardar(nivel){
    if(nivel == 1){
        $('#formNivel1').submit();        
    } 
    if(nivel == 2){
        $('#formNivel2').submit();
    }
    if(nivel == 3){
        $('#formNivel3').submit(); //hace el submit
// FIXME
// 		guardarDocumentoN3(); //ojo asi no va a validad
    }
}

//esta funcion muestra la info en la barra laterarl del NIVEL 2 luego de ser guardado
function mostrarInfoAltaNivel3(id1, idNivel2){
    objAH=new AjaxHelper(updateMostrarInfoAltaNivel3);
    objAH.debug= true;
    objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
    objAH.tipoAccion= "MOSTRAR_INFO_NIVEL3_TABLA";
    objAH.id1= id1;
    objAH.id2= idNivel2;
    ID_N2= idNivel2;
    objAH.sendToServer();
}

function updateMostrarInfoAltaNivel3(responseText){
	$('#divCantEjemplares').show();	
    $('#detalleDelNivel3').html(responseText);
    zebra('tablaResult');
	checkedAll('checkAllEjemplares','checkEjemplares');
}

/*
 * procesarInfoJson
 * procesa la informacion que esta en notacion json, que viene del llamado ajax.
 * @params
 * json, string con formato json.
 */
function procesarInfoJson(json){
    var objetos=JSONstring.toObject(json);

    for(var i=0; i< objetos.length; i++){
		//guardo el objeto para luego enviarlo al servidor una vez que este actualizado
        COMPONENTES_ARRAY[i]= objetos[i];
        procesarObjeto(objetos[i]);
    }
	//hago foco en la primer componente
	_setFoco();
}

/*
 * procesarObjeto
 * procesa el objeto json, para poder crear el componente adecuado al tipo de datos que vienen en el objeto.
 * @params
 * objeto, elemento que contiene toda la info necesaria.
 */

function crearRegla(comp,idComp){
   $('#'+idComp).rules("add", { required:true } );
}

function procesarObjeto(objeto){
    var libtext= $.trim(objeto.liblibrarian);
    var tipo= $.trim(objeto.tipo);
    var ref= objeto.referencia;
    var valor= objeto.valor;
    var varios= objeto.varios;
    var idComp= objeto.idCompCliente;
    var comp;
    var strComp;
    var auto=0;
    var unoLinea=0;
    var idDiv="div"+idComp;
    var divComp= crearDivComponente(idDiv);
    var divLabel= crearDivLabel(libtext);
    strComp="<div class='divContentComponente'> "+divLabel+divComp+"</div>";
    $(strComp).appendTo("#"+getDivDelNivel());
    switch(tipo){
        case "text":
            //tipo,id,opciones,valor
            comp= crearComponente(tipo,idComp,"","");
            $(comp).appendTo("#"+idDiv);
            $("#"+idComp).val(objeto.valText);
        break;
        case "combo":
            comp= crearComponente(tipo,idComp,objeto,valor);
            $(comp).appendTo("#"+idDiv);
        break;
        case "texta2":
            compText=crearComponente("text",idComp,"","");
            comp=crearComponente("texta","texta"+idComp,"readonly='readonly'","");
            var boton="<input type='image' value='borrar ultima opcion' onclick='borrarEleccion("+idComp+")' src='[% themelang %]/images/sacar.png'>";
            comp="<div style='float: left;padding-right:1%; padding-bottom: 1%;'>"+comp+"</div>";
            compText=compText+" "+boton;
            $(compText).appendTo("#"+idDiv);
            $(comp).appendTo("#strComp"+idComp);
            $("#texta"+idComp).val(objeto.valTextArea);
        break;
		 case "auto":
            //tipo,id,opciones,valor
            comp= crearComponente(tipo,idComp,"","");
            $(comp).appendTo("#"+idDiv);
            $("#"+idComp).val(objeto.valText);
			_cearAutocompleteParaCamponente(objeto);
			//se crea un input hidden para guardar el ID del elemento de la lista que se selecciono
			comp= crearComponente('hidden',objeto.idCompCliente + '_hidden','','');
			 $(comp).appendTo("#"+idDiv);
// FIXME falta recuperar la data y dejar el ID en el input hidden
			if(!MODIFICAR){
				_cambiarIdDeAutocomplete();
			}else{	
			//busco el dato segun el ID $('#' + objeto.idCompCliente + '_hidden').val() y lo agrego en $('#' + objeto.idCompCliente ).val()
			}
        break;
    }
//     crearRegla(comp,idComp);
   //Se agregan clases para cuando tenga que recuperar los datos.
    if(objeto.obligatorio == "1"){
        hacerComponenteObbligatoria(idComp);
    }

}


function _cambiarIdDeAutocomplete(){
	 for(var i=0; i< COMPONENTES_ARRAY.length; i++){
       	//si es un autocomplete, guardo el ID del input hidden
		if(COMPONENTES_ARRAY[i].tipo == 'auto'){	
			COMPONENTES_ARRAY[i].idCompCliente= COMPONENTES_ARRAY[i].idCompCliente + '_hidden';
		}
    }
}

function _cearAutocompleteParaCamponente(o){

	switch(o.referenciaTabla){
        case "autor": CrearAutocompleteAutores(	o.idCompCliente, 
												o.idCompCliente + '_hidden', 
												'/cgi-bin/koha/autocompletables/autorAutocomplete.pl'
									);
        break;
		case "pais": CrearAutocompletePaises(	o.idCompCliente, 
												o.idCompCliente + '_hidden', 
												'/cgi-bin/koha/autocompletables/paisesAutocomplete.pl'
									);
        break;
		case "lenguaje": CrearAutocompleteLenguajes(	o.idCompCliente, 
														o.idCompCliente + '_hidden', 
														'/cgi-bin/koha/autocompletables/lenguajesAutocomplete.pl'
									);
        break;
		case "ciudad": CrearAutocompleteCiudades(	o.idCompCliente, 
													o.idCompCliente + '_hidden',
													'/cgi-bin/koha/autocompletables/searchcity.pl'
									);
        break;
	}
}

/*
 * crearComponente
 * crea el string HTML del componente correspondiente al parametro tipo.
 * @params
 * tipo, corresponde a la clase de componente html que se quiere crear.
 * id, identificador para el componente que se va a crear.
 * opciones, son las opciones que se generan si el componente es un combobox, para los demas esta en blanco.
 */
function crearComponente(tipo,id,objeto,valor){
    var comp;
	TAB_INDEX++;

    switch(tipo){
        case "text": comp="<input type='"+tipo+"' id='"+id+"' value='"+valor+"' size='80' tabindex="+TAB_INDEX+">";
        break;
        case "combo": comp="<select id='"+id+"' tabindex="+TAB_INDEX+">\n<option value=''>Elegir opci&oacute;n</option>\n";
            var op="";
            var def="";
            var opciones= objeto.opciones;

            for(var i=0; i< opciones.length; i++){
                if(valor == opciones[i].clave){
                    def=" selected='selected' ";
                }
                op=op+"<option value='"+opciones[i].clave+ "'" + def +"'>"+opciones[i].valor+"</option>\n";
                def="";
            }

            comp=comp+op+"</select>";
        break;
        case "texta": comp="<textarea id='"+id+"' "+ opciones +" rows='4' tabindex="+TAB_INDEX+">"+valor+"</textarea>";
        break;
		case "auto": comp="<input type='"+tipo+"' id='"+id+"' value='"+valor+"' size='80' tabindex="+TAB_INDEX+">";
        break;
		case "hidden": comp="<input type='hidden' id='"+id+"' value=''>";
        break;
    }

    return comp;
}


// Esta funcion convierte una componete segun idObj en obligatoria, agrega * a la derecha de la misma
function hacerComponenteObbligatoria(idObj){
    $("#"+idObj).addClass("obligatorio");
    $("#"+idObj).addClass("required");
    $("<b> * </b>").insertAfter($("#"+idObj));
}

// Esta funcion crea un divComponente con un id segun parametro idObj
function crearDivComponente(idObj){
    return "<div id='"+idObj+"' class='divComponente'></div>";
}

// Esta funcion crea un divLabel con un Label segun parametro
function crearDivLabel(label){
    return "<div class='divLabelComponente'>  "+label+": </div>";
}


/*
 * borrarN1
 * Elimina de la base de datos el documento con id1 igual al parametro que ingresa y todos los otros datos 
 * correspondiente a los otros niveles que hacen referencia al id1.
 */
function borrarN1(id1){
	if( window.confirm("[% 'Est&aacute; seguro que desea borrarlo?' | i18n %]") ){
		objAH=new AjaxHelper(updateBorrarN1);
		objAH.debug= true;
		objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
		objAH.id1=id1;
		objAH.nivel=1;
		objAH.itemtype=$("#id_tipo_doc").val();
		objAH.tipoAccion="ELIMINAR_NIVEL";
		objAH.sendToServer();
	}
}

function updateBorrarN1(responseText){
    var info=JSONstring.toObject(responseText);  
	//se borrar el nivel 1 y en cascada nivel 2 y 3 si esta permitido
	//se refresca la info	
    var Messages= info.Message_arrayref;
    setMessages(Messages);
	inicializar();
	mostrarEstructuraDelNivel1();
	mostrarInfoAltaNivel2(ID_N2);
	mostrarInfoAltaNivel3(ID_N1,ID_N2);
}

function borrarN2(id2){
	if( window.confirm("[% 'Est&aacute; seguro que desea borrarlo?' | i18n %]") ){
		objAH=new AjaxHelper(updateBorrarN2);
		objAH.debug= true;
		objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
		objAH.id2=id2;
		objAH.nivel=2;
		objAH.itemtype=$("#id_tipo_doc").val();
		objAH.tipoAccion="ELIMINAR_NIVEL";
		objAH.sendToServer();
	}
}

function updateBorrarN2(responseText){
    var info=JSONstring.toObject(responseText);  
    var Messages= info.Message_arrayref;
    setMessages(Messages);
	inicializar();
	mostrarEstructuraDelNivel2();
	mostrarInfoAltaNivel2(ID_N2);
	mostrarInfoAltaNivel3(ID_N1,ID_N2);
}

function borrarN3(id3){
	if( window.confirm("[% 'Est&aacute; seguro que desea borrarlo?' | i18n %]") ){
		objAH=new AjaxHelper(updateBorrarN3);
		objAH.debug= true;
		objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
 		objAH.id3_array= [id3];
		objAH.nivel=3;
		objAH.itemtype=$("#id_tipo_doc").val();
		objAH.tipoAccion="ELIMINAR_NIVEL";
		objAH.sendToServer();
	}
}

function updateBorrarN3(responseText){
    var info=JSONstring.toObject(responseText);  
    var Messages= info.Message_arrayref;
    setMessages(Messages);
	inicializar();
	mostrarEstructuraDelNivel3();
	mostrarInfoAltaNivel3(ID_N1,ID_N2);
}

function borrarEjemplaresN3(id3){
	if( window.confirm("[% 'Est&aacute; seguro que desea borrarlo?' | i18n %]") ){
		objAH=new AjaxHelper(updateBorrarEjemplaresN3);
		objAH.debug= true;
		objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
		var id3_array= _recuperarSeleccionados("checkEjemplares");
		objAH.id3_array= id3_array;
		objAH.nivel=3;
		objAH.itemtype=$("#id_tipo_doc").val();
		objAH.tipoAccion="ELIMINAR_NIVEL";
		if(id3_array.length > 0){objAH.sendToServer();}
	}
}

function updateBorrarEjemplaresN3(responseText){
    var info=JSONstring.toObject(responseText);  
    var Messages= info.Message_arrayref;
    setMessages(Messages);
	inicializar();
	mostrarEstructuraDelNivel3();
	mostrarInfoAltaNivel3(ID_N1,ID_N2);
}
/*
 * modificarN1
 * Funcion que obtiene los datos ingresados en el nivel 1 para poder crear los componentes con los valores
 * guardados en la base de datos y poder modificarlos.
 */
function modificarN1(id1){
	inicializar();
	objAH=new AjaxHelper(updateModificarN1);
	objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
	objAH.debug= true;
	objAH.tipoAccion="MOSTRAR_ESTRUCTURA_DEL_NIVEL_CON_DATOS";
	objAH.itemtype="ALL";
	objAH.id = id1;
	objAH.nivel = 1;
	objAH.sendToServer();
}

function updateModificarN1(responseText){
    MODIFICAR = 1;
    //se genera un arreglo de objetos con la informacion guardada, campo, subcampo    
    DATA_ARRAY = JSONstring.toObject(responseText);
    mostrarEstructuraDelNivel1();
}

function modificarN2(id2){
   inicializar();
   objAH=new AjaxHelper(updateModificarN2);
   objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
   objAH.debug= true;
   objAH.tipoAccion="MOSTRAR_ESTRUCTURA_DEL_NIVEL_CON_DATOS";
   objAH.itemtype=$("#id_tipo_doc").val();
   objAH.id = id2;
   objAH.nivel = 2;
   objAH.sendToServer();
}

function updateModificarN2(responseText){
   MODIFICAR = 1;
   DATA_ARRAY = JSONstring.toObject(responseText);
   mostrarEstructuraDelNivel2();
}

function modificarN3(id3){
	inicializar();
	ID_N3= id3;	
	objAH=new AjaxHelper(updateModificarN3);
	objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
	objAH.debug= true;
	objAH.tipoAccion="MOSTRAR_ESTRUCTURA_DEL_NIVEL_CON_DATOS";
	objAH.itemtype=$("#id_tipo_doc").val();
 	objAH.id3 = id3;
 	ID3_ARRAY[0]= id3;
	objAH.nivel = 3;
	objAH.sendToServer();
}

function updateModificarN3(responseText){
	MODIFICAR = 1;
	$('#divCantEjemplares').hide();	
	DATA_ARRAY = JSONstring.toObject(responseText);
	mostrarEstructuraDelNivel3();
}

/*
Esta funcion modifica 1 a n Ejemplares, los ID_N3 se encuentran en ID3_ARRAY
se toma el 1er elemento del arreglo ID3_ARRAY como Ejemplar a modificar, ya
que se puede haber seleccionado por ej. 3 ejemplares distintos, luego se envia
lo modificado al servidor y a los 3 ID_N3 se les modifica esta informacion 
*/
function modificarEjemplaresN3(id3){
	inicializar();
	ID_N3= id3;	
	objAH=new AjaxHelper(updateModificarEjemplaresN3);
	objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
	objAH.debug= true;
	objAH.tipoAccion="MOSTRAR_ESTRUCTURA_DEL_NIVEL_CON_DATOS";
	objAH.itemtype=$("#id_tipo_doc").val();
	//obtengo todos los ejemplares seleccionados para modificar
	ID3_ARRAY= _recuperarSeleccionados("checkEjemplares");
	objAH.id3= ID3_ARRAY[0]; //muestra la info del primer ejemplar en el arreglo de ejemplares
	objAH.nivel = 3;
	objAH.sendToServer();
}

function updateModificarEjemplaresN3(responseText){
	MODIFICAR = 1;
	$('#divCantEjemplares').hide();	
	DATA_ARRAY = JSONstring.toObject(responseText);
	mostrarEstructuraDelNivel3();
}
/*
 * borrarGrupo
 * Elimina de la base de datos el grupo correspodiente a los parametros que ingresan, y los ejemplares que hay en 
 * ese grupo.
 */
function borrarGrupo(id1,id2){	
	objAH=new AjaxHelper(updateBorrarGrupo);
    objAH.debug= true;
	objAH.url="/cgi-bin/koha/catalogacion/estructura/nuevo/estructuraCataloDB.pl";
	objAH.id2=id2;
	objAH.nivel=2;
	objAH.itemtype=$("#id_tipo_doc").val();
	objAH.tipoAccion="ELIMINAR_NIVEL";
	objAH.sendToServer();
}

function updateBorrarGrupo(){
}

/*
Esta funcion es usada cuando se quiere editar N1, N2 o N3 desde otra ventana, se redirecciona aqui
*/
function cargarNivel1(params){
/*
	params.id1
	params.id2
	params.id3
	params.tipoAccion= ('MODIFICAR_NIVEL_1'|'MODIFICAR_NIVEL_2'|'MODIFICAR_NIVEL_3') por defecto 'MODIFICAR_NIVEL_1'
*/
	ID_N1= params.id1;
	ID_N2= params.id2;
// FIXME este funciona pero tarda mucho, ver como ir llamando de a uno por vez asi parece mas rapido
	mostrarInfoAltaNivel1(params.id1);
	mostrarInfoAltaNivel2(params.id2);	
	mostrarInfoAltaNivel3(params.id1, params.id2);	

	if(params.tipoAccion == 'MODIFICAR_NIVEL_2'){
		modificarN2(params.id2);
	}else	
	if(params.tipoAccion == 'MODIFICAR_NIVEL_3'){
		modificarN3(params.id3);
	}else{
		//por defecto se carga el Nivel 1 para modificar
		modificarN1(params.id1);
	}
}

function validateForm(formID, func){

   if( jQuery.browser.mozilla ) {
      // do when DOM is ready
      $( function() {
         // search form, hide it, search labels to modify, filter classes nocmx and error
        $( '#'+formID ).hide().find( 'p>label:not(.nocmx):not(.error)' ).each( function() {
            var $this = $(this);
            var labelContent = $this.html();
            var labelWidth = document.defaultView.getComputedStyle( this, '' ).getPropertyValue( 'width' );
            // create block element with width of label
            var labelSpan = $("<span>")
               .css("display", "block")
               .width(labelWidth)
               .html(labelContent);
            // change display to mozilla specific inline-box
            $this.css("display", "-moz-inline-box")
               // remove children
               .empty()
               // add span element
               .append(labelSpan);
         // show form again
         }).end().show();
      });
   };
         $.validator.setDefaults({
            submitHandler:  func ,
         });

            var _message= "Llene el campo";
//             validate signup form on keyup and submit
            $("#"+formID).validate();
}

//Funcion que se ejecuta cuando se carga la pagina, dependiendo de donde viene ejecuta las funciones correspondientes.
$(document).ready( function() {
	//oculto todas las tabls
	_showAndHiddeEstructuraDelNivel(0);

	[% IF tipoAccion == "MODIFICAR_NIVEL_1" %]

		params= new objeto_params();
		params.id1= [% id1 %];
		params.id2= [% id2 %];
		params.id3= [% id3 %];
		params.tipoAccion= '[% tipoAccion %]';
		cargarNivel1(params);
	[% ELSE %]
		[% IF tipoAccion == "MODIFICAR_NIVEL_2" %]
	
			params= new objeto_params();
			params.id1= [% id1 %];
			params.id2= [% id2 %];
			params.id3= [% id3 %];
			params.tipoAccion= '[% tipoAccion %]';
			cargarNivel1(params);
		[% ELSE %]	
			[% IF tipoAccion == "MODIFICAR_NIVEL_3" %]
		
				params= new objeto_params();
				params.id1= [% id1 %];
				params.id2= [% id2 %];
				params.id3= [% id3 %];
				params.tipoAccion= '[% tipoAccion %]';
				cargarNivel1(params);
			[% END %]
		[% END %]
	[% END %]

} );

</script>

<div style="text-align: right;"><span class="click" onClick="abrirVentanaHelperMARC();">Ayuda MARC</span></div>

<p class="pagetitle" >[% "Agregar Documento" | i18n %]</p>

[% "Esquema de ingreso de datos tipo:" | i18n %] [% comboTipoDocumento %]
<br><br>

<div class="todo">

<div class="lateral">
    <div id="nivel1" class="nivel1Lateral"></div>
    <div class="nivel2Barra">
        <div id="nivel2" class="nivel2Lateral"></div>
    </div>
</div>   <!--END <div class="lateral">-->

<div class="centro">

<span id="nivel1Tabla">
    <table width="100%" cellspacing="0" cellpadding="0" border="0">
        <tr class="tablaresultadoTitle">
            <td width="1%" align="left" valign="top">
                <img src="[% themelang %]/images/izquierda.png">
            </td>
            <td colspan="7" class=inputFontNormal> 
                    <b>[% "Agregar Documento:" | i18n %] [% descripcion %]  (paso: 1 de 3) </b>
            </td>
            <td width="1%" align="right" valign="top">
                <img src="[% themelang %]/images/derecha.png">
            </td>
        </tr>
    </table>

<form id="formNivel1" name="formNivel1" class="validateDataForm">
<!--     CAMPOS DINAMICOS DEL NIVEL1 -->
    <div id= "estructuraDelNivel1"></div>
</form>
    <br>
    <p><br><br><br><b>&nbsp;* [% "Campos obligatorios" | i18n %]</b></p>
    
    <center>
    <input  type="image" src="[% themelang %]/images/guardar.png" value="[% 'Guardar nivel 1' | i18n %]" title="[% 'Guardar nivel 1' | i18n %]"  
            onClick="guardar(1)">
    </center>
</span>

<span id="nivel2Tabla">
    <table width="100%" cellspacing="0" cellpadding="0" border="0">
        <tr class="tablaresultadoTitle">
            <td width="1%" align="left" valign="top">
                <img src="[% themelang %]/images/izquierda.png">
            </td>
            <td colspan="7" class=inputFontNormal> 
                    <b>[% "Agregar Grupo:" | i18n %] [% descripcion %]  (paso: 2 de 3) </b>
            </td>
            <td width="1%" align="right" valign="top">
                <img src="[% themelang %]/images/derecha.png">
            </td>
        </tr>
    </table>
    
<form id="formNivel2" name="formNivel2" class="validateDataForm">
<!--     CAMPOS DINAMICOS DEL NIVEL 2 -->
    <div id= "estructuraDelNivel2"></div>
</form>
    <br>
    <p><br><br><br><b>&nbsp;* [% "Campos obligatorios" | i18n %]</b></p>
    
    <center>
    <input  type="image" src="[% themelang %]/images/guardar.png" value="[% 'Guardar nivel 2' | i18n %]" title="[% 'Guardar nivel 2' | i18n %]"  
            onClick="guardar(2)">
    </center>
</span>

<span id="nivel3Tabla">
    <table width="100%" cellspacing="0" cellpadding="0" border="0">
        <tr class="tablaresultadoTitle">
            <td width="1%" align="left" valign="top">
                <img src="[% themelang %]/images/izquierda.png">
            </td>
            <td colspan="7" class=inputFontNormal> 
                    <b>[% "Agregar Ejemplar:" | i18n %] [% descripcion %]  (paso: 3 de 3) </b>
            </td>
            <td width="1%" align="right" valign="top">
                <img src="[% themelang %]/images/derecha.png">
            </td>
        </tr>
    </table>

<form id="formNivel3" name="formNivel3" class="validateDataForm">

	<div id="divCantEjemplares" class="divContentComponente">
		<div class="divLabelComponente"> Cant. Ejemplares: </div>
<!-- 		<div id="divCantEjemplares" class="divComponente"> -->
			<input id="cantEjemplares" type="text" tabindex="1" size="10" value="1" class="required"/>
<!-- 		</div> -->
	</div>
<!--     CAMPOS DINAMICOS DEL NIVEL 3 -->
    <div id= "estructuraDelNivel3"></div>
</form>
    <p><br><br><br><b>&nbsp;* [% "Campos obligatorios" | i18n %]</b></p>
    
    <center>
    <!--<input  type="image" src="[% themelang %]/images/guardar.png" value="[% 'Guardar nivel 3' | i18n %]" title="[% 'Guardar nivel 3' | i18n %]"  
            onClick="guardar(3)">-->
	<a onClick="guardar(3)" >
                    <img alt="Guardar" src="[% themelang %]/images/guardar.png" border="0" value="[% 'Guardar nivel 3' | i18n %]" 
					title="[% 'Guardar nivel 3' | i18n %]">
		</a>

    </center>
</span>

</div> <!--END <div class="centro">-->

<!-- detalle del Nivel 3, segun Nivel 2 seleccionado -->
<div id="detalleDelNivel3" class="nivel3Footer"></div>

</div> <!--END <div class="todo">-->

[% INCLUDE "intranet-bottom.inc" %]

