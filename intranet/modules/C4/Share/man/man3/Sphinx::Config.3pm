.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Sphinx::Config 3"
.TH Sphinx::Config 3 "2011-03-23" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Sphinx::Config \- Sphinx search engine configuration file read/modify/write
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Sphinx::Config;
\&
\&    my $c = Sphinx::Config\->new();
\&    $c\->parse($filename);
\&    $path = $c\->get(\*(Aqindex\*(Aq, \*(Aqtest1\*(Aq, \*(Aqpath\*(Aq);
\&    $c\->set(\*(Aqindex\*(Aq, \*(Aqtest1\*(Aq, \*(Aqpath\*(Aq, $path);
\&    $c\->save($filename);
\&    ...
.Ve
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.SS "new"
.IX Subsection "new"
.Vb 1
\&    $c = Sphinx::Config\->new;
.Ve
.SS "preserve_inheritance"
.IX Subsection "preserve_inheritance"
.Vb 3
\&    $c\->preserve_inheritance(0);
\&    $c\->preserve_inheritance(1);
\&    $pi = $c\->preserve_inheritance(1);
.Ve
.PP
Set/get the current behaviour for preserving inherited values.  When
set to a non-zero value (the default), if a value is set in a parent
section, then it is automatically inherited by any child sections, and
when the configuration file is saved, values that are implicit through
inheritance are not shown.  When set to zero, each section is
considered standalone and a complete set of values is shown in the
saved file.
.PP
This flag may be enabled and disabled selectively for calls to \fIset()\fR and
\&\fIsave()\fR.
.SH "METHODS"
.IX Header "METHODS"
.SS "parse"
.IX Subsection "parse"
.Vb 1
\&    $c\->parse($filename)
.Ve
.PP
Parse the given Sphinx configuration file.
.PP
Dies on errors.
.SS "parse_string"
.IX Subsection "parse_string"
.Vb 1
\&    $c\->parse_string( $string );
.Ve
.PP
Parse the Sphinx configuration in the given string.
.PP
Dies on errors.
.SS "config"
.IX Subsection "config"
.Vb 1
\&    $config = $c\->config;
.Ve
.PP
Get the parsed configuration data as an array of hashes, where each entry in the
array represents one section of the configuration, in the order as parsed or
constructed.
.PP
Each section is described by a hash with the following keys:
.IP "\(bu" 4
_type A mandatory key describing the section type (index, searchd etc)
.IP "\(bu" 4
_name The name of the section, where applicable
.IP "\(bu" 4
_inherited The name of the parent section, where applicable
.IP "\(bu" 4
_data A hash containing the name/value pairs which hold the
configuration data for the section.  All values are simple data
elements, except where the same key can appear multiple times in the
configuration file with different values (such as in attribute
declarations), in which case the value is an array ref.
.IP "\(bu" 4
_inherited A hash describing which data values have been inherited
.SS "get"
.IX Subsection "get"
.Vb 2
\&    $value = $c\->get($type, $name, $varname)
\&    $value = $c\->get($type, $name)
.Ve
.PP
Get the value of a configuration parameter.
.PP
If \f(CW$varname\fR is specified, the value of the named parameter from the section
identified by the type and name is returned as a scalar.  Otherwise, the hash containing all key/value pairs from the section is returned.
.PP
\&\f(CW$name\fR may be undef for sections that do not require a name (e.g. searchd,
indexer, search).
.PP
If the section cannot be found or the named parameter does not exist, undef is
returned.
.SS "set"
.IX Subsection "set"
.Vb 4
\&    $c\->set($type, $name, $varname, $value)
\&    $c\->set($type, $name, \e%values)
\&    $c\->set($type, $name, undef(), $base_name)
\&    $c\->set($type, $name, \e%values, $base_name)
.Ve
.PP
Set the value or values of a section in the configuration.
.PP
If varname is given, then the single parameter of that name in the
given section is set to the specified value.  If the value is an
array, multiple entries will be created in the output file for the
same key.
.PP
If a hash of name/value pairs is given, then any existing values are replaced
with the given hash.
.PP
.Vb 1
\&    $c\->set(\*(Aqsource\*(Aq, , $name, \e%values);
.Ve
.PP
If the section does not currently exist, a new one is appended.
.PP
Set \f(CW$name\fR to \f(CW\*(C`undef\*(C'\fR to set variables in an \f(CW\*(C`indexer\*(C'\fR, \f(CW\*(C`searchd\*(C'\fR or
\&\f(CW\*(C`search\*(C'\fR section.
.PP
.Vb 2
\&    $c\->set(\*(Aqindexer\*(Aq, undef, \*(Aqlisten\*(Aq, $port);
\&    $c\->set(\*(Aqsearch\*(Aq, undef, \e%values );
.Ve
.PP
To change the section's inheritance, set \f(CW$value\fR to undef and specify a value
in the 4th parameter.
.PP
.Vb 1
\&    $c\->set(\*(Aqsource\*(Aq, \*(Aqsrc1\*(Aq, undef(), \*(Aqbase2\*(Aq);
.Ve
.PP
You this may be combined with a hash variable :
.PP
.Vb 1
\&    $c\->set(\*(Aqsource\*(Aq, \*(Aqsrc1\*(Aq, \e%values, \*(Aqbase_source\*(Aq);
.Ve
.PP
To delete a name/value pair, set \f(CW$value\fR to undef.
.PP
.Vb 2
\&    $c\->set(\*(Aqsource\*(Aq, \*(Aqsrc1\*(Aq, \*(Aqsql_query_pre\*(Aq, undef());
\&    $c\->set(\*(Aqsource\*(Aq, \*(Aqsrc1\*(Aq, \*(Aqsql_query_pre\*(Aq);
.Ve
.PP
Returns the hash containing the current data values for the given section.
.PP
See preserve_inheritance for a description of how inherited values are handled.
.SS "save"
.IX Subsection "save"
.Vb 2
\&    $c\->save
\&    $c\->save($filename, $comment)
.Ve
.PP
Save the configuration to a file.  The currently opened file is used if not
specified.
.PP
The comment is inserted literally, so each line should begin with '#'.
.PP
See preserve_inheritance for a description of how inherited blocks are handled.
.SS "as_string"
.IX Subsection "as_string"
.Vb 2
\&    $s = $c\->as_string
\&    $s = $c\->as_string($comment)
.Ve
.PP
Returns the configuration as a string, optionally with a comment prepended.
.PP
The comment is inserted literally, so each line should begin with '#'.
.PP
An effort has been made to make the configuration round-trip safe.  That is,
any formating or comments in the original should also appear as-is in the
generated configuration.  New sections are added at the end of the
configuration with an 8 space indent.
.PP
New variables added to existing sections are handled as follows:
.IP "\(bu" 4
If you add a new variable to an existing section, it is added at the end of
the section, using the whitespace of the last existing variable.
.Sp
Given:
.Sp
.Vb 4
\&    index foo {
\&        biff= bof
\&        # ...
\&    }
.Ve
.Sp
and you add \f(CW\*(C`honk\*(C'\fR with the value \f(CW\*(C`bonk\*(C'\fR, you will end up with:
.Sp
.Vb 5
\&    index foo {
\&        biff= bof
\&        # ...
\&        honk= bonk
\&    }
.Ve
.IP "\(bu" 4
If you have a comment that looks a bit like the default or commented out
variable, the new value is added after the comment.
.Sp
Given:
.Sp
.Vb 5
\&    index foo {
\&        ....
\&        # honk=foo
\&        # more details
\&    }
.Ve
.Sp
and you add \f(CW\*(C`honk\*(C'\fR with the value \f(CW\*(C`bonk\*(C'\fR, you will end up with:
.Sp
.Vb 6
\&    index foo {
\&        ....
\&        # honk=foo
\&        honk = bonk
\&        # more details
\&    }
.Ve
.SS "as_string_new"
.IX Subsection "as_string_new"
.Vb 2
\&    $s = $c\->as_string_new
\&    $s = $c\->as_string_new($comment)
.Ve
.PP
Returns the configuration as a string, optionally with a comment prepended,
without attempting to preserve formatting from the original file.
.PP
The comment is inserted literally, so each line should begin with '#'.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Sphinx::Search
.SH "AUTHOR"
.IX Header "AUTHOR"
Jon Schutz, \f(CW\*(C`<jon at jschutz.net>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-sphinx\-config at rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Sphinx\-Config>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Sphinx::Config
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Sphinx\-Config>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Sphinx\-Config>
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Sphinx\-Config>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Sphinx\-Config>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Philip Gwyn contributed the patch to preserve round-trip formatting,
which was a significant chunk of work.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2007 Jon Schutz, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
