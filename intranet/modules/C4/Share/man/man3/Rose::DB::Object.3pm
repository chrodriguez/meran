.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Rose::DB::Object 3"
.TH Rose::DB::Object 3 "2012-04-04" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rose::DB::Object \- Extensible, high performance object\-relational mapper (ORM).
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  ## For an informal overview of Rose::DB::Object, please
\&  ## see the Rose::DB::Object::Tutorial documentation.  The
\&  ## reference documentation follows.
\&
\&  ## First, set up your Rose::DB data sources, otherwise you
\&  ## won\*(Aqt be able to connect to the database at all.  See 
\&  ## the Rose::DB documentation for more information.  For
\&  ## a quick start, see the Rose::DB::Tutorial documentation.
\&
\&  ##
\&  ## Create classes \- two possible approaches:
\&  ##
\&
\&  #
\&  # 1. Automatic configuration
\&  #
\&
\&  package Category;
\&  use base qw(Rose::DB::Object);
\&  _\|_PACKAGE_\|_\->meta\->setup
\&  (
\&    table => \*(Aqcategories\*(Aq,
\&    auto  => 1,
\&  );
\&
\&  ...
\&
\&  package Price;
\&  use base qw(Rose::DB::Object);
\&  _\|_PACKAGE_\|_\->meta\->setup
\&  (
\&    table => \*(Aqprices\*(Aq,
\&    auto  => 1,
\&  );
\&
\&  ...
\&
\&  package Product;
\&  use base qw(Rose::DB::Object);
\&  _\|_PACKAGE_\|_\->meta\->setup
\&  (
\&    table => \*(Aqproducts\*(Aq,
\&    auto  => 1,
\&  );
\&
\&  #
\&  # 2. Manual configuration
\&  #
\&
\&  package Category;
\&
\&  use base qw(Rose::DB::Object);
\&
\&  _\|_PACKAGE_\|_\->meta\->setup
\&  (
\&    table => \*(Aqcategories\*(Aq,
\&
\&    columns =>
\&    [
\&      id          => { type => \*(Aqint\*(Aq, primary_key => 1 },
\&      name        => { type => \*(Aqvarchar\*(Aq, length => 255 },
\&      description => { type => \*(Aqtext\*(Aq },
\&    ],
\&
\&    unique_key => \*(Aqname\*(Aq,
\&  );
\&
\&  ...
\&
\&  package Price;
\&
\&  use base qw(Rose::DB::Object);
\&
\&  _\|_PACKAGE_\|_\->meta\->setup
\&  (
\&    table => \*(Aqprices\*(Aq,
\&
\&    columns =>
\&    [
\&      id         => { type => \*(Aqint\*(Aq, primary_key => 1 },
\&      price      => { type => \*(Aqdecimal\*(Aq },
\&      region     => { type => \*(Aqchar\*(Aq, length => 3 },
\&      product_id => { type => \*(Aqint\*(Aq }
\&    ],
\&
\&    unique_key => [ \*(Aqproduct_id\*(Aq, \*(Aqregion\*(Aq ],
\&  );
\&
\&  ...
\&
\&  package Product;
\&
\&  use base qw(Rose::DB::Object);
\&
\&  _\|_PACKAGE_\|_\->meta\->setup
\&  (
\&    table => \*(Aqproducts\*(Aq,
\&
\&    columns =>
\&    [
\&      id          => { type => \*(Aqint\*(Aq, primary_key => 1 },
\&      name        => { type => \*(Aqvarchar\*(Aq, length => 255 },
\&      description => { type => \*(Aqtext\*(Aq },
\&      category_id => { type => \*(Aqint\*(Aq },
\&
\&      status => 
\&      {
\&        type      => \*(Aqvarchar\*(Aq, 
\&        check_in  => [ \*(Aqactive\*(Aq, \*(Aqinactive\*(Aq ],
\&        default   => \*(Aqinactive\*(Aq,
\&      },
\&
\&      start_date  => { type => \*(Aqdatetime\*(Aq },
\&      end_date    => { type => \*(Aqdatetime\*(Aq },
\&
\&      date_created     => { type => \*(Aqtimestamp\*(Aq, default => \*(Aqnow\*(Aq },  
\&      last_modified    => { type => \*(Aqtimestamp\*(Aq, default => \*(Aqnow\*(Aq },
\&    ],
\&
\&    unique_key => \*(Aqname\*(Aq,
\&
\&    foreign_keys =>
\&    [
\&      category =>
\&      {
\&        class       => \*(AqCategory\*(Aq,
\&        key_columns => { category_id => \*(Aqid\*(Aq },
\&      },
\&    ],
\&
\&    relationships =>
\&    [
\&      prices =>
\&      {
\&        type       => \*(Aqone to many\*(Aq,
\&        class      => \*(AqPrice\*(Aq,
\&        column_map => { id => \*(Aqproduct_id\*(Aq },
\&      },
\&    ],
\&  );
\&
\&  ...
\&
\&  #
\&  # Example usage
\&  #
\&
\&  $product = Product\->new(id          => 123,
\&                          name        => \*(AqGameCube\*(Aq,
\&                          status      => \*(Aqactive\*(Aq,
\&                          start_date  => \*(Aq11/5/2001\*(Aq,
\&                          end_date    => \*(Aq12/1/2007\*(Aq,
\&                          category_id => 5);
\&
\&  $product\->save;
\&
\&  ...
\&
\&  $product = Product\->new(id => 123);
\&  $product\->load;
\&
\&  # Load foreign object via "one to one" relationship
\&  print $product\->category\->name;
\&
\&  $product\->end_date\->add(days => 45);
\&
\&  $product\->save;
\&
\&  ...
\&
\&  $product = Product\->new(id => 456);
\&  $product\->load;
\&
\&  # Load foreign objects via "one to many" relationship
\&  print join \*(Aq \*(Aq, $product\->prices;
\&
\&  ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Rose::DB::Object is a base class for objects that encapsulate a single row in a database table.  Rose::DB::Object\-derived objects are sometimes simply called "Rose::DB::Object objects" in this documentation for the sake of brevity, but be assured that derivation is the only reasonable way to use this class.
.PP
Rose::DB::Object inherits from, and follows the conventions of, Rose::Object.  See the Rose::Object documentation for more information.
.PP
For an informal overview of this module distribution, consult the Rose::DB::Object::Tutorial.
.SS "Restrictions"
.IX Subsection "Restrictions"
Rose::DB::Object objects can represent rows in almost any database table, subject to the following constraints.
.IP "\(bu" 4
The database server must be supported by Rose::DB.
.IP "\(bu" 4
The database table must have a primary key.
.IP "\(bu" 4
The primary key must not allow null values in any of its columns.
.PP
Although the list above contains the only hard and fast rules, there may be other realities that you'll need to work around.
.PP
The most common example is the existence of a column name in the database table that conflicts with the name of a method in the Rose::DB::Object \s-1API\s0.  There are two possible workarounds: either explicitly alias the column, or define a mapping function.  See the alias_column and column_name_to_method_name_mapper methods in the Rose::DB::Object::Metadata documentation for more details.
.PP
There are also varying degrees of support for data types in each database server supported by Rose::DB.  If you have a table that uses a data type not supported by an existing Rose::DB::Object::Metadata::Column\-derived class, you will have to write your own column class and then map it to a type name using Rose::DB::Object::Metadata's column_type_class method, yada yada.  (Or, of course, you can map the new type to an existing column class.)
.PP
The entire framework is extensible.  This module distribution contains straight-forward implementations of the most common column types, but there's certainly more that can be done.  Submissions are welcome.
.SS "Features"
.IX Subsection "Features"
Rose::DB::Object provides the following functions:
.IP "\(bu" 4
Create a row in the database by saving a newly constructed object.
.IP "\(bu" 4
Initialize an object by loading a row from the database.
.IP "\(bu" 4
Update a row by saving a modified object back to the database.
.IP "\(bu" 4
Delete a row from the database.
.IP "\(bu" 4
Fetch an object referred to by a foreign key in the current object. (i.e., \*(L"one to one\*(R" and \*(L"many to one\*(R" relationships.)
.IP "\(bu" 4
Fetch multiple objects that refer to the current object, either directly through foreign keys or indirectly through a mapping table.  (i.e., \*(L"one to many\*(R" and \*(L"many to many\*(R" relationships.)
.IP "\(bu" 4
Load an object along with \*(L"foreign objects\*(R" that are related through any of the supported relationship types.
.PP
Objects can be loaded based on either a primary key or a unique key.  Since all tables fronted by Rose::DB::Objects must have non-null primary keys, insert, update, and delete operations are done based on the primary key.
.PP
In addition, its sibling class, Rose::DB::Object::Manager, can do the following:
.IP "\(bu" 4
Fetch multiple objects from the database using arbitrary query conditions, limits, and offsets.
.IP "\(bu" 4
Iterate over a list of objects, fetching from the database in response to each step of the iterator.
.IP "\(bu" 4
Fetch objects along with \*(L"foreign objects\*(R" (related through any of the supported relationship types) in a single query by automatically generating the appropriate \s-1SQL\s0 join(s).
.IP "\(bu" 4
Count the number of objects that match a complex query.
.IP "\(bu" 4
Update objects that match a complex query.
.IP "\(bu" 4
Delete objects that match a complex query.
.PP
Rose::DB::Object::Manager can be subclassed and used separately (the recommended approach), or it can create object manager methods within a Rose::DB::Object subclass.  See the Rose::DB::Object::Manager documentation for more information.
.PP
Rose::DB::Object can parse, coerce, inflate, and deflate column values on your behalf, providing the most convenient possible data representations on the Perl side of the fence, while allowing the programmer to completely forget about the ugly details of the data formats required by the database.  Default implementations are included for most common column types, and the framework is completely extensible.
.PP
Finally, the Rose::DB::Object::Loader can be used to automatically create a suite of Rose::DB::Object and Rose::DB::Object::Manager subclasses based on the contents of the database.
.SS "Configuration"
.IX Subsection "Configuration"
Before Rose::DB::Object can do any useful work, you must register at least one Rose::DB data source.  By default, Rose::DB::Object instantiates a Rose::DB object by passing no arguments to its constructor.  (See the db method.)  If you register a Rose::DB data source using the default type and domain, this will work fine.  Otherwise, you must override the meta method in your Rose::DB::Object subclass and have it return the appropriate Rose::DB\-derived object.
.PP
To define your own Rose::DB::Object\-derived class, you must describe the table that your class will act as a front-end for.    This is done through the Rose::DB::Object::Metadata object associated with each Rose::DB::Object\-dervied class.  The metadata object is accessible via Rose::DB::Object's meta method.
.PP
Metadata objects can be populated manually or automatically.  Both techniques are shown in the synopsis above.  The automatic mode works by asking the database itself for the information.  There are some caveats to this approach.  See the auto-initialization section of the Rose::DB::Object::Metadata documentation for more information.
.SS "Serial and Auto-Incremented Columns"
.IX Subsection "Serial and Auto-Incremented Columns"
Most databases provide a way to use a series of arbitrary integers as primary key column values.  Some support a native \f(CW\*(C`SERIAL\*(C'\fR column data type.  Others use a special auto-increment column attribute.
.PP
Rose::DB::Object supports at least one such serial or auto-incremented column type in each supported database.  In all cases, the Rose::DB::Object\-derived class setup is the same:
.PP
.Vb 11
\&    package My::DB::Object;
\&    ...
\&    _\|_PACKAGE_\|_\->meta\->setup
\&    (
\&      columns =>
\&      [
\&        id => { type => \*(Aqserial\*(Aq, primary_key => 1, not_null => 1 },
\&        ...
\&      ],
\&      ...
\&    );
.Ve
.PP
(Note that the column doesn't have to be named \*(L"id\*(R"; it can be named anything.)
.PP
If the database column uses big integers, use "bigserial" column \f(CW\*(C`type\*(C'\fR instead.
.PP
Given the column metadata definition above, Rose::DB::Object will automatically generate and/or retrieve the primary key column value when an object is \fIsave()\fRd.  Example:
.PP
.Vb 2
\&    $o = My::DB::Object\->new(name => \*(Aqbud\*(Aq); # no id specified
\&    $o\->save; # new id value generated here
\&
\&    print "Generated new id value: ", $o\->id;
.Ve
.PP
This will only work, however, if the corresponding column definition in the database is set up correctly.  The exact technique varies from vendor to vendor.  Below are examples of primary key column definitions that provide auto-generated values.  There's one example for each of the databases supported by Rose::DB.
.IP "\(bu" 4
PostgreSQL
.Sp
.Vb 5
\&    CREATE TABLE mytable
\&    (
\&      id   SERIAL PRIMARY KEY,
\&      ...
\&    );
.Ve
.IP "\(bu" 4
MySQL
.Sp
.Vb 5
\&    CREATE TABLE mytable
\&    (
\&      id   INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
\&      ...
\&    );
.Ve
.IP "\(bu" 4
SQLite
.Sp
.Vb 5
\&    CREATE TABLE mytable
\&    (
\&      id   INTEGER PRIMARY KEY AUTOINCREMENT,
\&      ...
\&    );
.Ve
.IP "\(bu" 4
Informix
.Sp
.Vb 5
\&    CREATE TABLE mytable
\&    (
\&      id   SERIAL NOT NULL PRIMARY KEY,
\&      ...
\&    );
.Ve
.IP "\(bu" 4
Oracle
.Sp
Since Oracle does not natively support a serial or auto-incremented column data type, an explicit sequence and trigger must be created to simulate the behavior.  The sequence should be named according to this convention: \f(CW\*(C`<table>_<column>_seq\*(C'\fR.  For example, if the table is named \f(CW\*(C`mytable\*(C'\fR and the column is named \f(CW\*(C`id\*(C'\fR, then the sequence should be named \f(CW\*(C`mytable_id_seq\*(C'\fR.  Here's an example database setup.
.Sp
.Vb 5
\&    CREATE TABLE mytable
\&    (
\&      id   INT NOT NULL PRIMARY KEY,
\&      ...
\&    );
\&
\&    CREATE SEQUENCE mytable_id_seq;
\&
\&    CREATE TRIGGER mytable_insert BEFORE INSERT ON mytable
\&    FOR EACH ROW
\&    BEGIN
\&        SELECT NVL(:new.id, mytable_id_seq.nextval) 
\&          INTO :new.id FROM dual;
\&    END;
.Ve
.Sp
Note the use of \f(CW\*(C`NVL()\*(C'\fR in the trigger, which allows the value of the \f(CW\*(C`id\*(C'\fR column to be set explicitly.  If a non-NULL value for the \f(CW\*(C`id\*(C'\fR column is provided, then a new value is not pulled from the sequence.
.Sp
If the sequence is not named according to the \f(CW\*(C`<table>_<column>_seq\*(C'\fR convention, you can specify the sequence name explicitly in the column metadata.  Example:
.Sp
.Vb 5
\&    columns =>
\&    [
\&      id => { type => \*(Aqserial\*(Aq, primary_key => 1, not_null => 1,
\&              sequence => \*(Aqsome_other_seq\*(Aq },
\&      ...
.Ve
.PP
If the table has a multi-column primary key or does not use a column type that supports auto-generated values, you can define a custom primary key generator function using the primary_key_generator method of the Rose::DB::Object::Metadata\-derived object that contains the metadata for this class.  Example:
.PP
.Vb 1
\&    package MyDBObject;
\&
\&    use base qw(Rose::DB::Object);
\&
\&    _\|_PACKAGE_\|_\->meta\->setup
\&    (
\&      table => \*(Aqmytable\*(Aq,
\&
\&      columns =>
\&      [
\&        k1   => { type => \*(Aqint\*(Aq, not_null => 1 },
\&        k2   => { type => \*(Aqint\*(Aq, not_null => 1 },
\&        name => { type => \*(Aqvarchar\*(Aq, length => 255 },
\&        ...
\&      ],
\&
\&      primary_key_columns => [ \*(Aqk1\*(Aq, \*(Aqk2\*(Aq ],
\&
\&      primary_key_generator => sub
\&      {
\&        my($meta, $db) = @_;
\&
\&        # Generate primary key values somehow
\&        my $k1 = ...;
\&        my $k2 = ...;
\&
\&        return $k1, $k2;
\&      },
\&    );
.Ve
.PP
See the Rose::DB::Object::Metadata documentation for more information on custom primary key generators.
.SS "Inheritance"
.IX Subsection "Inheritance"
Simple, single inheritance between Rose::DB::Object\-derived classes is supported.  (Multiple inheritance is not currently supported.)  The first time the metadata object for a given class is accessed, it is created by making a one-time \*(L"deep copy\*(R" of the base class's metadata object (as long that the base class has one or more columns set).  This includes all columns, relationships, foreign keys, and other metadata from the base class.  From that point on, the subclass may add to or modify its metadata without affecting any other class.
.PP
\&\fBTip:\fR When using perl 5.8.0 or later, the Scalar::Util::Clone module is highly recommended.  If it's installed, it will be used to more efficiently clone base-class metadata objects.
.PP
If the base class has already been initialized, the subclass must explicitly specify whether it wants to create a new set of column and relationship methods, or merely inherit the methods from the base class.  If the subclass contains any metadata modifications that affect method creation, then it must create a new set of methods to reflect those changes.
.PP
Finally, note that column types cannot be changed \*(L"in-place.\*(R"  To change a column type, delete the old column and add a new one with the same name.  This can be done in one step with the replace_column method.
.PP
Example:
.PP
.Vb 2
\&  package BaseClass;
\&  use base \*(AqRose::DB::Object\*(Aq;
\&
\&  _\|_PACKAGE_\|_\->meta\->setup
\&  (
\&    table => \*(Aqobjects\*(Aq,
\&
\&    columns =>
\&    [
\&      id    => { type => \*(Aqint\*(Aq, primary_key => 1 },
\&      start => { type => \*(Aqscalar\*(Aq },
\&    ],
\&  );
\&
\&  ...
\&
\&  package SubClass;
\&  use base \*(AqBaseClass\*(Aq;
\&
\&  # Set a default value for this column.
\&  _\|_PACKAGE_\|_\->meta\->column(\*(Aqid\*(Aq)\->default(123);
\&
\&  # Change the "start" column into a datetime column.
\&  _\|_PACKAGE_\|_\->meta\->replace_column(start => { type => \*(Aqdatetime\*(Aq });
\&
\&  # Initialize, replacing any inherited methods with newly created ones
\&  _\|_PACKAGE_\|_\->meta\->initialize(replace_existing => 1);
\&
\&  ...
\&
\&  $b = BaseClass\->new;
\&
\&  $id = $b\->id; # undef
\&
\&  $b\->start(\*(Aq1/2/2003\*(Aq);
\&  print $b\->start; # \*(Aq1/2/2003\*(Aq (plain string)
\&
\&
\&  $s = SubClass\->new;
\&
\&  $id = $s\->id; # 123
\&
\&  $b\->start(\*(Aq1/2/2003\*(Aq); # Value is converted to a DateTime object
\&  print $b\->start\->strftime(\*(Aq%B\*(Aq); # \*(AqJanuary\*(Aq
.Ve
.PP
To preserve all inherited methods in a subclass, do this instead:
.PP
.Vb 3
\&  package SubClass;
\&  use base \*(AqBaseClass\*(Aq;
\&  _\|_PACKAGE_\|_\->meta\->initialize(preserve_existing => 1);
.Ve
.SS "Error Handling"
.IX Subsection "Error Handling"
Error handling for Rose::DB::Object\-derived objects is controlled by the error_mode method of the Rose::DB::Object::Metadata object associated with the class (accessible via the meta method).  The default setting is \*(L"fatal\*(R", which means that Rose::DB::Object methods will croak if they encounter an error.
.PP
\&\fB\s-1PLEASE\s0 \s-1NOTE:\s0\fR The error return values described in the object method documentation are only relevant when the error mode is set to something \*(L"non-fatal.\*(R"  In other words, if an error occurs, you'll never see any of those return values if the selected error mode dies or croaks or otherwise throws an exception when an error occurs.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "\fBnew \s-1PARAMS\s0\fR" 4
.IX Item "new PARAMS"
Returns a new Rose::DB::Object constructed according to \s-1PARAMS\s0, where \s-1PARAMS\s0 are name/value pairs.  Any object method is a valid parameter name.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.IP "\fBinit_db\fR" 4
.IX Item "init_db"
Returns the Rose::DB\-derived object used to access the database in the absence of an explicit db value.  The default implementation simply calls Rose::DB\->\fInew()\fR with no arguments.
.Sp
Override this method in your subclass in order to use a different default data source.  \fBNote:\fR This method must be callable as both an object method and a class method.
.IP "\fBmeta\fR" 4
.IX Item "meta"
Returns the Rose::DB::Object::Metadata\-derived object associated with this class.  This object describes the database table whose rows are fronted by this class: the name of the table, its columns, unique keys, foreign keys, etc.
.Sp
See the Rose::DB::Object::Metadata documentation for more information.
.IP "\fBmeta_class\fR" 4
.IX Item "meta_class"
Return the name of the Rose::DB::Object::Metadata\-derived class used to store this object's metadata.  Subclasses should override this method if they want to use a custom Rose::DB::Object::Metadata subclass.  (See the source code for Rose::DB::Object::Std for an example of this.)
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
.IP "\fBdb [\s-1DB\s0]\fR" 4
.IX Item "db [DB]"
Get or set the Rose::DB object used to access the database that contains the table whose rows are fronted by the Rose::DB::Object\-derived class.
.Sp
If it does not already exist, this object is created with a simple, argument-less call to \f(CW\*(C`Rose::DB\->new()\*(C'\fR.  To override this default in a subclass, override the init_db method and return the Rose::DB to be used as the new default.
.IP "\fBinit_db\fR" 4
.IX Item "init_db"
Returns the Rose::DB\-derived object used to access the database in the absence of an explicit db value.  The default implementation simply calls Rose::DB\->\fInew()\fR with no arguments.
.Sp
Override this method in your subclass in order to use a different default data source.  \fBNote:\fR This method must be callable as both an object method and a class method.
.IP "\fBdbh [\s-1DBH\s0]\fR" 4
.IX Item "dbh [DBH]"
Get or set the \s-1DBI\s0 database handle contained in db.
.IP "\fBdelete [\s-1PARAMS\s0]\fR" 4
.IX Item "delete [PARAMS]"
Delete the row represented by the current object.  The object must have been previously loaded from the database (or must otherwise have a defined primary key value) in order to be deleted.  Returns true if the row was deleted or did not exist, false otherwise.
.Sp
\&\s-1PARAMS\s0 are optional name/value pairs.  Valid \s-1PARAMS\s0 are:
.RS 4
.IP "\fBcascade \s-1TYPE\s0\fR" 4
.IX Item "cascade TYPE"
Also process related rows.  \s-1TYPE\s0 must be \*(L"delete\*(R", \*(L"null\*(R", or \*(L"1\*(R".  The value \*(L"1\*(R" is an alias for \*(L"delete\*(R".  Passing an illegal \s-1TYPE\s0 value will cause a fatal error.
.Sp
For each \*(L"one to many\*(R" relationship, all of the rows in the foreign (\*(L"many\*(R") table that reference the current object (\*(L"one\*(R") will be deleted in \*(L"delete\*(R" mode, or will have the column(s) that reference the current object set to \s-1NULL\s0 in \*(L"null\*(R" mode.
.Sp
For each \*(L"many to many\*(R" relationship, all of the rows in the \*(L"mapping table\*(R" that reference the current object will deleted in \*(L"delete\*(R" mode, or will have the columns that reference the two tables that the mapping table maps between set to \s-1NULL\s0 in \*(L"null\*(R" mode.
.Sp
For each \*(L"one to one\*(R" relationship or foreign key with a \*(L"one to one\*(R" relationship type, all of the rows in the foreign table that reference the current object will deleted in \*(L"delete\*(R" mode, or will have the column(s) that reference the current object set to \s-1NULL\s0 in \*(L"null\*(R" mode.
.Sp
In all modes, if the db is not currently in a transaction, a new transaction is started.  If any part of the cascaded delete fails, the transaction is rolled back.
.IP "\fBprepare_cached \s-1BOOL\s0\fR" 4
.IX Item "prepare_cached BOOL"
If true, then \s-1DBI\s0's prepare_cached method will be used (instead of the prepare method) when preparing the \s-1SQL\s0 statement that will delete the object.  If omitted, the default value is determined by the metadata object's dbi_prepare_cached class method.
.RE
.RS 4
.Sp
The cascaded delete feature described above plays it safe by only deleting rows that are not referenced by any other rows (according to the metadata provided by each Rose::DB::Object\-derived class).  I \fBstrongly recommend\fR that you implement \*(L"cascaded delete\*(R" in the database itself, rather than using this feature.  It will undoubtedly be faster and more robust than doing it \*(L"client-side.\*(R"  You may also want to cascade only to certain tables, or otherwise deviate from the \*(L"safe\*(R" plan.  If your database supports automatic cascaded delete and/or triggers, please consider using thse features.
.RE
.IP "\fBerror\fR" 4
.IX Item "error"
Returns the text message associated with the last error that occurred.
.IP "\fBinsert [\s-1PARAMS\s0]\fR" 4
.IX Item "insert [PARAMS]"
Insert the current object to the database table.  This method should only be used when you're absolutely sure that you want to \fBforce\fR the current object to be inserted, rather than updated.  It is recommended that you use the save method instead of this one in most circumstances.  The save method will \*(L"do the right thing,\*(R" executing an insert or update as appropriate for the current situation.
.Sp
\&\s-1PARAMS\s0 are optional name/value pairs.  Valid \s-1PARAMS\s0 are:
.RS 4
.IP "\fBchanges_only \s-1BOOL\s0\fR" 4
.IX Item "changes_only BOOL"
If true, then only the columns whose values have been modified will be included in the insert query.  Otherwise, all columns will be included.  Note that any column that has a default value set in its column metadata is considered \*(L"modified\*(R" during an insert operation.
.Sp
If omitted, the default value of this parameter is determined by the metadata object's default_insert_changes_only class method, which returns false by default.
.IP "\fBprepare_cached \s-1BOOL\s0\fR" 4
.IX Item "prepare_cached BOOL"
If true, then \s-1DBI\s0's prepare_cached method will be used (instead of the prepare method) when preparing the \s-1SQL\s0 statement that will insert the object.  If omitted, the default value is determined by the metadata object's dbi_prepare_cached class method.
.RE
.RS 4
.Sp
Returns true if the row was inserted successfully, false otherwise.  The true value returned on success will be the object itself.  If the object overloads its boolean value such that it is not true, then a true value will be returned instead of the object itself.
.RE
.IP "\fBload [\s-1PARAMS\s0]\fR" 4
.IX Item "load [PARAMS]"
Load a row from the database table, initializing the object with the values from that row.  An object can be loaded based on either a primary key or a unique key.
.Sp
Returns true if the row was loaded successfully, undef if the row could not be loaded due to an error, or zero (0) if the row does not exist.  The true value returned on success will be the object itself.  If the object overloads its boolean value such that it is not true, then a true value will be returned instead of the object itself.
.Sp
When loading based on a unique key, unique keys are considered in the order in which they were defined in the metadata for this class.  If the object has defined values for every column in a unique key, then that key is used.  If no such key is found, then the first key for which the object has at least one defined value is used.
.Sp
\&\s-1PARAMS\s0 are optional name/value pairs.  Valid \s-1PARAMS\s0 are:
.RS 4
.IP "\fBfor_update \s-1BOOL\s0\fR" 4
.IX Item "for_update BOOL"
If true, this parameter is translated to be the equivalent of passing the lock parameter and setting the \f(CW\*(C`type\*(C'\fR to \f(CW\*(C`for update\*(C'\fR.  For example, these are both equivalent:
.Sp
.Vb 2
\&    $object\->load(for_update => 1);
\&    $object\->load(lock => { type => \*(Aqfor update\*(Aq });
.Ve
.Sp
See the lock parameter below for more information.
.IP "\fBlock [ \s-1TYPE\s0 | \s-1HASHREF\s0 ]\fR" 4
.IX Item "lock [ TYPE | HASHREF ]"
Load the object using some form of locking.  These lock directives have database-specific behavior and not all directives are supported by all databases.  The value should be a reference to a hash or a \s-1TYPE\s0 string, which is equivalent to setting the value of the \f(CW\*(C`type\*(C'\fR key in the hash reference form.  For example, these are both equivalent:
.Sp
.Vb 2
\&    $object\->load(lock => \*(Aqfor update\*(Aq);
\&    $object\->load(lock => { type => \*(Aqfor update\*(Aq });
.Ve
.Sp
Valid hash keys are:
.RS 4
.IP "\fBcolumns \s-1ARRAYREF\s0\fR" 4
.IX Item "columns ARRAYREF"
A reference to an array of column names to lock.  References to scalars will be de-referenced and used as-is, included literally in the \s-1SQL\s0 locking clause.
.ie n .IP """nowait BOOL""" 4
.el .IP "\f(CWnowait BOOL\fR" 4
.IX Item "nowait BOOL"
If true, do not wait to acquire the lock.    If supported, this is usually by adding a \f(CW\*(C`NOWAIT\*(C'\fR directive to the \s-1SQL\s0.
.ie n .IP """type TYPE""" 4
.el .IP "\f(CWtype TYPE\fR" 4
.IX Item "type TYPE"
The lock type.  Valid values for \s-1TYPE\s0 are \f(CW\*(C`for update\*(C'\fR and \f(CW\*(C`shared\*(C'\fR.  This parameter is required unless the for_update parameter was passed with a true value.
.ie n .IP """wait TIME""" 4
.el .IP "\f(CWwait TIME\fR" 4
.IX Item "wait TIME"
Wait for the specified \s-1TIME\s0 (generally seconds) before giving up acquiring the lock.  If supported, this is usually by adding a \f(CW\*(C`WAIT ...\*(C'\fR clause to the \s-1SQL\s0.
.RE
.RS 4
.RE
.IP "\fBnonlazy \s-1BOOL\s0\fR" 4
.IX Item "nonlazy BOOL"
If true, then all columns will be fetched from the database, even lazy columns.  If omitted, the default is false.
.IP "\fBprepare_cached \s-1BOOL\s0\fR" 4
.IX Item "prepare_cached BOOL"
If true, then \s-1DBI\s0's prepare_cached method will be used (instead of the prepare method) when preparing the \s-1SQL\s0 query that will load the object.  If omitted, the default value is determined by the metadata object's dbi_prepare_cached class method.
.IP "\fBspeculative \s-1BOOL\s0\fR" 4
.IX Item "speculative BOOL"
If this parameter is passed with a true value, and if the load failed because the row was not found, then the error_mode setting is ignored and zero (0) is returned.  In the absence of an explicitly set value, this parameter defaults to the value returned my the metadata object's default_load_speculative method.
.IP "\fBuse_key \s-1KEY\s0\fR" 4
.IX Item "use_key KEY"
Use the unique key named \s-1KEY\s0 to load the object.  This overrides the unique key selection process described above.  The key must have a defined value in at least one of its columns.
.IP "\fBwith \s-1OBJECTS\s0\fR" 4
.IX Item "with OBJECTS"
Load the object and the specified \*(L"foreign objects\*(R" simultaneously.  \s-1OBJECTS\s0 should be a reference to an array of foreign key or relationship names.
.RE
.RS 4
.Sp
\&\fB\s-1SUBCLASS\s0 \s-1NOTE:\s0\fR If you are going to override the load method in your subclass, you \fImust\fR pass an \fIalias to the actual object\fR as the first argument to the method, rather than passing a copy of the object reference.  Example:
.Sp
.Vb 5
\&    # This is the CORRECT way to override load() while still
\&    # calling the base class version of the method.
\&    sub load
\&    {
\&      my $self = $_[0]; # Copy, not shift
\&
\&      ... # Do your stuff
\&
\&      shift\->SUPER::load(@_); # Call superclass
\&    }
.Ve
.Sp
Now here's the wrong way:
.Sp
.Vb 5
\&    # This is the WRONG way to override load() while still
\&    # calling the base class version of the method.
\&    sub load
\&    {
\&      my $self = shift; # WRONG! The alias to the object is now lost!
\&
\&      ... # Do your stuff
\&
\&      $self\->SUPER::load(@_); # This won\*(Aqt work right!
\&    }
.Ve
.Sp
This requirement exists in order to preserve some sneaky object-replacement optimizations in the base class implementation of load.  At some point, those optimizations may change or go away.  But if you follow these guidelines, your code will continue to work no matter what.
.RE
.IP "\fBnot_found\fR" 4
.IX Item "not_found"
Returns true if the previous call to load failed because a row in the database table with the specified primary or unique key did not exist, false otherwise.
.IP "\fBmeta\fR" 4
.IX Item "meta"
Returns the Rose::DB::Object::Metadata object associated with this class.  This object describes the database table whose rows are fronted by this class: the name of the table, its columns, unique keys, foreign keys, etc.
.Sp
See the Rose::DB::Object::Metadata documentation for more information.
.IP "\fBsave [\s-1PARAMS\s0]\fR" 4
.IX Item "save [PARAMS]"
Save the current object to the database table.  In the absence of \s-1PARAMS\s0, if the object was previously loaded from the database, the row will be updated.  Otherwise, a new row will be inserted.  \s-1PARAMS\s0 are name/value pairs.  Valid \s-1PARAMS\s0 are listed below.
.Sp
Actions associated with sub-objects that were added or deleted using one of the \*(L"*_on_save\*(R" relationship or foreign key method types are also performed when this method is called.  If there are any such actions to perform, a new transaction is started if the db is not already in one, and \fIrollback()\fR is called if any of the actions fail during the \fIsave()\fR.  Example:
.Sp
.Vb 2
\&    $product = Product\->new(name => \*(AqSled\*(Aq);
\&    $vendor  = Vendor\->new(name => \*(AqAcme\*(Aq);  
\&
\&    $product\->vendor($vendor);
\&
\&    # Product and vendor records created and linked together,
\&    # all within a single transaction.
\&    $product\->save;
.Ve
.Sp
See the \*(L"making methods\*(R" sections of the Rose::DB::Object::Metadata::Relationship and Rose::DB::Object::Metadata::ForeignKey documentation for a description of the \*(L"method map\*(R" associated with each relationship and foreign key.  Only the actions initiated through one of the \*(L"*_on_save\*(R" method types are handled when \fIsave()\fR is called.  See the documentation for each individual \*(L"*_on_save\*(R" method type for more specific information.
.Sp
Valid parameters to \fIsave()\fR are:
.RS 4
.IP "\fBcascade \s-1BOOL\s0\fR" 4
.IX Item "cascade BOOL"
If true, then sub-objects related to this object through a foreign key or relationship that have been previously loaded using methods called on this object and that contain unsaved changes will be saved after the parent object is saved.  This proceeds recursively through all sub-objects.  (All other parameters to the original call to save are also passed on when saving sub-objects.)
.Sp
All database operations are done within a single transaction.  If the db is not currently in a transaction, a new transaction is started.  If any part of the cascaded save fails, the transaction is rolled back.
.Sp
If omitted, the default value of this parameter is determined by the metadata object's default_cascade_save class method, which returns false by default.
.Sp
Example:
.Sp
.Vb 1
\&    $p = Product\->new(id => 123)\->load;
\&
\&    print join(\*(Aq, \*(Aq, $p\->colors); # related Color objects loaded
\&    $p\->colors\->[0]\->code(\*(Aqzzz\*(Aq); # one Color object is modified
\&
\&    # The Product object and the modified Color object are saved
\&    $p\->save(cascade => 1);
.Ve
.IP "\fBchanges_only \s-1BOOL\s0\fR" 4
.IX Item "changes_only BOOL"
If true, then only the columns whose values have been modified will be included in the insert or update query.  Otherwise, all eligible columns will be included.  Note that any column that has a default value set in its column metadata is considered \*(L"modified\*(R" during an insert operation.
.Sp
If omitted, the default value of this parameter is determined by the metadata object's default_update_changes_only class method on update, and the default_insert_changes_only class method on insert, both of which return false by default.
.IP "\fBinsert \s-1BOOL\s0\fR" 4
.IX Item "insert BOOL"
If set to a true value, then an insert is attempted, regardless of whether or not the object was previously loaded from the database.
.IP "\fBprepare_cached \s-1BOOL\s0\fR" 4
.IX Item "prepare_cached BOOL"
If true, then \s-1DBI\s0's prepare_cached method will be used (instead of the prepare method) when preparing the \s-1SQL\s0 statement that will save the object.  If omitted, the default value is determined by the metadata object's dbi_prepare_cached class method.
.IP "\fBupdate \s-1BOOL\s0\fR" 4
.IX Item "update BOOL"
If set to a true value, then an update is attempted, regardless of whether or not the object was previously loaded from the database.
.RE
.RS 4
.Sp
It is an error to pass both the \f(CW\*(C`insert\*(C'\fR and \f(CW\*(C`update\*(C'\fR parameters in a single call.
.Sp
Returns true if the row was inserted or updated successfully, false otherwise.  The true value returned on success will be the object itself.  If the object overloads its boolean value such that it is not true, then a true value will be returned instead of the object itself.
.Sp
If an insert was performed and the primary key is a single column that supports auto-generated values, then the object accessor for the primary key column will contain the auto-generated value.  See the Serial and Auto-Incremented Columns section for more information.
.RE
.IP "\fBupdate [\s-1PARAMS\s0]\fR" 4
.IX Item "update [PARAMS]"
Update the current object in the database table.  This method should only be used when you're absolutely sure that you want to \fBforce\fR the current object to be updated, rather than inserted.  It is recommended that you use the save method instead of this one in most circumstances.  The save method will \*(L"do the right thing,\*(R" executing an insert or update as appropriate for the current situation.
.Sp
\&\s-1PARAMS\s0 are optional name/value pairs.  Valid \s-1PARAMS\s0 are:
.RS 4
.IP "\fBchanges_only \s-1BOOL\s0\fR" 4
.IX Item "changes_only BOOL"
If true, then only the columns whose values have been modified will be updated.  Otherwise, all columns whose values have been loaded from the database will be updated.  If omitted, the default value of this parameter is determined by the metadata object's default_update_changes_only class method, which returns false by default.
.IP "\fBprepare_cached \s-1BOOL\s0\fR" 4
.IX Item "prepare_cached BOOL"
If true, then \s-1DBI\s0's prepare_cached method will be used (instead of the prepare method) when preparing the \s-1SQL\s0 statement that will insert the object.  If omitted, the default value of this parameter is determined by the metadata object's dbi_prepare_cached class method.
.RE
.RS 4
.Sp
Returns true if the row was updated successfully, false otherwise.  The true value returned on success will be the object itself.  If the object overloads its boolean value such that it is not true, then a true value will be returned instead of the object itself.
.RE
.SH "RESERVED METHODS"
.IX Header "RESERVED METHODS"
As described in the Rose::DB::Object::Metadata documentation, each column in the database table has an associated get/set accessor method in the Rose::DB::Object.  Since the Rose::DB::Object \s-1API\s0 already defines many methods (load, save, meta, etc.), accessor methods for columns that share the name of an existing method pose a problem.  The solution is to alias such columns using Rose::DB::Object::Metadata's  alias_column method.
.PP
Here is a list of method names reserved by the Rose::DB::Object \s-1API\s0.  If you have a column with one of these names, you must alias it.
.PP
.Vb 10
\&    db
\&    dbh
\&    delete
\&    DESTROY
\&    error
\&    init_db
\&    _init_db
\&    insert
\&    load
\&    meta
\&    meta_class
\&    not_found
\&    save
\&    update
.Ve
.PP
Note that not all of these methods are public.  These methods do not suddenly become public just because you now know their names!  Remember the stated policy of the Rose web application framework: if a method is not documented, it does not exist.  (And no, the list of method names above does not constitute \*(L"documentation.\*(R")
.SH "DEVELOPMENT POLICY"
.IX Header "DEVELOPMENT POLICY"
The Rose development policy applies to this, and all \f(CW\*(C`Rose::*\*(C'\fR modules.  Please install Rose from \s-1CPAN\s0 and then run "\f(CW\*(C`perldoc Rose\*(C'\fR" for more information.
.SH "SUPPORT"
.IX Header "SUPPORT"
For an informal overview of Rose::DB::Object, consult the Rose::DB::Object::Tutorial.
.PP
.Vb 1
\&    perldoc Rose::DB::Object::Tutorial
.Ve
.PP
Any Rose::DB::Object questions or problems can be posted to the Rose::DB::Object mailing list.  To subscribe to the list or view the archives, go here:
.PP
<http://groups.google.com/group/rose\-db\-object>
.PP
Although the mailing list is the preferred support mechanism, you can also email the author (see below) or file bugs using the \s-1CPAN\s0 bug tracking system:
.PP
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Rose\-DB\-Object>
.PP
There's also a wiki and other resources linked from the Rose project home page:
.PP
<http://rose.googlecode.com>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Bradley C Bailey, Graham Barr, Kostas Chatzikokolakis, David Christensen, Lucian Dragus, Justin Ellison, Perrin Harkins, Cees Hek, Benjamin Hitz, Dave Howorth, Peter Karman, Ed Loehr, Adam Mackler, Michael Reece, Thomas Whaples, Douglas Wilson, Teodor Zlatanov
.SH "AUTHOR"
.IX Header "AUTHOR"
John C. Siracusa (siracusa@gmail.com)
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 2010 by John C. Siracusa.  All rights reserved.  This program is
free software; you can redistribute it and/or modify it under the same terms
as Perl itself.
