.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::HTMLDoc 3"
.TH HTML::HTMLDoc 3 "2005-10-26" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::HTMLDoc \- Perl interface to the htmldoc program for producing PDF\-Files from HTML\-Content
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use HTML::HTMLDoc;
\&
\&  my $htmldoc = new HTML::HTMLDoc();
\&
\&  $htmldoc\->set_html_content(qq~<html><body>A PDF file</body></html>~);
\&  # $htmldoc\->set_input_file($filename); # alternative to use a present file from your fs
\&
\&  my $pdf = $htmldoc\->generate_pdf();
\&
\&  print $pdf\->to_string();
\&  $pdf\->to_file(\*(Aqfoo.pdf\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This Module provides an OO-interface to the htmldoc programm. To install this module you
have to install the htmldoc program first. You can get it from http://www.htmldoc.org .
.PP
You can use it to produce \s-1PDF\s0 or \s-1PS\s0 files from a HTML-document. Currently many but not all
parameters of HTMLDoc are supported.
.PP
You need to have HTMLDoc installed before installing this module.
.PP
All the pdf-Methods return true for success or false for failure. You can test if errors
occurred by calling the error-method.
.PP
Normaly this module uses IPC::Open3 for communacation with the \s-1HTMLDOC\s0 process. However,
in mod_perl\-environments there appear problems with this module because the standard-output can not
be captured. For this problem this module provides a fix doing the communication in file-mode.
.PP
For this you can specify the parameter mode in the constructor:
my \f(CW$htmldoc\fR = new HTMLDoc('mode'=>'file', 'tmpdir'=>'/tmp');
.SH "METHODS"
.IX Header "METHODS"
.SS "\fInew()\fP"
.IX Subsection "new()"
creates a new Instance of HTML::HTMLDoc.
.PP
Optional parameters are:
mode=>['file'|'ipc'] defaults to ipc
tmpdir=>$dir defaults to /tmp
.PP
The tmpdir is used for temporary html-files in filemode. Remember to set the file-permissions
to write for the executing process.
.SS "set_page_size($size)"
.IX Subsection "set_page_size($size)"
sets the desired size of the pages in the resulting PDF-document. \f(CW$size\fR is one of:
.IP "\(bu" 4
a4 (default)
.IP "\(bu" 4
letter
.IP "\(bu" 4
WxH{in,cm,mm} eg '10x10cm'
.SS "set_owner_password($password)"
.IX Subsection "set_owner_password($password)"
sets the owner-password for this document. \f(CW$password\fR can be any string. This only has effect if encryption is enabled.
see \fIenable_encryption()\fR.
.SS "set_user_password($password)"
.IX Subsection "set_user_password($password)"
sets the user-password for this document. \f(CW$password\fR can be any string. If set, User will be asked for this
password when opening the file. This only has effect if encryption is enabled, see \fIenable_encryption()\fR.
.SS "set_permissions($perm)"
.IX Subsection "set_permissions($perm)"
sets the permissions the user has to this document. \f(CW$perm\fR can be:
.IP "\(bu" 4
all
.IP "\(bu" 4
annotate
.IP "\(bu" 4
copy
.IP "\(bu" 4
modify
.IP "\(bu" 4
print
.IP "\(bu" 4
no-annotate
.IP "\(bu" 4
no-copy
.IP "\(bu" 4
no-modify
.IP "\(bu" 4
no-print
.IP "\(bu" 4
none
.Sp
setting one of this flags automatically enables the document-encryption ($htmldoc\->\fIenable_encryption()\fR)
for you, because setting permissions will have no effect without it.
.Sp
Setting 'all' and 'none' will delete all other previously set options. You can set multiple options if
you need, eg.:
.Sp
\&\f(CW$htmldoc\fR\->set_permissions('no\-copy');
\&\f(CW$htmldoc\fR\->set_permissions('no\-modify');
.Sp
this one will do the same:
\&\f(CW$htmldoc\fR\->set_permissions('no\-copy', 'no\-modify');
.SS "\fIlinks()\fP"
.IX Subsection "links()"
turns link processing on.
.SS "\fIno_links()\fP"
.IX Subsection "no_links()"
turns the links off.
.SS "\fIpath()\fP"
.IX Subsection "path()"
specify the search path for files in a document. Use this method if your images are not shown.
.PP
Example:
.PP
\&\f(CW$htmldoc\fR\->path(\*(L"/home/foo/www/myimages/\*(R");
.SS "\fIlandscape()\fP"
.IX Subsection "landscape()"
sets the format of the resulting pages to landscape
.SS "\fIportrait()\fP"
.IX Subsection "portrait()"
sets the format of the resulting pages to portrait
.SS "\fItitle()\fP"
.IX Subsection "title()"
turns the title on.
.SS "\fIno_title()\fP"
.IX Subsection "no_title()"
turns the title off.
.ie n .SS "set_right_margin($margin, $messure)"
.el .SS "set_right_margin($margin, \f(CW$messure\fP)"
.IX Subsection "set_right_margin($margin, $messure)"
set the right margin. \f(CW$margin\fR is a \s-1INT\s0, \f(CW$messure\fR one of 'in', 'cm' or 'mm'.
.ie n .SS "set_left_margin($margin, $messure)"
.el .SS "set_left_margin($margin, \f(CW$messure\fP)"
.IX Subsection "set_left_margin($margin, $messure)"
set the left margin. \f(CW$margin\fR is a \s-1INT\s0, \f(CW$messure\fR one of 'in', 'cm' or 'mm'.
.ie n .SS "set_bottom_margin($margin, $messure)"
.el .SS "set_bottom_margin($margin, \f(CW$messure\fP)"
.IX Subsection "set_bottom_margin($margin, $messure)"
set the bottom margin. \f(CW$margin\fR is a \s-1INT\s0, \f(CW$messure\fR one of 'in', 'cm' or 'mm'.
.ie n .SS "set_top_margin($margin, $messure)"
.el .SS "set_top_margin($margin, \f(CW$messure\fP)"
.IX Subsection "set_top_margin($margin, $messure)"
set the top margin. \f(CW$margin\fR is a \s-1INT\s0, \f(CW$messure\fR one of 'in', 'cm' or 'mm'.
.SS "set_bodycolor($color)"
.IX Subsection "set_bodycolor($color)"
Sets the background of all pages to this background color. \f(CW$color\fR is a hex-coded color-value (eg. #FFFFFF),
a rgb-value (eg set_bodycolor(0,0,0) for black) or a color name (eg. black)
.SS "set_bodyfont($font)"
.IX Subsection "set_bodyfont($font)"
Sets the default font of the content. Currently the following fonts are supported:
.PP
Arial Courier Helvetica Monospace Sans-Serif Serif Symbol Times
.SS "set_fontsize($fsize)"
.IX Subsection "set_fontsize($fsize)"
Sets the default font size for the body text.
.SS "set_bodyimage($image)"
.IX Subsection "set_bodyimage($image)"
Sets the background image for the document. \f(CW$image\fR is the path to the image in your filesystem.
.SS "set_logoimage($image)"
.IX Subsection "set_logoimage($image)"
Sets the logo-image for the document. \f(CW$image\fR is the path to the image in your filesystem. The supported formats are \s-1BMP\s0, \s-1GIF\s0, \s-1JPEG\s0, and \s-1PNG\s0.
Remember to specify the 'l'\-option somewhere in header or footer using \fIset_header()\fR or/and \fIset_footer()\fR.
.PP
\&\f(CW$htmldoc\fR\->set_logoimage('mylogo.gif');
\&\f(CW$htmldoc\fR\->set_header('.', 'l', '.');
.SS "\fIget_logoimage()\fP"
.IX Subsection "get_logoimage()"
reads out a previous set logo-image. You will get the filename to the image.
.SS "set_browserwidth($width)"
.IX Subsection "set_browserwidth($width)"
specifies the browser width in pixels. The browser width is used to scale images and pixel measurements when generating PostScript and \s-1PDF\s0 files. It does not affect the font size of text.
.PP
The default browser width is 680 pixels which corresponds roughly to a 96 \s-1DPI\s0 display. Please note that your images and table sizes are equal to or smaller than the browser width, or your output will overlap or truncate in places.
.SS "set_compression($level)"
.IX Subsection "set_compression($level)"
specifies that Flate compression should be performed on the output file. The optional level parameter is a number from 1 (fastest and least amount of compression) to 9 (slowest and most amount of compression).
.PP
This option is only available when generating Level 3 PostScript or \s-1PDF\s0 files.
.SS "set_jpeg_compression($quality)"
.IX Subsection "set_jpeg_compression($quality)"
\&\f(CW$quality\fR is a value between 1 and 100. Defaults to 75.
.PP
Sets the quality of the images in the \s-1PDF\s0. Low values result in poor image quality but also in low file sizes for the \s-1PDF\s0. High values result in good image quality but also in high file sizes.
You can also use methods \fIbest_image_quality()\fR or \fIlow_image_quality()\fR. For normal usage, including photos or similar a value of
75 should be ok. For high quality results use 100. If you want to reduce file size you have to play with the value to find a
compromise between quality and size that fits your needs.
.SS "\fIbest_image_quality()\fP"
.IX Subsection "best_image_quality()"
Set the jpg-image quality to the maximum value. Call this method if you want to produce high quality PDF-Files. Note that this could produce huge file sizes
depending on how many images you include and how big they are. See set_jpeg_compression(100).
.SS "\fIlow_image_quality()\fP"
.IX Subsection "low_image_quality()"
Set the jpg-image quality to a low value (25%). Call this method if you have many or huge images like photos in your \s-1PDF\s0 and you do not want exploding file sizes for your
resulting document. Note that calling this method could result in poor image quality. If you want some more control see method \fIset_jpeg_compression()\fR which allows you to
set the value of the compression to other values than 25%.
.SS "set_pagemode($mode)"
.IX Subsection "set_pagemode($mode)"
specifies the initial viewing mode of the document. \f(CW$mode\fR is one of:
.IP "\(bu" 4
document \- the document pages are displayed in a normal window
.IP "\(bu" 4
outline \- the document outline and pages are displayed
.IP "\(bu" 4
fullscreen \- the document pages are displayed on the entire screen
.SS "set_charset($charset)"
.IX Subsection "set_charset($charset)"
defines the charset for the output document. The following charsets are currenty supported:
cp\-874 cp\-1250 cp\-1251 cp\-1252 cp\-1253 cp\-1254 cp\-1255 cp\-1256 cp\-1257 cp\-1258
iso\-8859\-1 iso\-8859\-2 iso\-8859\-3  iso\-8859\-4 iso\-8859\-5 iso\-8859\-6 iso\-8859\-7
iso\-8859\-8 iso\-8859\-9 iso\-8859\-14 iso\-8859\-15 koi8\-r
.SS "\fIcolor_on()\fP"
.IX Subsection "color_on()"
defines that color output is desired
.SS "\fIcolor_off()\fP"
.IX Subsection "color_off()"
defines that b&w output is desired
.SS "\fIenable_encryption()\fP"
.IX Subsection "enable_encryption()"
enables encryption and security features for the document.
.SS "\fIdisable_encryption()\fP"
.IX Subsection "disable_encryption()"
enables encryption and security features for the document.
.SS "set_output_format($format)"
.IX Subsection "set_output_format($format)"
sets the format of the output-document. \f(CW$format\fR can be one of:
.IP "\(bu" 4
html
.IP "\(bu" 4
pdf (default)
.IP "\(bu" 4
pdf11
.IP "\(bu" 4
pdf12
.IP "\(bu" 4
pdf13
.IP "\(bu" 4
pdf14
.IP "\(bu" 4
ps
.IP "\(bu" 4
ps1
.IP "\(bu" 4
ps2
.IP "\(bu" 4
ps3
.SS "set_html_content($html)"
.IX Subsection "set_html_content($html)"
this is the function to set the html-content as a scalar. See set_input_file($filename)
to use a present file from your filesystem for input
.SS "\fIget_html_content()\fP"
.IX Subsection "get_html_content()"
returns the previous set html-content.
.SS "set_input_file($input_filename)"
.IX Subsection "set_input_file($input_filename)"
this is the function to set the input file name.  It will also switch the
operational mode to 'file'.
.SS "\fIget_input_file()\fP"
.IX Subsection "get_input_file()"
returns the previous set input file name.
.ie n .SS "set_header($left, $center, $right)"
.el .SS "set_header($left, \f(CW$center\fP, \f(CW$right\fP)"
.IX Subsection "set_header($left, $center, $right)"
defines the data that should be displayed in header. One can choose from the following chars for each left,
center and right:
.IP "\(bu" 4
\&\fB.\fR A period indicates that the field should be blank.
.IP "\(bu" 4
\&\fB:\fR A colon indicates that the field should contain the current and total number of pages in the chapter (n/N).
.IP "\(bu" 4
\&\fB/\fR A slash indicates that the field should contain the current and total number of pages (n/N).
.IP "\(bu" 4
\&\fB1\fR The number 1 indicates that the field should contain the current page number in decimal format (1, 2, 3, ...)
.IP "\(bu" 4
\&\fBa\fR A lowercase \*(L"a\*(R" indicates that the field should contain the current page number using lowercase letters.
.IP "\(bu" 4
\&\fBA\fR An uppercase \*(L"A\*(R" indicates that the field should contain the current page number using \s-1UPPERCASE\s0 letters.
.IP "\(bu" 4
\&\fBc\fR A lowercase \*(L"c\*(R" indicates that the field should contain the current chapter title.
.IP "\(bu" 4
\&\fBC\fR An uppercase \*(L"C\*(R" indicates that the field should contain the current chapter page number.
.IP "\(bu" 4
\&\fBd\fR A lowercase \*(L"d\*(R" indicates that the field should contain the current date.
.IP "\(bu" 4
\&\fBD\fR An uppercase \*(L"D\*(R" indicates that the field should contain the current date and time.
.IP "\(bu" 4
\&\fBh\fR An \*(L"h\*(R" indicates that the field should contain the current heading.
.IP "\(bu" 4
\&\fBi\fR A lowercase \*(L"i\*(R" indicates that the field should contain the current page number in lowercase roman numerals (i, ii, iii, ...)
.IP "\(bu" 4
\&\fBI\fR An uppercase \*(L"I\*(R" indicates that the field should contain the current page number in uppercase roman numerals (I, \s-1II\s0, \s-1III\s0, ...)
.IP "\(bu" 4
\&\fBl\fR A lowercase \*(L"l\*(R" indicates that the field should contain the logo image.
.IP "\(bu" 4
\&\fBt\fR A lowercase \*(L"t\*(R" indicates that the field should contain the document title.
.IP "\(bu" 4
\&\fBT\fR An uppercase \*(L"T\*(R" indicates that the field should contain the current time.
.PP
Example:
.PP
Setting the header to contain the title left, nothing in center and actual pagenumber right do the follwing
.PP
\&\f(CW$htmldoc\fR\->set_header('t', '.', '1');
.ie n .SS "set_footer($left, $center, $right)"
.el .SS "set_footer($left, \f(CW$center\fP, \f(CW$right\fP)"
.IX Subsection "set_footer($left, $center, $right)"
defines the data that should be displayed in footer. See \fIset_header()\fR for details setting the left, center and right
value.
.SS "\fIembed_fonts()\fP"
.IX Subsection "embed_fonts()"
specifies that fonts should be embedded in PostScript and \s-1PDF\s0 output. This is especially useful when generating documents in character sets other than \s-1ISO\-8859\-1\s0.
.SS "\fIno_embed_fonts()\fP"
.IX Subsection "no_embed_fonts()"
turn the font-embedding previously enabled by \fIembed_fonts()\fR off.
.SS "\fIgenerate_pdf()\fP"
.IX Subsection "generate_pdf()"
generates the output-document. Returns a instance of HTML::HTMLDoc::PDF. See the perldoc of this class
for details
.SS "\fIerror()\fP"
.IX Subsection "error()"
in scalar content returns the last error that occurred, in list context returns all errors that occurred.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Frankl \- mfrankl at    seibert\-media.de
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself
.SH "CREDITS"
.IX Header "CREDITS"
Thanks very much to:
.PP
Rajat Bhatia
.PP
Keith W. Sheffield
.PP
Christoffer Landtman
.PP
Aleksey Serba
.PP
Helen Hamster
.PP
Najib
.PP
for suggestions and bug fixes.
.SH "FAQ"
.IX Header "FAQ"
.IP "\(bu" 4
Q: Where are the images that I specified in my HTML-Code?
.Sp
A: The images that you want to include have to be found by the process that is generating your \s-1PDF\s0 (that is
using this Module). If you call the images relatively in your html-code like:
<img src=\*(L"test.gif\*(R"> or <img src=\*(L"./myimages/test.gif\*(R">
make sure that your perl program can find them. Note that a perl program can change the working
directory internal (See perl \-f chdir). You can find out the working directory using:
.Sp
use Cwd;
print Cwd::abs_path(Cwd::cwd);
.Sp
The module provides a method path($p). Use this if you want to specify where the images you want to use
can be found. Example:
.Sp
\&\f(CW$htmldoc\fR\->path(\*(L"/home/foo/www/myimages/\*(R");
.IP "\(bu" 4
Q: How can I do a page break?
.Sp
A: You can include a HTML-Comment that will do a page break for you at the point it is located:
<!\-\- \s-1PAGE\s0 \s-1BREAK\s0 \-\->
.IP "\(bu" 4
Q: The Module works in shell but not with mod_perl
.Sp
A: Use htmldoc in file-Mode:
.Sp
my \f(CW$htmldoc\fR = new HTMLDoc('mode'=>'file', 'tmpdir'=>'/tmp');
.SH "BUGS"
.IX Header "BUGS"
Please use the following \s-1URL\s0 to report any bugs or missing functions.
.PP
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=HTML%3A%3AHTMLDoc>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl.
.PP
HTML::HTMLDoc::PDF.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 1631:" 4
.IX Item "Around line 1631:"
\&'=item' outside of any '=over'
.IP "Around line 1661:" 4
.IX Item "Around line 1661:"
You forgot a '=back' before '=head1'
