.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Rose::DB::Object::Std::Metadata 3"
.TH Rose::DB::Object::Std::Metadata 3 "2010-04-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rose::DB::Object::Std::Metadata \- Standardized database object metadata.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Rose::DB::Object::Std::Metadata;
\&
\&  $meta = Rose::DB::Object::Std::Metadata\->new(class => \*(AqProduct\*(Aq);
\&  # ...or...
\&  # $meta = Rose::DB::Object::Std::Metadata\->for_class(\*(AqProduct\*(Aq);
\&
\&  $meta\->table(\*(Aqproducts\*(Aq);
\&
\&  $meta\->columns
\&  (
\&    id          => { type => \*(Aqint\*(Aq, primary_key => 1 },
\&    name        => { type => \*(Aqvarchar\*(Aq, length => 255 },
\&    description => { type => \*(Aqtext\*(Aq },
\&    category_id => { type => \*(Aqint\*(Aq },
\&
\&    status => 
\&    {
\&      type      => \*(Aqvarchar\*(Aq, 
\&      check_in  => [ \*(Aqactive\*(Aq, \*(Aqinactive\*(Aq ],
\&      default   => \*(Aqinactive\*(Aq,
\&    },
\&
\&    start_date  => { type => \*(Aqdatetime\*(Aq },
\&    end_date    => { type => \*(Aqdatetime\*(Aq },
\&
\&    date_created     => { type => \*(Aqtimestamp\*(Aq, default => \*(Aqnow\*(Aq },  
\&    last_modified    => { type => \*(Aqtimestamp\*(Aq, default => \*(Aqnow\*(Aq },
\&  );
\&
\&  $meta\->add_unique_key(\*(Aqname\*(Aq);
\&
\&  $meta\->foreign_keys
\&  (
\&    category =>
\&    {
\&      class       => \*(AqCategory\*(Aq,
\&      key_columns =>
\&      {
\&        category_id => \*(Aqid\*(Aq,
\&      }
\&    },
\&  );
\&
\&  ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Rose::DB::Object::Std::Metadata\*(C'\fR is a subclass of Rose::DB::Object::Metadata that is designed to serve the needs of Rose::DB::Object::Std objects.  See the Rose::DB::Object::Std documentations for information on what differentiates it from Rose::DB::Object.
.PP
Only the methods that are overridden are documented here.  See the Rose::DB::Object::Metadata documentation for the rest.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
.IP "\fBadd_primary_key_column \s-1COLUMN\s0\fR" 4
.IX Item "add_primary_key_column COLUMN"
This method is an alias for the \f(CW\*(C`add_primary_key_columns()\*(C'\fR method.
.IP "\fBadd_primary_key_columns \s-1COLUMNS\s0\fR" 4
.IX Item "add_primary_key_columns COLUMNS"
Since Rose::DB::Object::Std objects must have a single primary key column named \*(L"id\*(R", calling this method with a \s-1COLUMNS\s0 argument of anything other than the column name \*(L"id\*(R" or a reference to an array containing the column name \*(L"id\*(R" will cause a fatal error.
.Sp
In general, you do not need to use this method at all since the \f(CW\*(C`primary_key_columns()\*(C'\fR method is hard-coded to always return \*(L"id\*(R".
.IP "\fBinitialize [\s-1ARGS\s0]\fR" 4
.IX Item "initialize [ARGS]"
This method does the same thing as the Rose::DB::Object::Metadata method of the same name, with one exception.  If there is no column named \*(L"id\*(R" in the list of columns, a scalar primary key column named \*(L"id\*(R" is added to the column list.  Then initialization proceeds as usual.
.IP "\fBprimary_key_columns\fR" 4
.IX Item "primary_key_columns"
Always returns the column name \*(L"id\*(R" (in list context) or a reference to an array containing the column name \*(L"id\*(R" (in scalar context).
.SH "AUTHOR"
.IX Header "AUTHOR"
John C. Siracusa (siracusa@gmail.com)
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 2010 by John C. Siracusa.  All rights reserved.  This program is
free software; you can redistribute it and/or modify it under the same terms
as Perl itself.
