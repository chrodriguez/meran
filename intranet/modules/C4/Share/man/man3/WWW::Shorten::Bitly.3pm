.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::Shorten::Bitly 3"
.TH WWW::Shorten::Bitly 3 "2011-10-14" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::Shorten::Bitly \- Interface to shortening URLs using <http://bitly.com>
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$Revision:\fR 1.17 $
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
WWW::Shorten::Bitly provides an easy interface for shortening URLs using http://bitly.com. In addition to shortening URLs, you can pull statistics that bitly.com gathers regarding each shortened
WWW::Shorten::Bitly uses XML::Simple to convert the xml response and JSON::Any to convert \s-1JSON\s0 responses for the meta info and click stats to create a hashref of the results.
.PP
WWW::Shorten::Bitly provides two interfaces. The first is the common \f(CW\*(C`makeashorterlink\*(C'\fR and \f(CW\*(C`makealongerlink\*(C'\fR that WWW::Shorten provides. However, due to the way the bitly.com \s-1API\s0 works, additional arguments are required. The second provides a better way of retrieving additional information and statistics about a bitly.com \s-1URL\s0.
.PP
use WWW::Shorten::Bitly;
.PP
my \f(CW$url\fR = \*(L"http://www.example.com\*(R";
.PP
my \f(CW$tmp\fR = makeashorterlink($url, '\s-1MY_BITLY_USERNAME\s0', '\s-1MY_BITLY_API_KEY\s0');
my \f(CW$tmp1\fR = makealongerlink($tmp, '\s-1MY_BITLY_USERNAME\s0', '\s-1MY_BITLY_API_KEY\s0');
.PP
or
.PP
use WWW::Shorten::Bitly;
.PP
my \f(CW$url\fR = \*(L"http://www.example.com\*(R";
my \f(CW$bitly\fR = WWW::Shorten::Bitly\->new(\s-1URL\s0 => \f(CW$url\fR,
\&\s-1USER\s0 => \*(L"my_user_id\*(R",
\&\s-1APIKEY\s0 => \*(L"my_api_key\*(R");
.PP
\&\f(CW$bitly\fR\->shorten(\s-1URL\s0 => \f(CW$url\fR);
print \*(L"shortened \s-1URL\s0 is \f(CW$bitly\fR\->{bitlyurl}\en\*(R";
.PP
\&\f(CW$bitly\fR\->expand(\s-1URL\s0 => \f(CW$bitly\fR\->{bitlyurl});
print \*(L"expanded/original \s-1URL\s0 is \f(CW$bitly\fR\->{longurl}\en\*(R";
.PP
my \f(CW$info\fR = \f(CW$bitly\fR\->\fIinfo()\fR;
say \*(L"Title of the page is \*(R" . \f(CW$info\fR\->{title};
say \*(L"Created by \*(R" . \f(CW$info\fR\->{created_by};
.PP
my \f(CW$clicks\fR = \f(CW$bitly\fR\->\fIclicks()\fR;
say \*(L"Total number of clicks received: \*(R" . \f(CW$clicks\fR\->{user_clicks};
say \*(L"Total number of global clicks received are: \*(R" . \f(CW$clicks\fR\->{global_clicks};
.PP
Please remember to check out \f(CW\*(C`http://code.google.com/p/bitly\-api/wiki/ApiDocumentation#/v3/info\*(C'\fR for more details on V3 of the Bitly.com \s-1API\s0
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "new"
.IX Subsection "new"
Create a new bitly.com object using your bitly.com user id and bitly.com api key.
.PP
my \f(CW$bitly\fR = WWW::Shorten::Bitly\->new(\s-1URL\s0 => \*(L"http://www.example.com/this_is_one_example.html\*(R",
\&\s-1USER\s0 => \*(L"bitly_user_id\*(R",
\&\s-1APIKEY\s0 => \*(L"bitly_api_key\*(R");
.PP
to use bitly.com's new j.mp service, just construct the bitly object like this:
my \f(CW$bitly\fR = WWW::Shorten::Bitly\->new(\s-1URL\s0 => \*(L"http://www.example.com/this_is_one_example.html\*(R",
\&\s-1USER\s0 => \*(L"bitly_user_id\*(R",
\&\s-1APIKEY\s0 => \*(L"bitly_api_key\*(R",
jmp => 1);
.SS "makeashorterlink"
.IX Subsection "makeashorterlink"
The function \f(CW\*(C`makeashorterlink\*(C'\fR will call the bitly.com \s-1API\s0 site passing it
your long \s-1URL\s0 and will return the shorter bitly.com version.
.PP
bitly.com requires the use of a user id and \s-1API\s0 key to shorten links.
.PP
j.mp is not currently supported for makeashorterlink
.SS "makealongerlink"
.IX Subsection "makealongerlink"
The function \f(CW\*(C`makealongerlink\*(C'\fR does the reverse. \f(CW\*(C`makealongerlink\*(C'\fR
will accept as an argument either the full bitly.com \s-1URL\s0 or just the
bitly.com identifier. bitly.com requires the use of a user name and \s-1API\s0
Key when using the \s-1API\s0.
.PP
If anything goes wrong, then the function will return \f(CW\*(C`undef\*(C'\fR.
.PP
j.mp is not currently supported for makealongerlink
.SS "shorten"
.IX Subsection "shorten"
Shorten a \s-1URL\s0 using http://bitly.com. Calling the shorten method will return the shortened \s-1URL\s0 but will also store it in bitly.com object until the next call is made.
.PP
my \f(CW$url\fR = \*(L"http://www.example.com\*(R";
my \f(CW$shortstuff\fR = \f(CW$bitly\fR\->shorten(\s-1URL\s0 => \f(CW$url\fR);
.PP
print \*(L"biturl is \*(R" . \f(CW$bitly\fR\->{bitlyurl} . \*(L"\en\*(R";
or
print \*(L"biturl is \f(CW$shortstuff\fR\en\*(R";
.SS "expand"
.IX Subsection "expand"
Expands a shortened bitly.com \s-1URL\s0 to the original long \s-1URL\s0.
.SS "info"
.IX Subsection "info"
Get info about a shortened bitly.com \s-1URL\s0. By default, the method will use the value that's stored in \f(CW$bitly\fR\->{bitlyurl}. To be sure you're getting info on the correct \s-1URL\s0, it's a good idea to set this value before getting any info on it.
.PP
\&\f(CW$bitly\fR\->{bitlyurl} = \*(L"http://bitly.com/jmv6\*(R";
my \f(CW$info\fR = \f(CW$bitly\fR\->\fIinfo()\fR;
.PP
say \*(L"Title of the page is \*(R" . \f(CW$info\fR\->{title};
say \*(L"Created by \*(R" . \f(CW$info\fR\->{created_by};
.SS "clicks"
.IX Subsection "clicks"
Get click thru information for a shortened bitly.com \s-1URL\s0. By default, the method will use the value that's stored in \f(CW$bitly\fR\->{bitlyurl}. To be sure you're getting info on the correct \s-1URL\s0, it's a good idea to set this value before getting any info on it.
.PP
\&\f(CW$bitly\fR\->{bitlyurl} = \*(L"http://bitly.com/jmv6\*(R";
my \f(CW$clicks\fR = \f(CW$bitly\fR\->\fIclicks()\fR;
.PP
say \*(L"Total number of clicks received: \*(R" . \f(CW$clicks\fR\->{user_clicks};
say \*(L"Total number of global clicks received are: \*(R" . \f(CW$clicks\fR\->{global_clicks};
.SS "errors"
.IX Subsection "errors"
.SS "version"
.IX Subsection "version"
Gets the module version number
.SS "referrers"
.IX Subsection "referrers"
Returns an array of hashes
.PP
my \f(CW@ref\fR = \f(CW$bitly\fR\->\fIreferrers()\fR;
say \*(L"Referrers for \*(R" . \f(CW$bitly\fR\->{bitlyurl};
foreach my \f(CW$r\fR (@ref) {
    foreach my \f(CW$f\fR (@{$r}) {
        say \f(CW$f\fR\->{clicks} . ' from ' . \f(CW$f\fR\->{referrer};
    }
}
.SS "countries {"
.IX Subsection "countries {"
Returns an array of hashesh
.PP
my \f(CW@countries\fR = \f(CW$bitly\fR\->\fIcountries()\fR;
foreach my \f(CW$r\fR (@countries) {
    foreach my \f(CW$f\fR (@{$r}) {
        say \f(CW$f\fR\->{clicks} . ' from ' . \f(CW$f\fR\->{country};
    }
}
.SS "clicks_by_day {"
.IX Subsection "clicks_by_day {"
Returns an array of hashes
.PP
my \f(CW@c\fR = \f(CW$bitly\fR\->\fIclicks_by_day()\fR;
say \*(L"Clicks by Day for \*(R" . \f(CW$bitly\fR\->{bitlyurl};
foreach my \f(CW$r\fR (@c) {
    foreach my \f(CW$f\fR (@{$r}) {
        say \f(CW$f\fR\->{clicks} . ' on ' . \f(CW$f\fR\->{day_start};
    }
}
.PP
day_start is the timecode as specified by Bitly.com. You can use the following to turn it into a DateTime Object
.PP
use DateTime;
\&\f(CW$dt\fR = DateTime\->from_epoch( epoch => \f(CW$epoch\fR );
.SS "qr_code"
.IX Subsection "qr_code"
Returns the \s-1URL\s0 for the \s-1QR\s0 Code
.SS "validate"
.IX Subsection "validate"
For any given a bitly user login and apiKey, you can validate that the pair is active.
.SS "bitly_pro_domain"
.IX Subsection "bitly_pro_domain"
Will return true or false whether the \s-1URL\s0 specified is a Bitly Pro Domain
.PP
my \f(CW$bpd\fR = \f(CW$bitly\fR\->bitly_pro_domain(url => 'http://nyti.ms');
say \*(L"This is a Bitly Pro Domain: \*(R" . \f(CW$bpd\fR;
.PP
my \f(CW$bpd2\fR = \f(CW$bitly\fR\->bitly_pro_domain(url => 'http://example.com');
say \*(L"This is a Bitly Pro Domain: \*(R" . \f(CW$bpd2\fR;
.SS "lookup"
.IX Subsection "lookup"
.SS "clicks_by_minute"
.IX Subsection "clicks_by_minute"
This part of the Bitly APi isn't being implemented because it's virtually impossible to know exactly which minute a clicks is attributed to. ya know, network lag, etc. I'll implement this when Bitly puts some sort of a time code into the results.
.SH "FILES"
.IX Header "FILES"
\&\f(CW$HOME\fR/.bitly or _bitly on Windows Systems.
.PP
You may omit \s-1USER\s0 and \s-1APIKEY\s0 in the constructor if you set them in the .bitly config file on separate lines using the syntax:
.PP
USER=username
APIKEY=apikey
.SH "AUTHOR"
.IX Header "AUTHOR"
Pankaj Jain, \f(CW\*(C`<pjain at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-www\-shorten\-bitly at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=WWW\-Shorten\-Bitly>. I will
be notified, and then you'll automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
perldoc WWW::Shorten::Bitly
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=WWW\-Shorten\-Bitly>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/WWW\-Shorten\-Bitly>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/WWW\-Shorten\-Bitly>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/WWW\-Shorten\-Bitly/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.IP "http://bitly.com for a wonderful service." 4
.IX Item "http://bitly.com for a wonderful service."
.PD 0
.IP "Larry Wall, Damian Conway, and all the amazing folks giving us Perl and continuing to work on it over the years." 4
.IX Item "Larry Wall, Damian Conway, and all the amazing folks giving us Perl and continuing to work on it over the years."
.ie n .IP "Mizar, ""<mizar.jp@gmail.com>"", Peter Edwards, ""<pedwards@cpan.org"" >>, Joerg Meltzer, ""<joerg@joergmeltzer.de>"" for great patches." 4
.el .IP "Mizar, \f(CW<mizar.jp@gmail.com>\fR, Peter Edwards, \f(CW<pedwards@cpan.org\fR >>, Joerg Meltzer, \f(CW<joerg@joergmeltzer.de>\fR for great patches." 4
.IX Item "Mizar, <mizar.jp@gmail.com>, Peter Edwards, <pedwards@cpan.org >>, Joerg Meltzer, <joerg@joergmeltzer.de> for great patches."
.ie n .IP "Thai Thanh Nguyen, ""<thai@thaiandhien.com>"" for patches to support the Bitly.com v3 \s-1API\s0" 4
.el .IP "Thai Thanh Nguyen, \f(CW<thai@thaiandhien.com>\fR for patches to support the Bitly.com v3 \s-1API\s0" 4
.IX Item "Thai Thanh Nguyen, <thai@thaiandhien.com> for patches to support the Bitly.com v3 API"
.PD
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
.IP "Copyright (c) 2009\-2010 Pankaj Jain, All Rights Reserved <http://blog.pjain.me>." 4
.IX Item "Copyright (c) 2009-2010 Pankaj Jain, All Rights Reserved <http://blog.pjain.me>."
.PD 0
.IP "Copyright (c) 2009\-2010 Teknatus Solutions \s-1LLC\s0, All Rights Reserved <http://teknatus.com>." 4
.IX Item "Copyright (c) 2009-2010 Teknatus Solutions LLC, All Rights Reserved <http://teknatus.com>."
.PD
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
\&\s-1BECAUSE\s0 \s-1THIS\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1LICENSED\s0 \s-1FREE\s0 \s-1OF\s0 \s-1CHARGE\s0, \s-1THERE\s0 \s-1IS\s0 \s-1NO\s0 \s-1WARRANTY\s0
\&\s-1FOR\s0 \s-1THE\s0 \s-1SOFTWARE\s0, \s-1TO\s0 \s-1THE\s0 \s-1EXTENT\s0 \s-1PERMITTED\s0 \s-1BY\s0 \s-1APPLICABLE\s0 \s-1LAW\s0. \s-1EXCEPT\s0 \s-1WHEN\s0
\&\s-1OTHERWISE\s0 \s-1STATED\s0 \s-1IN\s0 \s-1WRITING\s0 \s-1THE\s0 \s-1COPYRIGHT\s0 \s-1HOLDERS\s0 \s-1AND/OR\s0 \s-1OTHER\s0 \s-1PARTIES\s0
\&\s-1PROVIDE\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \*(L"\s-1AS\s0 \s-1IS\s0\*(R" \s-1WITHOUT\s0 \s-1WARRANTY\s0 \s-1OF\s0 \s-1ANY\s0 \s-1KIND\s0, \s-1EITHER\s0
\&\s-1EXPRESSED\s0 \s-1OR\s0 \s-1IMPLIED\s0, \s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1THE\s0 \s-1IMPLIED\s0
\&\s-1WARRANTIES\s0 \s-1OF\s0 \s-1MERCHANTABILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0. \s-1THE\s0
\&\s-1ENTIRE\s0 \s-1RISK\s0 \s-1AS\s0 \s-1TO\s0 \s-1THE\s0 \s-1QUALITY\s0 \s-1AND\s0 \s-1PERFORMANCE\s0 \s-1OF\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1WITH\s0
\&\s-1YOU\s0. \s-1SHOULD\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1PROVE\s0 \s-1DEFECTIVE\s0, \s-1YOU\s0 \s-1ASSUME\s0 \s-1THE\s0 \s-1COST\s0 \s-1OF\s0 \s-1ALL\s0
\&\s-1NECESSARY\s0 \s-1SERVICING\s0, \s-1REPAIR\s0, \s-1OR\s0 \s-1CORRECTION\s0.
.PP
\&\s-1IN\s0 \s-1NO\s0 \s-1EVENT\s0 \s-1UNLESS\s0 \s-1REQUIRED\s0 \s-1BY\s0 \s-1APPLICABLE\s0 \s-1LAW\s0 \s-1OR\s0 \s-1AGREED\s0 \s-1TO\s0 \s-1IN\s0 \s-1WRITING\s0
\&\s-1WILL\s0 \s-1ANY\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0, \s-1OR\s0 \s-1ANY\s0 \s-1OTHER\s0 \s-1PARTY\s0 \s-1WHO\s0 \s-1MAY\s0 \s-1MODIFY\s0 \s-1AND/OR\s0
\&\s-1REDISTRIBUTE\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1AS\s0 \s-1PERMITTED\s0 \s-1BY\s0 \s-1THE\s0 \s-1ABOVE\s0 \s-1LICENCE\s0, \s-1BE\s0
\&\s-1LIABLE\s0 \s-1TO\s0 \s-1YOU\s0 \s-1FOR\s0 \s-1DAMAGES\s0, \s-1INCLUDING\s0 \s-1ANY\s0 \s-1GENERAL\s0, \s-1SPECIAL\s0, \s-1INCIDENTAL\s0,
\&\s-1OR\s0 \s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 \s-1ARISING\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0 \s-1USE\s0 \s-1OR\s0 \s-1INABILITY\s0 \s-1TO\s0 \s-1USE\s0
\&\s-1THE\s0 \s-1SOFTWARE\s0 (\s-1INCLUDING\s0 \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0 \s-1LOSS\s0 \s-1OF\s0 \s-1DATA\s0 \s-1OR\s0 \s-1DATA\s0 \s-1BEING\s0
\&\s-1RENDERED\s0 \s-1INACCURATE\s0 \s-1OR\s0 \s-1LOSSES\s0 \s-1SUSTAINED\s0 \s-1BY\s0 \s-1YOU\s0 \s-1OR\s0 \s-1THIRD\s0 \s-1PARTIES\s0 \s-1OR\s0 A
\&\s-1FAILURE\s0 \s-1OF\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1TO\s0 \s-1OPERATE\s0 \s-1WITH\s0 \s-1ANY\s0 \s-1OTHER\s0 \s-1SOFTWARE\s0), \s-1EVEN\s0 \s-1IF\s0
\&\s-1SUCH\s0 \s-1HOLDER\s0 \s-1OR\s0 \s-1OTHER\s0 \s-1PARTY\s0 \s-1HAS\s0 \s-1BEEN\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0
\&\s-1SUCH\s0 \s-1DAMAGES\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl, WWW::Shorten, <http://bitly.com>.
