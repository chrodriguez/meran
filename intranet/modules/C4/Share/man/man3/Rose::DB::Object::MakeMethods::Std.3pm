.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Rose::DB::Object::MakeMethods::Std 3"
.TH Rose::DB::Object::MakeMethods::Std 3 "2010-04-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rose::DB::Object::MakeMethods::Std \- Create object methods related to Rose::DB::Object::Std\-derived objects.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  package Category;
\&  our @ISA = qw(Rose::DB::Object::Std);
\&  ...
\&
\&  package Color;
\&  our @ISA = qw(Rose::DB::Object::Std);
\&  ...
\&
\&  package Product;
\&  our @ISA = qw(Rose::DB::Object);
\&  ...
\&
\&  use Rose::DB::Object::MakeMethods::Std
\&  (
\&    object_by_id => 
\&    [
\&      color => { class => \*(AqColor\*(Aq },
\&
\&      category => 
\&      {
\&        class     => \*(AqCategory\*(Aq,
\&        id_method => \*(Aqcat_id\*(Aq,
\&        share_db  => 0,
\&      },
\&    ],
\&  );
\&
\&  ...
\&
\&  $prod = Product\->new(...);
\&
\&  $color = $prod\->color;
\&
\&  # $prod\->color call is roughly equivalent to:
\&  #
\&  # $color = Color\->new(id => $prod\->color_id, 
\&  #                     db => $prod\->db);
\&  # $ret = $color\->load;
\&  # return $ret  unless($ret);
\&  # return $color;
\&
\&  $cat = $prod\->category;
\&
\&  # $prod\->category call is roughly equivalent to:
\&  #
\&  # $cat = Category\->new(id => $prod\->cat_id);
\&  # $ret = $cat\->load;
\&  # return $ret  unless($ret);
\&  # return $cat;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Rose::DB::Object::MakeMethods::Std\*(C'\fR creates methods related to Rose::DB::Object::Std\-derived objects.  It inherits from Rose::Object::MakeMethods.  See the Rose::Object::MakeMethods documentation to learn about the interface.  The method types provided by this module are described below.
.PP
All method types defined by this module are designed to work with objects that are subclasses of (or otherwise conform to the interface of) Rose::DB::Object.  In particular, the object is expected to have a \f(CW\*(C`db\*(C'\fR method that returns a Rose::DB\-derived object.  See the Rose::DB::Object::Std documentation for more details.
.SH "METHODS TYPES"
.IX Header "METHODS TYPES"
.IP "\fBobject_by_id\fR" 4
.IX Item "object_by_id"
Create a get/set methods for a single Rose::DB::Object::Std\-derived object loaded based on a primary key stored in an attribute of the current object.
.RS 4
.IP "Options" 4
.IX Item "Options"
.RS 4
.PD 0
.ie n .IP """class""" 4
.el .IP "\f(CWclass\fR" 4
.IX Item "class"
.PD
The name of the Rose::DB::Object::Std\-derived class of the object to be loaded.  This option is required.
.ie n .IP """hash_key""" 4
.el .IP "\f(CWhash_key\fR" 4
.IX Item "hash_key"
The key inside the hash-based object to use for the storage of the object.  Defaults to the name of the method.
.ie n .IP """id_method""" 4
.el .IP "\f(CWid_method\fR" 4
.IX Item "id_method"
The name of the method that contains the primary key of the object to be loaded.  Defaults to the method name concatenated with \*(L"_id\*(R".
.ie n .IP """interface""" 4
.el .IP "\f(CWinterface\fR" 4
.IX Item "interface"
Choose the interface.  The only current interface is \f(CW\*(C`get_set\*(C'\fR, which is the default.
.ie n .IP """share_db""" 4
.el .IP "\f(CWshare_db\fR" 4
.IX Item "share_db"
If true, the \f(CW\*(C`db\*(C'\fR attribute of the current object is shared with the object loaded.  Defaults to true.
.RE
.RS 4
.RE
.IP "Interfaces" 4
.IX Item "Interfaces"
.RS 4
.PD 0
.ie n .IP """get_set""" 4
.el .IP "\f(CWget_set\fR" 4
.IX Item "get_set"
.PD
Creates a method that will attempt to create and load a Rose::DB::Object::Std\-derived object based on a primary key stored in an attribute of the current object.
.Sp
If passed a single argument of undef, the \f(CW\*(C`hash_key\*(C'\fR used to store the object is set to undef.  Otherwise, the argument is assumed to be an object of type \f(CW\*(C`class\*(C'\fR and is assigned to \f(CW\*(C`hash_key\*(C'\fR after having its primary key set to the corresponding value in the current object.
.Sp
If called with no arguments and the \f(CW\*(C`hash_key\*(C'\fR used to store the object is defined, the object is returned.  Otherwise, the object is created and loaded.
.Sp
The load may fail for several reasons.  The load will not even be attempted if the primary key attribute in the current object is undefined.  Instead, undef will be returned.  If the call to the newly created object's \f(CW\*(C`load\*(C'\fR method returns false, that false value is returned.
.Sp
If the load succeeds, the object is returned.
.RE
.RS 4
.RE
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 3
\&    package Category;
\&    our @ISA = qw(Rose::DB::Object::Std);
\&    ...
\&
\&    package Color;
\&    our @ISA = qw(Rose::DB::Object::Std);
\&    ...
\&
\&    package Product;
\&    our @ISA = qw(Rose::DB::Object);
\&    ...
\&
\&    use Rose::DB::Object::MakeMethods::Std
\&    (
\&      object_by_id => 
\&      [
\&        color => { class => \*(AqColor\*(Aq },
\&
\&        category => 
\&        {
\&          class     => \*(AqCategory\*(Aq,
\&          id_method => \*(Aqcat_id\*(Aq,
\&          share_db  => 0,
\&        },
\&      ],
\&    );
\&
\&    ...
\&
\&    $prod = Product\->new(...);
\&
\&    $color = $prod\->color;
\&
\&    # $prod\->color call is roughly equivalent to:
\&    #
\&    # $color = Color\->new(id => $prod\->color_id, 
\&    #                     db => $prod\->db);
\&    # $ret = $color\->load;
\&    # return $ret  unless($ret);
\&    # return $color;
\&
\&    $cat = $prod\->category;
\&
\&    # $prod\->category call is roughly equivalent to:
\&    #
\&    # $cat = Category\->new(id => $prod\->cat_id);
\&    # $ret = $cat\->load;
\&    # return $ret  unless($ret);
\&    # return $cat;
.Ve
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
John C. Siracusa (siracusa@gmail.com)
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 2010 by John C. Siracusa.  All rights reserved.  This program is
free software; you can redistribute it and/or modify it under the same terms
as Perl itself.
