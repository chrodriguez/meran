.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.19)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MARC::Charset 3"
.TH MARC::Charset 3 "2011-08-05" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MARC::Charset \- convert MARC\-8 encoded strings to UTF\-8
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # import the marc8_to_utf8 function
\&    use MARC::Charset \*(Aqmarc8_to_utf8\*(Aq;
\&   
\&    # prepare STDOUT for utf8
\&    binmode(STDOUT, \*(Aqutf8\*(Aq);
\&
\&    # print out some marc8 as utf8
\&    print marc8_to_utf8($marc8_string);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MARC::Charset allows you to turn \s-1MARC\-8\s0 encoded strings into \s-1UTF\-8\s0
strings. \s-1MARC\-8\s0 is a single byte character encoding that predates unicode, and
allows you to put non-Roman scripts in \s-1MARC\s0 bibliographic records.
.PP
.Vb 1
\&    http://www.loc.gov/marc/specifications/spechome.html
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
.SS "\fIignore_errors()\fP"
.IX Subsection "ignore_errors()"
Tells MARC::Charset whether or not to ignore all encoding errors, and
returns the current setting.  This is helpful if you have records that
contain both \s-1MARC8\s0 and \s-1UNICODE\s0 characters.
.PP
.Vb 1
\&    my $ignore = MARC::Charset\->ignore_errors();
\&    
\&    MARC::Charset\->ignore_errors(1); # ignore errors
\&    MARC::Charset\->ignore_errors(0); # DO NOT ignore errors
.Ve
.SS "\fIassume_unicode()\fP"
.IX Subsection "assume_unicode()"
Tells MARC::Charset whether or not to assume \s-1UNICODE\s0 when an error is
encountered in ignore_errors mode and returns the current setting.
This is helepfuli if you have records that contain both \s-1MARC8\s0 and \s-1UNICODE\s0
characters.
.PP
.Vb 1
\&    my $setting = MARC::Charset\->assume_unicode();
\&    
\&    MARC::Charset\->assume_unicode(1); # assume characters are unicode (utf\-8)
\&    MARC::Charset\->assume_unicode(0); # DO NOT assume characters are unicode
.Ve
.SS "\fIassume_encoding()\fP"
.IX Subsection "assume_encoding()"
Tells MARC::Charset whether or not to assume a specific encoding when an error
is encountered in ignore_errors mode and returns the current setting.  This
is helpful if you have records that contain both \s-1MARC8\s0 and other characters.
.PP
.Vb 1
\&    my $setting = MARC::Charset\->assume_encoding();
\&    
\&    MARC::Charset\->assume_encoding(\*(Aqcp850\*(Aq); # assume characters are cp850
\&    MARC::Charset\->assume_encoding(\*(Aq\*(Aq); # DO NOT assume any encoding
.Ve
.SS "\fImarc8_to_utf8()\fP"
.IX Subsection "marc8_to_utf8()"
Converts a \s-1MARC\-8\s0 encoded string to \s-1UTF\-8\s0.
.PP
.Vb 1
\&    my $utf8 = marc8_to_utf8($marc8);
.Ve
.PP
If you'd like to ignore errors pass in a true value as the 2nd 
parameter or call MARC::Charset\->\fIignore_errors()\fR with a true
value:
.PP
.Vb 1
\&    my $utf8 = marc8_to_utf8($marc8, \*(Aqignore\-errors\*(Aq);
\&
\&  or
\&  
\&    MARC::Charset\->ignore_errors(1);
\&    my $utf8 = marc8_to_utf8($marc8);
.Ve
.SS "\fIutf8_to_marc8()\fP"
.IX Subsection "utf8_to_marc8()"
Will attempt to translate utf8 into marc8.
.PP
.Vb 1
\&    my $marc8 = utf8_to_marc8($utf8);
.Ve
.PP
If you'd like to ignore errors, or characters that can't be
converted to marc8 then pass in a true value as the second
parameter:
.PP
.Vb 1
\&    my $marc8 = utf8_to_marc8($utf8, \*(Aqignore\-errors\*(Aq);
\&
\&  or
\&  
\&    MARC::Charset\->ignore_errors(1);
\&    my $utf8 = marc8_to_utf8($marc8);
.Ve
.SH "DEFAULT CHARACTER SETS"
.IX Header "DEFAULT CHARACTER SETS"
If you need to alter the default character sets you can set the 
\&\f(CW$MARC::Charset::DEFAULT_G0\fR and \f(CW$MARC::Charset::DEFAULT_G1\fR variables to the 
appropriate character set code:
.PP
.Vb 3
\&    use MARC::Charset::Constants qw(:all);
\&    $MARC::Charset::DEFAULT_G0 = BASIC_ARABIC;
\&    $MARC::Charset::DEFAULT_G1 = EXTENDED_ARABIC;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
MARC::Charset::Constant
.IP "\(bu" 4
MARC::Charset::Table
.IP "\(bu" 4
MARC::Charset::Code
.IP "\(bu" 4
MARC::Charset::Compiler
.IP "\(bu" 4
MARC::Record
.IP "\(bu" 4
\&\s-1MARC::XML\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Ed Summers (ehs@pobox.com)
