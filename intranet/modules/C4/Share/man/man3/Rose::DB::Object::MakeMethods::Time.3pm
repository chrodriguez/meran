.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Rose::DB::Object::MakeMethods::Time 3"
.TH Rose::DB::Object::MakeMethods::Time 3 "2010-04-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rose::DB::Object::MakeMethods::Time \- Create time\-related methods for Rose::DB::Object\-derived objects.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package MyDBObject;
\&
\&    use base \*(AqRose::DB::Object\*(Aq;
\&
\&    use Rose::DB::Object::MakeMethods::Time
\&    (
\&      interval => 
\&      [
\&        t1 => { scale => 6 },
\&        t2 => { default => \*(Aq3 days 6 minutes 5 seconds\*(Aq },
\&      ],
\&
\&      time =>
\&      [
\&        start => { scale => 5 },
\&        end   => { default => \*(Aq12:34:56\*(Aq },
\&      ],
\&    );
\&
\&    ...
\&
\&    $o\->t1(\*(Aq5 minutes 0.003 seconds\*(Aq);
\&
\&    $dt_dur = $o\->t1; # DateTime::Duration object
\&
\&    print $o\->t1\->minutes;    # 5
\&    print $o\->t1\->nanosecond; # 3000000
\&
\&    $o\->start(\*(Aq12:34:56.12345\*(Aq);
\&
\&    print $o\->start\->nanosecond; # 123450000
\&    print $o\->start\->as_string;  # 12:34:56.12345
\&
\&    $o\->end(\*(Aq6pm\*(Aq);
\&
\&    $tc = $o\->end; # Time::Clock object
\&
\&    print $o\->end\->hour; # 18
\&    print $o\->end\->ampm; # PM
\&
\&    print $o\->end\->format(\*(Aq%I:%M %p\*(Aq); # 6:00 PM
\&    $o\->end\->add(hours => 1);
\&    print $o\->end\->format(\*(Aq%I:%M %p\*(Aq); # 7:00 PM
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Rose::DB::Object::MakeMethods::Time\*(C'\fR creates methods that deal with times, and inherits from Rose::Object::MakeMethods.  See the Rose::Object::MakeMethods documentation to learn about the interface.  The method types provided by this module are described below.
.PP
All method types defined by this module are designed to work with objects that are subclasses of (or otherwise conform to the interface of) Rose::DB::Object.  In particular, the object is expected to have a db method that returns a Rose::DB\-derived object.  See the Rose::DB::Object documentation for more details.
.SH "METHODS TYPES"
.IX Header "METHODS TYPES"
.IP "\fBinterval\fR" 4
.IX Item "interval"
Create get/set methods for interval (years, months, days, hours, minutes, seconds) attributes.
.RS 4
.IP "Options" 4
.IX Item "Options"
.RS 4
.PD 0
.ie n .IP """default""" 4
.el .IP "\f(CWdefault\fR" 4
.IX Item "default"
.PD
Determines the default value of the attribute.
.ie n .IP """end_of_month_mode""" 4
.el .IP "\f(CWend_of_month_mode\fR" 4
.IX Item "end_of_month_mode"
This mode determines how math is done on duration objects.  If defined, the \f(CW\*(C`end_of_month\*(C'\fR setting for each DateTime::Duration object created by this method will be set to the specified mode.  Otherwise, the \f(CW\*(C`end_of_month\*(C'\fR parameter will not be passed to the DateTime::Duration constructor.
.Sp
Valid modes are \f(CW\*(C`wrap\*(C'\fR, \f(CW\*(C`limit\*(C'\fR, and \f(CW\*(C`preserve\*(C'\fR.  See the documentation for DateTime::Duration for a full explanation.
.ie n .IP """hash_key""" 4
.el .IP "\f(CWhash_key\fR" 4
.IX Item "hash_key"
The key inside the hash-based object to use for the storage of this
attribute.  Defaults to the name of the method.
.ie n .IP """interface""" 4
.el .IP "\f(CWinterface\fR" 4
.IX Item "interface"
Choose the interface.  The default is \f(CW\*(C`get_set\*(C'\fR.
.ie n .IP """scale""" 4
.el .IP "\f(CWscale\fR" 4
.IX Item "scale"
An integer number of places past the decimal point preserved for fractional seconds.  Defaults to 0.
.RE
.RS 4
.RE
.IP "Interfaces" 4
.IX Item "Interfaces"
.RS 4
.PD 0
.ie n .IP """get_set""" 4
.el .IP "\f(CWget_set\fR" 4
.IX Item "get_set"
.PD
Creates a get/set method for a interval (years, months, days, hours, minutes, seconds) attribute.  When setting the attribute, the value is passed through the parse_interval method of the object's db attribute.  If that fails, a fatal error will occur.
.Sp
When saving to the database, the method will pass the attribute value through the format_interval method of the object's db attribute before returning it.
.Sp
This method is designed to allow interval values to make a round trip from and back into the database without ever being \*(L"inflated\*(R" into DateTime::Duration objects.  Any use of the attribute (get or set) outside the context of loading from or saving to the database will cause the value to be \*(L"inflated\*(R" using the  parse_interval method of the object's db attribute.
.ie n .IP """get""" 4
.el .IP "\f(CWget\fR" 4
.IX Item "get"
Creates an accessor method for a interval (years, months, days, hours, minutes, seconds) attribute.  This method behaves like the \f(CW\*(C`get_set\*(C'\fR method, except that the value cannot be set.
.ie n .IP """set""" 4
.el .IP "\f(CWset\fR" 4
.IX Item "set"
Creates a mutator method for a interval (years, months, days, hours, minutes, seconds) attribute.  This method behaves like the \f(CW\*(C`get_set\*(C'\fR method, except that a fatal error will occur if no arguments are passed.
.RE
.RS 4
.RE
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 1
\&    package MyDBObject;
\&
\&    use base \*(AqRose::DB::Object\*(Aq;
\&
\&    use Rose::DB::Object::MakeMethods::Time
\&    (
\&      time => 
\&      [
\&        \*(Aqt1\*(Aq => { scale => 6 },
\&        \*(Aqt2\*(Aq => { default => \*(Aq3 days 6 minutes 5 seconds\*(Aq },
\&      ],
\&    );
\&
\&    ...
\&
\&    $o\->t1(\*(Aq5 minutes 0.003 seconds\*(Aq);
\&
\&    $dt_dur = $o\->t1; # DateTime::Duration object
\&
\&    print $o\->t1\->minutes;    # 5
\&    print $o\->t1\->nanosecond; # 3000000
.Ve
.RE
.IP "\fBtime\fR" 4
.IX Item "time"
Create get/set methods for time (hours, minutes, seconds) attributes.  Fractional seconds up to nanosecond precision are supported.
.RS 4
.IP "Options" 4
.IX Item "Options"
.RS 4
.PD 0
.ie n .IP """default""" 4
.el .IP "\f(CWdefault\fR" 4
.IX Item "default"
.PD
Determines the default value of the attribute.
.ie n .IP """hash_key""" 4
.el .IP "\f(CWhash_key\fR" 4
.IX Item "hash_key"
The key inside the hash-based object to use for the storage of this
attribute.  Defaults to the name of the method.
.ie n .IP """interface""" 4
.el .IP "\f(CWinterface\fR" 4
.IX Item "interface"
Choose the interface.  The default is \f(CW\*(C`get_set\*(C'\fR.
.ie n .IP """scale""" 4
.el .IP "\f(CWscale\fR" 4
.IX Item "scale"
An integer number of places past the decimal point preserved for fractional seconds.  Defaults to 0.  The maximum value is 9.
.RE
.RS 4
.RE
.IP "Interfaces" 4
.IX Item "Interfaces"
.RS 4
.PD 0
.ie n .IP """get_set""" 4
.el .IP "\f(CWget_set\fR" 4
.IX Item "get_set"
.PD
Creates a get/set method for a time attribute.  When setting the attribute, the value is passed through the parse_time method of the object's db attribute.  If that fails, a fatal error will occur.
.Sp
When saving to the database, the method will pass the attribute value through the format_time method of the object's db attribute before returning it.
.Sp
This method is designed to allow time values to make a round trip from and back into the database without ever being \*(L"inflated\*(R" into Time::Clock objects.  Any use of the attribute (get or set) outside the context of loading from or saving to the database will cause the value to be \*(L"inflated\*(R" using the  parse_time method of the object's db attribute.
.ie n .IP """get""" 4
.el .IP "\f(CWget\fR" 4
.IX Item "get"
Creates an accessor method for a time attribute.  This method behaves like the \f(CW\*(C`get_set\*(C'\fR method, except that the value cannot be set.
.ie n .IP """set""" 4
.el .IP "\f(CWset\fR" 4
.IX Item "set"
Creates a mutator method for a time attribute.  This method behaves like the \f(CW\*(C`get_set\*(C'\fR method, except that a fatal error will occur if no arguments are passed.
.RE
.RS 4
.RE
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 1
\&    package MyDBObject;
\&
\&    use base \*(AqRose::DB::Object\*(Aq;
\&
\&    use Rose::DB::Object::MakeMethods::Time
\&    (
\&      time =>
\&      [
\&        start => { scale => 5 },
\&        end   => { default => \*(Aq12:34:56\*(Aq },
\&      ],
\&    );
\&
\&    ...
\&
\&    $o\->start(\*(Aq12:34:56.12345\*(Aq);
\&
\&    print $o\->start\->nanosecond; # 123450000
\&    print $o\->start\->as_string;  # 12:34:56.12345
\&
\&    $o\->end(\*(Aq6pm\*(Aq);
\&
\&    $tc = $o\->end; # Time::Clock object
\&
\&    print $o\->end\->hour; # 18
\&    print $o\->end\->ampm; # PM
\&
\&    print $o\->end\->format(\*(Aq%I:%M %p\*(Aq); # 6:00 PM
\&    $o\->end\->add(hours => 1);
\&    print $o\->end\->format(\*(Aq%I:%M %p\*(Aq); # 7:00 PM
.Ve
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
John C. Siracusa (siracusa@gmail.com)
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 2010 by John C. Siracusa.  All rights reserved.  This program is
free software; you can redistribute it and/or modify it under the same terms
as Perl itself.
