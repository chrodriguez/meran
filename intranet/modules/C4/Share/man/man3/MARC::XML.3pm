.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML 3"
.TH XML 3 "2000-04-23" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MARC::XML \- A subclass of MARC.pm to provide XML support.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use MARC::XML;
\&
\&    #read in some MARC and output some XML
\&    $myobject = MARC::XML\->new("marc.mrc","usmarc");
\&    $myobject\->output({file=>">marc.xml",format=>"xml"});
\&
\&    #read in some XML and output some MARC
\&    $myobject = MARC::XML\->new("marc.xml","xml");
\&    $myobject\->output({file=>">marc.mrc","usmarc");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1MARC::XML\s0 is a subclass of \s-1MARC\s0.pm which provides methods for round-trip
conversions between \s-1MARC\s0 and \s-1XML\s0. \s-1MARC::XML\s0 requires that you have the
\&\s-1CPAN\s0 modules \s-1MARC\s0.pm and XML::Parser installed in your Perl library.
Version 1.04 of \s-1MARC\s0.pm and 2.27 of XML::Parser (or later) are required.
As a subclass of \s-1MARC\s0.pm a \s-1MARC::XML\s0 object will by default have the full
functionality of a \s-1MARC\s0.pm object. See the \s-1MARC\s0.pm documentation for details.
.PP
The \s-1XML\s0 file that is read and generated by \s-1MARC::XML\s0 is not associated with a 
Document Type Definition (\s-1DTD\s0). This means that your files need to be
well-formed, but they will not be validated. When performing \s-1XML\-\s0>\s-1MARC\s0
conversion it is important that the \s-1XML\s0 file is structured in a particular
way. Fortunately, this is the same format that is generated by the \s-1MARC\-\s0>\s-1XML\s0
conversion, so you should be able to be able to move your data easily between
the two formats.
.SS "Downloading and Intalling"
.IX Subsection "Downloading and Intalling"
.IP "Download" 4
.IX Item "Download"
First make sure that you have \fB\s-1MARC\s0.pm\fR and \fBXML::Parser\fR installed.
Both Perl extensions are available from the \s-1CPAN\s0
http://www.cpan.org/modules/by\-module, and they must be available in 
your Perl library for \s-1MARC::XML\s0 to work properly.
.Sp
\&\s-1MARC::XML\s0 is provided in standard \s-1CPAN\s0 distribution format. Download the
latest version from http://www.cpan.org/modules/by\-module/MARC/XML. It will
extract into a directory MARC-XML-version with any necessary subdirectories.
Once you have extracted the archive Change into the MARC-XML top directory
and execute the following command depending on your platform.
.IP "Unix" 4
.IX Item "Unix"
.Vb 4
\&    perl Makefile.PL
\&    make
\&    make test
\&    make install
.Ve
.IP "Win9x/WinNT/Win2000" 4
.IX Item "Win9x/WinNT/Win2000"
.Vb 3
\&    perl Makefile.PL
\&    perl test.pl
\&    perl install.pl
.Ve
.IP "Test" 4
.IX Item "Test"
Once you have installed, you can check if Perl can find it. Change to some
other directory and execute from the command line:
.Sp
.Vb 1
\&    perl \-e "use MARC::XML"
.Ve
.Sp
If you \fBdo not\fR get any response that means everything is \s-1OK\s0! If you get an
error like \fICan't locate method \*(L"use\*(R" via package \s-1MARC::XML\s0\fR.
then Perl is not able to find MARC::XML\*(--double check that the file copied
it into the right place during the install.
.SS "Todo"
.IX Subsection "Todo"
.IP "\(bu" 4
Checking for field and record lengths to make sure that data read in from
an \s-1XML\s0 file does not exceed the limited space available in a \s-1MARC\s0 record.
.IP "\(bu" 4
Support for \s-1MARC\s0 <\-> Unicode character conversions.
.IP "\(bu" 4
\&\s-1MARC\s0 <\-> \s-1EAD\s0 (Encoded Archival Description) conversion?
.IP "\(bu" 4
Support for \s-1MARC\s0 <\-> \s-1DC/RDF\s0 (Dublin Core Metadata encoded in the
Resource Description Framework)?
.IP "\(bu" 4
Support for \s-1MARC\s0 <\-> \s-1FGDC\s0 Metadata (Federal Geographic Data Committee)
conversion?
.SS "Web Interface"
.IX Subsection "Web Interface"
A web interface to \s-1MARC\s0.pm and \s-1MARC::XML\s0 is available at
http://libstaff.lib.odu.edu/cgi\-bin/marc.cgi where you can upload records and
observe the results. If you'd like to check out the cgi script take a look at
http://libstaff.lib.odu.edu/depts/systems/iii/scripts/MARCpm/marc\-cgi.txt
However, to get the full functionality you will want to install \s-1MARC\s0.pm and
\&\s-1MARC::XML\s0 on your server or \s-1PC\s0.
.SS "Sample \s-1XML\s0 file"
.IX Subsection "Sample XML file"
Below is an example of the flavor of \s-1XML\s0 that \s-1MARC::XML\s0 will generate and read.
There are only four elements: the \fI<marc>\fR pair that serves as the
root for the file; the \fI<record>\fR pair that encloses each record;
the \fI<field>\fR pair which encloses each field; and the
\&\fI<subfield>\fR pair which encloses each subfield. In addition the
\&\fI<field>\fR and \fI<subfield>\fR tags have three possible
attributes: \fItype\fR which defines the specific tag or subfield ; as well as
\&\fIi1\fR and \fIi2\fR which allow you to define the indicators for a specific tag.
.PP
.Vb 1
\&   <?xml version="1.0" encoding="UTF\-8" standalone="yes"?>
\&
\&   <marc>
\&
\&   <record>
\&   <field type="000">00901cam  2200241Ia 45e0</field>
\&   <field type="001">ocm01047729 </field>
\&   <field type="003">OCoLC</field>
\&   <field type="005">19990808143752.0</field>
\&   <field type="008">741021s1884    enkaf         000 1 eng d</field>
\&   <field type="040" i1=" " i2=" ">
\&      <subfield type="a">KSU</subfield>
\&      <subfield type="c">KSU</subfield>
\&      <subfield type="d">GZM</subfield>
\&   </field>
\&   <field type="090" i1=" " i2=" ">
\&      <subfield type="a">PS1305</subfield>
\&      <subfield type="b">.A1 1884</subfield>
\&   </field>
\&   <field type="049" i1=" " i2=" ">
\&      <subfield type="a">VODN</subfield>
\&   </field>
\&   <field type="100" i1="1" i2=" ">
\&      <subfield type="a">Twain, Mark,</subfield>
\&      <subfield type="d">1835\-1910.</subfield>
\&   </field>
\&   <field type="245" i1="1" i2="4">
\&      <subfield type="a">The adventures of Huckleberry Finn :</subfield>
\&      <subfield type="b">(Tom Sawyer\*(Aqs comrade) : scene, the Mississippi Valley : time, forty to fifty years ago /</subfield>
\&      <subfield type="c">by Mark Twain (Samuel Clemens) ; with 174 illustrations.</subfield>
\&   </field>
\&   <field type="260" i1=" " i2=" ">
\&      <subfield type="a">London :</subfield>
\&      <subfield type="b">Chatto &amp; Windus,</subfield>
\&      <subfield type="c">1884.</subfield>
\&   </field>
\&   <field type="300" i1=" " i2=" ">
\&      <subfield type="a">xvi, 438 p., [1] leaf of plates :</subfield>
\&      <subfield type="b">ill. ;</subfield>
\&      <subfield type="c">20 cm.</subfield>
\&   </field>
\&   <field type="500" i1=" " i2=" ">
\&      <subfield type="a">First English ed.</subfield>
\&   </field>
\&   <field type="500" i1=" " i2=" ">
\&      <subfield type="a">State B; gatherings saddle\-stitched with wire staples.</subfield>
\&   </field>
\&   <field type="500" i1=" " i2=" ">
\&      <subfield type="a">Advertisements on p. [1]\-32 at end.</subfield>
\&   </field>
\&   <field type="500" i1=" " i2=" ">
\&      <subfield type="a">Bound in red S cloth; stamped in black and gold.</subfield>
\&   </field>
\&   <field type="510" i1="4" i2=" ">
\&      <subfield type="a">BAL</subfield>
\&      <subfield type="c">3414.</subfield>
\&   </field>
\&   <field type="740" i1="0" i2="1">
\&      <subfield type="a">Huckleberry Finn.</subfield>
\&   </field>
\&   <field type="994" i1=" " i2=" ">
\&      <subfield type="a">E0</subfield>
\&      <subfield type="b">VOD</subfield>
\&   </field>
\&   </record>
\&
\&   </marc>
.Ve
.SH "METHODS"
.IX Header "METHODS"
Here is a list of methods available to you in \s-1MARC::XML\s0.
.SS "\fInew()\fP"
.IX Subsection "new()"
\&\s-1MARC::XML\s0 overides \s-1MARC\s0.pm's \fInew()\fR method to create a \s-1MARC::XML\s0 object. 
Similar to \s-1MARC\s0.pm's \fInew()\fR it can take two arguments: a file name, and 
the format of the file to read in. However \s-1MARC::XML\s0's \fInew()\fR gives you an 
extra format choice \*(L"\s-1XML\s0\*(R" (which is also the default). Internally, the
\&\s-1XML\s0 source is converted to a series of \fB\f(BIaddfield()\fB\fR and \fB\f(BIcreaterecord()\fB\fR
calls. The order of \s-1MARC\s0 tags is preserved by default. But if an optional
third argument is passed to \fInew()\fR, it is used as the \fIordered\fR option for
the \fB\f(BIaddfield()\fB\fR calls. Like \s-1MARC\s0.pm, it is not possible to read only part
of an \s-1XML\s0 input file using \fInew()\fR. Some examples:
.PP
.Vb 4
\&      #read in an XML file called myxmlfile.xml
\&   use MARC::XML;
\&   $x = MARC::XML\->new("myxmlfile.xml","xml");
\&   $x = MARC::XML\->new("needsort.xml","xml","y");
.Ve
.PP
Since the full funtionality of \s-1MARC\s0.pm is also available you can read in
other types of files as well. Although \fInew()\fR with no arguments will create
an object with no records, just like \s-1MARC\s0.pm, \s-1XML\s0 format not supported by
\&\fIopenmarc()\fR and \fInextmarc()\fR for input. The \fIopenxml()\fR and \fInextxml()\fR methods
provide similar operation. And you can output from \s-1XML\s0 to a different
format source.
.PP
.Vb 4
\&      #read in a MARC file called mymarcfile.mrc
\&   use MARC::XML;
\&   $x = MARC::XML\->new("mymarcfile.mrc","usmarc"); 
\&   $x = MARC::XML\->new();
.Ve
.SS "\fIoutput()\fP"
.IX Subsection "output()"
\&\s-1MARC::XML\s0's \fIoutput()\fR method allows you to output the \s-1MARC\s0 object as an \s-1XML\s0
file. It takes eight arguments: \fIfile\fR, \fIformat\fR, \fIlineterm\fR, and
\&\fIrecords\fR have the same function as in \s-1MARC\s0.pm. If not specified, \fIformat\fR
defaults to \*(L"xml\*(R" and \fIlineterm\fR defaults to \*(L"\en\*(R". A \fIcharset\fR parameter
accepts a hash-reference to a user supplied character translation table.
The internal default is based on the LoC \*(L"register.sgm\*(R" table supplied
with the LoC. \s-1SGML\s0 utilities. You can use the \fBansel_default\fR method to get
a hash-reference to it if you only want to modify a couple of characters.
See example below. The \fIencoding\fR, \fIdtd_file\fR, and \fIstandalone\fR arguments
correspond to the specified fields in an \s-1XML\s0 header. If not specified,
\&\fIstandalone\fR defaults to \*(L"yes\*(R" and \fIencoding\fR to \*(L"US-ASCII\*(R". If an optional
\&\fIdtd_file\fR is specified, a \fBDocument Type Declaration\fR is added to the
output to contain the data.
.PP
.Vb 3
\&   use MARC::XML;
\&   $x = MARC::XML\->new("mymarcfile.mrc","usmarc");
\&   $x\->output({file=>">myxmlfile.xml",format=>"xml"});
.Ve
.PP
Or if you only want to output the first record:
.PP
.Vb 1
\&   $x\->output({file=>">myxmlfile.xml",format=>"xml",records=>[1]});
.Ve
.PP
If you like you can also output portions of the \s-1XML\s0 file using the \fIformat\fR 
options: \fIxml_header\fR, \fIxml_body\fR, and \fIxml_footer\fR. Remember to prefix
your file name with a >> to append though. This example will output
record 1 twice.
.PP
.Vb 6
\&   use MARC::XML;
\&   $x = MARC::XML\->new("mymarcfile.mrc","usmarc");
\&   $x\->output({file=>">myxmlfile.xml",format=>"xml_header"});
\&   $x\->output({file=>">>myxmlfile.xml",format=>"xml_body",records=>[1]});
\&   $x\->output({file=>">>myxmlfile.xml",format=>"xml_body",records=>[1]});
\&   $x\->output({file=>">>myxmlfile.xml",foramt=>"xml_footer"});
.Ve
.PP
Instead of outputting to a file, you can also capture the output in a
variable if you wish.
.PP
.Vb 3
\&   use MARC::XML;
\&   $x = MARC::XML\->new("mymarcfile.mrc","usmarc");
\&   $myxml = $x\->output({format=>"xml"});
.Ve
.PP
As with \fInew()\fR the full functionality of \s-1MARC\s0.pm's \fIoutput()\fR method are
available to you as well. 
So you could read in an \s-1XML\s0 file and then output it as ascii text:
.PP
.Vb 3
\&   use MARC::XML;
\&   $x = MARC::XML\->new("myxmlfile.xml","xml");
\&   $x\->output({file=>">mytextfile.txt","ascii");
.Ve
.SH "NOTES"
.IX Header "NOTES"
Please let us know if you run into any difficulties using \s-1MARC\s0.pm\*(--we'd be
happy to try to help. Also, please contact us if you notice any bugs, or
if you would like to suggest an improvement/enhancement. Email addresses 
are listed at the bottom of this page.
.PP
Development of \s-1MARC\s0.pm and other library oriented Perl utilities is conducted
on the Perl4Lib listserv. Perl4Lib is an open list and is an ideal place to
ask questions about \s-1MARC\s0.pm. Subscription information is available at
http://www.vims.edu/perl4lib
.PP
Two global boolean variables are reserved for test and debugging. Both are
\&\*(L"0\*(R" (off) by default. The \f(CW$XTEST\fR variable disables internal error messages
generated using \fICarp\fR. It should only be used in the automatic test suite.
The \f(CW$XDEBUG\fR variable adds verbose diagnostic messages.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
The \fBeg\fR subdirectory contains a few complete examples to get you started.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chuck Bearden cbearden@rice.edu
.PP
Bill Birthisel wcbirthisel@alum.mit.edu
.PP
Derek Lane dereklane@pobox.com
.PP
Charles McFadden chuck@vims.edu
.PP
Ed Summers ed@cheetahmail.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \s-1MARC\s0.pm, \s-1MARC\s0 http://lcweb.loc.gov/marc , \s-1XML\s0 http://www.w3.org/xml .
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1999,2000, Bearden, Birthisel, Lane, McFadden, and Summers.
All rights reserved. This module is free software; you can redistribute
it and/or modify it under the same terms as Perl itself. 23 April 2000.
Portions Copyright (C) 1999,2000, Duke University, Lane.
