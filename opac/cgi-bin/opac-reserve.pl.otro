#!/usr/bin/perl
# NOTE: This file uses standard 8-character tabs

use strict;
require Exporter;
use CGI;

use C4::Search;
use C4::AR::Auth;         # checkauth, getborrowernumber.
use C4::Koha;
use C4::Circulation::Circ2;
use C4::Reserves2;

use HTML::Template;
use C4::Date;
use C4::Context;

my $MAXIMUM_NUMBER_OF_RESERVES = C4::Context->preference("maxreserves");

my $query = new CGI;
my ($template, $borrowernumber, $cookie)
    = get_template_and_user({template_name => "opac-reserve.tmpl",
			     query => $query,
			     type => "opac",
			     authnotrequired => 0,
			     flagsrequired => {borrow => 1},
			     debug => 1,
			     });

# get borrower information ....
my ($borr, $flags) = getpatroninformation(undef, $borrowernumber);
my @bordat;
$bordat[0] = $borr;

# get biblionumber.....
my $biblionumber = $query->param('bib');

#Para imprimir algo en un archivo Einar.
#open L, ">>/tmp/mono";
#printf L "$biblionumber";
#printf L "%10s \n", $biblionumber ;
#close L;

my $bibdata = bibdata($biblionumber);
 $template->param($bibdata);
 $template->param(BORROWER_INFO => \@bordat, biblionumber => $biblionumber);

# get the rank number....
my $rank;
#Matias: Lo comento porque lo hago mas abajo..
#my ($rank,$reserves) = FindReserves($biblionumber,'');
#$template->param(reservecount => $rank);

#foreach my $res (@$reserves) {
#   if ($res->{'found'} eq 'W') {
#	$rank--;
#    }
#}

#$rank++;
#$template->param(rank => $rank);

# pass the pickup branch along....
my $branch = $query->param('branch');
$template->param(branch => $branch);

my $branches = getbranches();
$template->param(branchname => $branches->{$branch}->{'branchname'});


# make branch selection options...
#my $branchoptions = '';
my @branches;
my @select_branch;
my %select_branches;

foreach my $branch (keys %$branches) {
	if ($branch) {
		push @select_branch, $branch;
		$select_branches{$branch} = $branches->{$branch}->{'branchname'};
	}
}
$branch=getbranch($query,$branches);
my $CGIbranch=CGI::scrolling_list( -name     => 'branch',
			-values   => \@select_branch,
			-labels   => \%select_branches,
			-size     => 1,
			-multiple => 0 );
$template->param( CGIbranch => $CGIbranch);

#### THIS IS A BIT OF A HACK BECAUSE THE BIBLIOITEMS DATA IS A LITTLE MESSED UP!
# get the itemtype data....

 my @items = ItemInfo(undef, $biblionumber, 'opac');

#######################################################
# old version, add so that old templates still work
#my %types_old;

#foreach my $itm (@items) {
#    my $ity = $itm->{'itemtype'};
#    unless ($types_old {$ity}) {
#	$types_old{$ity}->{'itemtype'} = $ity;
#	$types_old{$ity}->{'branchinfo'}->{$itm->{'branchcode'}} = 1;
#	$types_old{$ity}->{'description'} = $itm->{'description'};
#    } else {
#	$types_old{$ity}->{'branchinfo'}->{$itm->{'branchcode'}} ++;
#    }
#}

#foreach my $type (values %types_old) {
#    my $copies = "";
#    foreach my $bc (keys %{$type->{'branchinfo'}}) {
#	$copies .= $branches->{$bc}->{'branchname'}."(".$type->{'branchinfo'}->{$bc}.")";
#    }
#    $type->{'copies'} = $copies;
#}

#my @types_old = values %types_old;


##MATIAS
my ($count,@bibliotypes)=bibitems($biblionumber);
my @bitypes;

for (my $i=0;$i<$count;$i++){

        $bitypes[$i]->{'bibitem'}=$bibliotypes[$i]->{'biblioitemnumber'};
 	$bitypes[$i]->{'bibitemtype'}=$bibliotypes[$i]->{'biblioitemnumber'}." GRUPO - ". $bibliotypes[$i]->{'description'};
	$bitypes[$i]->{'volume'} = $bibliotypes[$i]->{'volume'};
        $bitypes[$i]->{'volumeddesc'} = $bibliotypes[$i]->{'volumeddesc'};
	my ($available,$lost,$notloan,$cancel,$late,$isu,$dates,$reserve,@branches)=groupinfo(undef, $bibliotypes[$i]->{'biblioitemnumber'},$biblionumber);
	my $copies = "";

	for (my $j=0;$j<@branches;$j++) {
		  $copies .= $branches[$j]->{'branchname'}."(".$branches[$j]->{'count'}.")<br> ";
					}

	  $bitypes[$i]->{'branchinfo'} = $copies;
  	  $bitypes[$i]->{'available'} = $available;
	  $bitypes[$i]->{'issue'} = $isu;
	  $bitypes[$i]->{'issuelist'} = $dates;
          $bitypes[$i]->{'reserve'} = $reserve;

	}

  $template->param(BITYPES => \@bitypes);


##

#LUCIANO
#my $numeroDeBiblioItem;
#my @types_old;

#foreach my $itm (@items) {
  
#  $numeroDeBiblioItem = $itm->{'biblioitemnumber'};

#   if ($numeroDeBiblioItem eq $itm->{'biblioitemnumber'}) {  

#    my $ity = $itm->{'itemtype'};
#    unless ($types_old {$ity}) {
#	$types_old{$ity}->{'itemtype'} = $ity;
#	$types_old{$ity}->{'branchinfo'}->{$itm->{'branchcode'}} = 1;
#	$types_old{$ity}->{'description'} = $itm->{'description'};
#    } else {
#	$types_old{$ity}->{'branchinfo'}->{$itm->{'branchcode'}} ++;
#    }

#    next;
#    $numeroDeBiblioItem = $itm->{'biblioitemnumber'};
#  }

#  foreach my $type (values %types_old) {
#    my $copies = "";
#    foreach my $bc (keys %{$type->{'branchinfo'}}) {
#	$copies .= $branches->{$bc}->{'branchname'}."(".$type->{'branchinfo'}->{$bc}.")";
#    }
#    $type->{'copies'} = $copies;
#  }

#@types_old = values %types_old;
#$template->param(TYPES => \@types_old);
#}

#FIN LUCIANO

# end old version
################################

my @temp;
foreach my $itm (@items) {
    push @temp, $itm if $itm->{'itemtype'};
}
@items = @temp;
my $itemcount = @items;
$template->param(itemcount => $itemcount);

my %bitypes;
my %bibitemtypes;

##Matias
foreach my $itm (@items) {
	$bibitemtypes{$itm->{'biblioitemnumber'}} = $itm;
}

#my @duedates;
#foreach my $itm (@items) {
#    push @duedates, {date_due => format_date($itm->{'date_due'})} if defined $itm->{'date_due'};
#    $itm->{$itm->{'publictype'}} = 1;
#    # FIXME CalcReserveFee is supposed to be internal-use-only
#    my $fee  = CalcReserveFee(undef, $borrowernumber, $itm->{'biblionumber'},'a',($itm->{'biblioitemnumber'}));
#    $fee = sprintf "%.02f", $fee;
#    $itm->{'reservefee'} = $fee;
#    my $pty = $itm->{'publictype'};
#    $itemtypes{$itm->{'itemtype'}} = $itm;
#    unless ($types {$pty}) {
#	$types{$pty}->{'count'} = 1;
#	$types{$pty}->{$itm->{'itemtype'}} = 1;
#	push @{$types{$pty}->{'items'}}, $itm;
#    } else {
#	unless ($types{$pty}->{$itm->{'itemtype'}}) {
#	    $types{$pty}->{'count'}++;
#	    $types{$pty}->{$itm->{'itemtype'}} = 1;
#	    push @{$types{$pty}->{'items'}}, $itm;
#	}
#    }
#}
#
#
#$template->param(ITEMS => \@duedates);

#my $width = keys %types;
#my @publictypes = sort {$b->{'count'} <=> $a->{'count'}} values %types;
#my $typecount;

#}

#$template->param(onlyone => 1) if $typecount == 1;
#my @typerows;
#for (my $rownum=0;$rownum<$publictypes[0]->{'count'} ;$rownum++) {
#    my @row;
#    foreach my $pty (@publictypes) {
#	my @items = @{$pty->{'items'}};
#	push @row, $items[$rownum] if defined $items[$rownum];
#    }
#    my $last = @row;
#    $row[$last-1]->{'last'} =1 if $last == $width;
#    my $fill = ($width - $last)*2;
#    $fill-- if $fill;
#    push @typerows, {ROW => \@row, fill => $fill};
#}
#$template->param(TYPE_ROWS => \@typerows);
#$width = 2*$width -1;
#$template->param(totalwidth => 2*$width-1,
#			     LibraryName => C4::Context->preference("LibraryName"),
#);

if ($query->param('item_types_selected')) {
	# this is what happens after the itemtypes have been selected. Stage 2
	my @bibitemtypes = $query->param('bibitemtype');
	my $fee = 0;
	my $proceed = 0;
	my $reserved=0; # Matias


#Falta el manejo de fechas
my $required= $query->param('required-year')."-".$query->param('required-month')."-".$query->param('required-day') ;
#my $expires= $query->param('expires-year')."-".$query->param('expires-month')."-".$query->param('expires-day') ;

my @datearr = localtime(time);
my $today =(1900+$datearr[5])."-".($datearr[4]+1)."-".$datearr[3];

if ( ($query->param('required-year') eq 0 )or ($query->param('required-month') eq 0) or ($query->param('required-day') eq 0))
{$required  = $today;}

#if ( ($query->param('expires-year') eq 0 )or ($query->param('expires-month') eq 0) or ($query->param('expires-day') eq 0))
#{$expires  = 0;}


if($required eq $today){$template->param(today => 1);}


$template->param(required_date => $required);
#$template->param(expires_date => $expires);





	if (@bibitemtypes) {
		my @newbitypes;
		my $i=0;
		foreach my $bitmtype (@bibitemtypes) {
		##Matias - para que sea una reserva de un grupo por persona

       my ($resnum, @reserves) = Findgroupreserve($bitmtype ,$biblionumber);
         $rank=$resnum;                                                                                                                   
	for (my $i=0;$i<$resnum;$i++){
            if ($reserves[$i]->{'borrowernumber'} eq $borrowernumber) {
                $template->param(message => 1);
                $template->param(already_reserved => 1);
                $template->param(item_types_selected=> 0);
		$template->param(select_item_types=>1);
		$reserved=1;
	}

	#Matias para la prioridad
	if ($reserves[$i]->{'found'} eq 'W') {
       	  $rank--;
    	 			}
 	 }
	$rank++;
   $template->param(rank => $rank);

		for (my $i=0;$i<$count;$i++){
        		if ($bibliotypes[$i]->{'biblioitemnumber'} eq $bitmtype){
		$newbitypes[$i]->{'bibitem'}=$bibliotypes[$i]->{'biblioitemnumber'};
		$newbitypes[$i]->{'volume'}=$bibliotypes[$i]->{'volume'};
		$newbitypes[$i]->{'volumeddesc'}=$bibliotypes[$i]->{'volumeddesc'};
		$newbitypes[$i]->{'bibitemtype'}=$bibliotypes[$i]->{'biblioitemnumber'}." GRUPO - ". $bibliotypes[$i]->{'description'};
							  	               }
					  }

		$i++;
		}
	if($reserved eq 0){ #Para que no sobreescriba los datos cuando vuelva a la pagina anterior si ya hay una reserva para ese grupo
		$template->param(BITYPES => \@newbitypes);
			} #

		foreach my $bitype (@bibitemtypes) {
		my @reqbibs;
		foreach my $item (@items) {
			if ($item->{'biblioitemnumber'} eq $bitype) {
			push @reqbibs, $item->{'biblioitemnumber'};
			}
		}
		$fee += CalcReserveFee(undef,$borrowernumber,$biblionumber,'o',\@reqbibs);
		}
		$proceed = 1;
	} elsif ($query->param('all')) {
		$template->param(all => 1);
		$fee = 1;
		$proceed = 1;
	}
	warn "branch :$branch:";
	if ($reserved ne 1){	
	if ($proceed && $branch ) {

	if($fee ne 0){  $fee = sprintf "%.02f", $fee;
			$template->param(fee => $fee);}
		$template->param(item_types_selected => 1);
	} else {
		$template->param(message => 1);
		$template->param(no_items_selected => 1) unless ($proceed);
		$template->param(no_branch_selected =>1) unless ($branch);
	}}
} elsif ($query->param('place_reserve')) {
	# here we actually do the reserveration. Stage 3.
	my $title = $bibdata->{'title'};
	my @bibitemtypes = $query->param('bibitemtype');
	$rank = $query->param('rank');
	my @reqbibs;

#Matias: Fecha
    my $required_date = $query->param('required_date');
   # my $expires_date = $query->param('expires_date');
   #if ($expires_date eq 0)	{$expires_date ='NULL';};
#
	foreach my $bitype (@bibitemtypes) {if ($bitype ne '') {push @reqbibs, $bitype}}
	my $env;
	CreateReserve(\$env,$branch,$borrowernumber,$biblionumber,'o',\@reqbibs,$rank,'',$title,'',$required_date);

	print $query->redirect("/cgi-bin/koha/opac-search.pl");
} else {
	# Here we check that the borrower can actually make reserves Stage 1.
	my $noreserves = 0;
	my $maxoutstanding = C4::Context->preference("maxoustanding");
	if ($borr->{'amountoutstanding'} > $maxoutstanding) {
		my $amount = sprintf "\$%.02f", $borr->{'amountoutstanding'};
		$template->param(message => 1);
		$noreserves = 1;
		$template->param(too_much_oweing => $amount);
	}
	my ($resnum, $reserves) = FindReserves('', $borrowernumber);
	$template->param(RESERVES => $reserves);
	if ($resnum >= $MAXIMUM_NUMBER_OF_RESERVES) {
		$template->param(message => 1);
		$noreserves = 1;
		$template->param(too_many_reserves => $resnum);
	}
#LA verificacion de la reserva se hace en cada grupo
	#foreach my $res (@$reserves) {
	#	if ($res->{'biblionumber'} == $biblionumber) {
	#	$template->param(message => 1);
	#	$noreserves = 1;
	#	$template->param(already_reserved => 1);
	#	}
###	}
	unless ($noreserves) {
		$template->param(BITYPES => \@bitypes) ;# MAtias
		$template->param(select_item_types => 1);
	}
}

$template->param (pagetitle => "Reserva de ejemplares");

# check that you can actually make the reserve.

output_html_with_http_headers $query, $cookie, $template->output;

# Local Variables:
# tab-width: 8
# End:
