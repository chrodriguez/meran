.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Rose::DateTime::Util 3"
.TH Rose::DateTime::Util 3 "2011-02-19" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rose::DateTime::Util \- Some simple DateTime wrapper functions.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Rose::DateTime::Util qw(:all);
\&
\&    $now  = parse_date(\*(Aqnow\*(Aq);
\&    $then = parse_date(\*(Aq12/25/2001 11pm\*(Aq);
\&
\&    print $now\->day_of_week; # e.g., "Monday"
\&
\&    # "December 25th 2001 at 11:00:00 PM"
\&    $date_text = format_date($then, "%B %E %Y at %t");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Rose::DateTime::Util is a thin wrapper around DateTime that provides a very simple date parser and a few extra date formatting options.
.SH "EXPORTS"
.IX Header "EXPORTS"
Rose::DateTime::Util does not export any function names by default.
.PP
The 'all' tag:
.PP
.Vb 1
\&    use Rose::DateTime::Util qw(:all);
.Ve
.PP
will cause the following function names to be imported:
.PP
.Vb 4
\&    format_date()
\&    parse_date()
\&    parse_epoch()
\&    parse_european_date()
.Ve
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.IP "\fBerror\fR" 4
.IX Item "error"
Returns a message describing the last error that occurred.
.IP "\fBeuropean_dates [\s-1BOOL\s0]\fR" 4
.IX Item "european_dates [BOOL]"
Get or set a boolean flag that determines how \*(L"xx/xx/xxxx\*(R" dates are parsed by the parse_date function.  If set to a false-but-defined value, then such dates are parsed as \*(L"mm/dd/yyyy\*(R".  If set to true, then they're parsed as \*(L"dd/mm/yyyy\*(R".  If set to undef, then the attribute resets to its initial value, which is determined as described below.
.Sp
The initial value of this attribute is chosen based on the current locale as stored in DateTime's DefaultLocale setting.  This  initial value is looked up only once.  Any subsequent changes to DateTime's DefaultLocale setting will be ignored until/unless this attribute is reset to undef.
.IP "\fBtime_zone [\s-1TZ\s0]\fR" 4
.IX Item "time_zone [TZ]"
Get or set the default time zone.  This value is passed to DateTime\->new(...) as the value of the \f(CW\*(C`time_zone\*(C'\fR parameter when \fIparse_date()\fR creates the DateTime object that it returns. The default value is \*(L"floating\*(R".
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fBformat_date \s-1DATETIME\s0, \s-1FORMAT1\s0, \s-1FORMAT2\s0 ...\fR" 4
.IX Item "format_date DATETIME, FORMAT1, FORMAT2 ..."
Takes a DateTime object and a list of format strings.  In list context, it returns a list of strings with the formats interpolated.  In scalar context, it returns a single string constructed by joining all of the list-context return values with single spaces.  Examples:
.Sp
.Vb 2
\&  # $s = \*(AqFriday 5PM\*(Aq 
\&  $s = format_date(parse_date(\*(Aq1/23/2004 17:00\*(Aq), \*(Aq%A, %I%p\*(Aq);
\&
\&  # @s = (\*(AqFriday\*(Aq, 5, \*(AqPM\*(Aq)
\&  @s = format_date(parse_date(\*(Aq1/23/2004 17:00\*(Aq), \*(Aq%A\*(Aq, \*(Aq%I\*(Aq, \*(Aq%p\*(Aq);
\&
\&  # $s = \*(AqFriday 5 PM\*(Aq 
\&  $s = format_date(parse_date(\*(Aq1/23/2004 17:00\*(Aq), \*(Aq%A\*(Aq, \*(Aq%I\*(Aq, \*(Aq%p\*(Aq);
.Ve
.Sp
Returns undef on failure, or if passed an undefined value for \s-1DATETIME\s0.  An exception will be raised if the \s-1DATETIME\s0 argument is defined, but is not a DateTime object.
.Sp
The supported formats are mostly based on those supported by DateTime's \f(CW\*(C`strftime()\*(C'\fR method.  Rose::DateTime::Util calls DateTime's \f(CW\*(C`strftime()\*(C'\fR method when interpolating these formats.
.Sp
Note that the \f(CW%t\fR and \f(CW%F\fR formats are \fInot\fR passed to \f(CW\*(C`strftime()\*(C'\fR, but are handled by Rose::DateTime::Util instead.  See the \*(L"Non-standard formats\*(R" section below.
.Sp
The \f(CW\*(C`strftime()\*(C'\fR\-compatible formats listed below have been transcribed from the DateTime documentation for the sake of convenience, but the DateTime documentation is the definitive source.
.Sp
Using any format strings not in the \f(CW\*(C`strftime()\*(C'\fR\-compatible set will be slightly slower.
.Sp
\&\fB\f(CB\*(C`strftime()\*(C'\fB\-compatible formats\fR
.RS 4
.IP "\(bu" 4
\&\f(CW%a\fR
.Sp
The abbreviated weekday name.
.IP "\(bu" 4
\&\f(CW%A\fR
.Sp
The full weekday name.
.IP "\(bu" 4
\&\f(CW%b\fR
.Sp
The abbreviated month name.
.IP "\(bu" 4
\&\f(CW%B\fR
.Sp
The full month name.
.IP "\(bu" 4
\&\f(CW%c\fR
.Sp
The default datetime format for the object's locale.
.IP "\(bu" 4
\&\f(CW%C\fR
.Sp
The century number (year/100) as a 2\-digit integer.
.IP "\(bu" 4
\&\f(CW%d\fR
.Sp
The day of the month as a decimal number (range 01 to 31).
.IP "\(bu" 4
\&\f(CW%D\fR
.Sp
Equivalent to \f(CW%m\fR/%d/%y.  This is not a good standard format if you have want both Americans and Europeans to understand the date!
.IP "\(bu" 4
\&\f(CW%e\fR
.Sp
Like \f(CW%d\fR, the day of the month as a decimal number, but a leading zero is replaced by a space.
.IP "\(bu" 4
\&\f(CW%G\fR
.Sp
The \s-1ISO\s0 8601 year with century as a decimal number.  The 4\-digit year corresponding to the \s-1ISO\s0 week number (see \f(CW%V\fR).  This has the same format and value as \f(CW%y\fR, except that if the \s-1ISO\s0 week number belongs to the previous or next year, that year is used instead. (\s-1TZ\s0)
.IP "\(bu" 4
\&\f(CW%g\fR
.Sp
Like \f(CW%G\fR, but without century, i.e., with a 2\-digit year (00\-99).
.IP "\(bu" 4
\&\f(CW%h\fR
.Sp
Equivalent to \f(CW%b\fR.
.IP "\(bu" 4
\&\f(CW%H\fR
.Sp
The hour as a decimal number using a 24\-hour clock (range 00 to 23).
.IP "\(bu" 4
\&\f(CW%I\fR
.Sp
The hour as a decimal number using a 12\-hour clock (range 01 to 12).
.IP "\(bu" 4
\&\f(CW%j\fR
.Sp
The day of the year as a decimal number (range 001 to 366).
.IP "\(bu" 4
\&\f(CW%k\fR
.Sp
The hour (24\-hour clock) as a decimal number (range 0 to 23); single digits are preceded by a blank. (See also \f(CW%H\fR.)
.IP "\(bu" 4
\&\f(CW%l\fR
.Sp
The hour (12\-hour clock) as a decimal number (range 1 to 12); single digits are preceded by a blank. (See also \f(CW%I\fR.)
.IP "\(bu" 4
\&\f(CW%m\fR
.Sp
The month as a decimal number (range 01 to 12).
.IP "\(bu" 4
\&\f(CW%M\fR
.Sp
The minute as a decimal number (range 00 to 59).
.IP "\(bu" 4
\&\f(CW%n\fR
.Sp
A newline character.
.IP "\(bu" 4
\&\f(CW%N\fR
.Sp
The fractional seconds digits. Default is 9 digits (nanoseconds).
.Sp
.Vb 3
\&  %3N   milliseconds (3 digits)
\&  %6N   microseconds (6 digits)
\&  %9N   nanoseconds  (9 digits)
.Ve
.IP "\(bu" 4
\&\f(CW%p\fR
.Sp
Either `\s-1AM\s0' or `\s-1PM\s0' according to the given time value, or the corresponding strings for the current locale.  Noon is treated as `pm' and midnight as `am'.
.IP "\(bu" 4
\&\f(CW%P\fR
.Sp
Like \f(CW%p\fR but in lowercase: `am' or `pm' or a corresponding string for the current locale.
.IP "\(bu" 4
\&\f(CW%r\fR
.Sp
The time in a.m.  or p.m. notation.  In the \s-1POSIX\s0 locale this is equivalent to `%I:%M:%S \f(CW%p\fR'.
.IP "\(bu" 4
\&\f(CW%R\fR
.Sp
The time in 24\-hour notation (%H:%M). (\s-1SU\s0) For a version including the seconds, see \f(CW%T\fR below.
.IP "\(bu" 4
\&\f(CW%s\fR
.Sp
The number of seconds since the epoch.
.IP "\(bu" 4
\&\f(CW%S\fR
.Sp
The second as a decimal number (range 00 to 61).
.IP "\(bu" 4
\&\f(CW%T\fR
.Sp
The time in 24\-hour notation (%H:%M:%S).
.IP "\(bu" 4
\&\f(CW%u\fR
.Sp
The day of the week as a decimal, range 1 to 7, Monday being 1.  See also \f(CW%w\fR.
.IP "\(bu" 4
\&\f(CW%U\fR
.Sp
The week number of the current year as a decimal number, range 00 to 53, starting with the first Sunday as the first day of week 01. See also \f(CW%V\fR and \f(CW%W\fR.
.IP "\(bu" 4
\&\f(CW%V\fR
.Sp
The \s-1ISO\s0 8601:1988 week number of the current year as a decimal number, range 01 to 53, where week 1 is the first week that has at least 4 days in the current year, and with Monday as the first day of the week. See also \f(CW%U\fR and \f(CW%W\fR.
.IP "\(bu" 4
\&\f(CW%w\fR
.Sp
The day of the week as a decimal, range 0 to 6, Sunday being 0.  See also \f(CW%u\fR.
.IP "\(bu" 4
\&\f(CW%W\fR
.Sp
The week number of the current year as a decimal number, range 00 to 53, starting with the first Monday as the first day of week 01.
.IP "\(bu" 4
\&\f(CW%x\fR
.Sp
The default date format for the object's locale.
.IP "\(bu" 4
\&\f(CW%X\fR
.Sp
The default time format for the object's locale.
.IP "\(bu" 4
\&\f(CW%y\fR
.Sp
The year as a decimal number without a century (range 00 to 99).
.IP "\(bu" 4
\&\f(CW%Y\fR
.Sp
The year as a decimal number including the century.
.IP "\(bu" 4
\&\f(CW%z\fR
.Sp
The time-zone as hour offset from \s-1UTC\s0.  Required to emit RFC822\-conformant dates (using \*(L"%a, \f(CW%d\fR \f(CW%b\fR \f(CW%Y\fR \f(CW%H:\fR%M:%S \f(CW%z\fR\*(R").
.IP "\(bu" 4
\&\f(CW%Z\fR
.Sp
The time zone or name or abbreviation.
.IP "\(bu" 4
%%
.Sp
A literal `%' character.
.IP "\(bu" 4
%{method}
.Sp
Any method name may be specified using the format \f(CW\*(C`%{method}\*(C'\fR name where \*(L"method\*(R" is a valid DateTime object method.
.RE
.RS 4
.Sp
\&\fBNon-standard formats\fR
.IP "\(bu" 4
\&\f(CW%E\fR
.Sp
Day of the month word (1st, 2nd, 3rd, ... 31st)
.IP "\(bu" 4
\&\f(CW%f\fR
.Sp
Month number (1, 2, 3, ... 12)
.IP "\(bu" 4
\&\f(CW%F\fR
.Sp
\&\*(L"%A, \f(CW%B\fR \f(CW%E\fR \f(CW%Y\fR\*(R" (Wednesday, April 4th 2001)
.IP "\(bu" 4
\&\f(CW%i\fR
.Sp
Hour, 12\-hour (1, 2, 3, ... 12)
.IP "\(bu" 4
\&\f(CW%t\fR
.Sp
Time as \*(L"%l:%M:%S \f(CW%p\fR\*(R" (1:23:45 \s-1PM\s0)
.RE
.RS 4
.RE
.IP "\fBparse_european_date \s-1TEXT\s0 [, \s-1TIMEZONE\s0]\fR" 4
.IX Item "parse_european_date TEXT [, TIMEZONE]"
This function works the same as the parse_date function, except it forces Eurpoean-style date parsing.  In other words, this:
.Sp
.Vb 1
\&    parse_european_date($date, $tz);
.Ve
.Sp
is equivalent to this:
.Sp
.Vb 2
\&    # Save old value of the European date setting
\&    my $save = Rose::DateTime::Util\->european_dates;
\&
\&    # Turn European date parsing on
\&    Rose::DateTime::Util\->european_dates(1);
\&
\&    # Parse the date
\&    parse_date($date, $tz);
\&
\&    # Restore the old European date setting
\&    Rose::DateTime::Util\->european_dates($save);
.Ve
.IP "\fBparse_date \s-1TEXT\s0 [, \s-1TIMEZONE\s0]\fR" 4
.IX Item "parse_date TEXT [, TIMEZONE]"
Attempts to parse the date described by \s-1TEXT\s0.  Returns a DateTime object, or undef on failure, with an error message available via Rose::DateTime::Util\->\fIerror()\fR.
.Sp
If a DateTime object is passed in place of the \s-1TEXT\s0 argument, it is returned as-is if there is no \s-1TIMEZONE\s0 argument, or after having set_time_zone(\s-1TIMEZONE\s0) called on it if there is a \s-1TIMEZONE\s0 argument.
.Sp
Since the time zone is not part of any of the supported date string formats, \fIparse_date()\fR takes an optional \s-1TIMEZONE\s0 argument which is passed to the DateTime constructor as the value of the \f(CW\*(C`time_zone\*(C'\fR parameter.  In the absence of a \s-1TIMEZONE\s0 argument to \f(CW\*(C`parwse_date()\*(C'\fR, the time zone defaults to the value returned by the \fItime_zone()\fR class method (\*(L"floating\*(R", by default)
.Sp
The formats understood and their interpretations are listed below.  Square brackets are used to undicate optional portions of the formats.
.RS 4
.IP "now" 4
.IX Item "now"
Right now.  Also valid with an exclamation point: \*(L"now!\*(R"
.IP "today" 4
.IX Item "today"
Today, at 00:00:00.
.IP "yyyy mm dd" 4
.IX Item "yyyy mm dd"
.PD 0
.IP "yyyy mm dd [hh? am/pm]" 4
.IX Item "yyyy mm dd [hh? am/pm]"
.IP "yyyy mm dd [hh?:mm [am/pm]]" 4
.IX Item "yyyy mm dd [hh?:mm [am/pm]]"
.IP "yyyy mm dd [hh?:mm:ss [am/pm]]" 4
.IX Item "yyyy mm dd [hh?:mm:ss [am/pm]]"
.IP "yyyy mm dd [hh?:mm:ss.nnnnnnnnn [am/pm]]" 4
.IX Item "yyyy mm dd [hh?:mm:ss.nnnnnnnnn [am/pm]]"
.PD
Exact date and time.  Also valid without spaces, with hyphens (\*(L"\-\*(R"), periods (\*(L".\*(R"), or underscores (\*(L"_\*(R") between the year, month, and day, and with a \*(L"T\*(R", hyphen, period, or underscore between the date and time.  The time is optional and defaults to 00:00:00.  The am/pm part is optional unless only the \*(L"hh\*(R" (hours) part of the time is specified.  Fractional seconds take a maximum of 9 digits, but fewer are also acceptable.
.IP "mm/dd/yyyy [hh[:mm[:ss[.nnnnnnnnn]]]] [am/pm]" 4
.IX Item "mm/dd/yyyy [hh[:mm[:ss[.nnnnnnnnn]]]] [am/pm]"
Exact date and time.  Also valid with hyphens (\*(L"\-\*(R"), periods (\*(L".\*(R"), or underscores (\*(L"_\*(R") instead of slashes (\*(L"/\*(R"), and with a \*(L"T\*(R", hyphen, period, or underscore between the date and time.  The time is optional and defaults to 00:00:00.  The am/pm part is optional.  Fractional seconds take a maximum of 9 digits, but fewer are also acceptable.
.Sp
This format is only valid when european_dates is set to \fBfalse\fR (which is the default).
.IP "dd/mm/yyyy [hh[:mm[:ss[.nnnnnnnnn]]]] [am/pm]" 4
.IX Item "dd/mm/yyyy [hh[:mm[:ss[.nnnnnnnnn]]]] [am/pm]"
Exact date and time.  Also valid with hyphens (\*(L"\-\*(R"), periods (\*(L".\*(R"), or underscores (\*(L"_\*(R") instead of slashes (\*(L"/\*(R").  The time is optional and defaults to 00:00:00.  The am/pm part is optional.  Fractional seconds take a maximum of 9 digits, but fewer are also acceptable.
.Sp
This format is only valid when european_dates is set to \fBtrue\fR.
.IP "[\-]infinity" 4
.IX Item "[-]infinity"
Positive or negative infinity.  Case insensitive.
.IP "[\-]dddddddddd[.nnnnnnnnn] seconds)" 4
.IX Item "[-]dddddddddd[.nnnnnnnnn] seconds)"
A positive or negative number with optional fractional seconds is interpreted as seconds since the Unix epoch.  Fractional seconds take a maximum of 9 digits, but fewer are also acceptable.
.RE
.RS 4
.RE
.IP "\fBparse_epoch \s-1TEXT\s0 [, \s-1TIMEZONE\s0]\fR" 4
.IX Item "parse_epoch TEXT [, TIMEZONE]"
This function is the same as parse_date except that it prefers Unix epoch values in cases where this format conflicts with another.  Example:
.Sp
.Vb 1
\&    $arg = \*(Aq19991231\*(Aq;
\&
\&    $dt = parse_date($arg);  # Dec 31, 1999
\&    $dt = parse_epoch($arg); # Aug 20, 1970
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DateTime, DateTime::TimeZone
.SH "AUTHOR"
.IX Header "AUTHOR"
John C. Siracusa (siracusa@gmail.com)
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 2010 by John C. Siracusa.  All rights reserved.  This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
