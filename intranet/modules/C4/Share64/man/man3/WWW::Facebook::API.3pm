.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.19)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::Facebook::API 3"
.TH WWW::Facebook::API 3 "2010-03-13" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::Facebook::API \- Facebook API implementation
.SH "VERSION"
.IX Header "VERSION"
This document and others distributed with this module describe
WWW::Facebook::API version 0.4.18
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use WWW::Facebook::API;
\&
\&    # @ENV{qw/WFA_API_KEY WFA_SECRET WFA_DESKTOP/} are the initial values,
\&    # so use those if you only have one app and don\*(Aqt want to pass in values
\&    # to constructor
\&    my $client = WWW::Facebook::API\->new(
\&        desktop => 0,
\&        api_key => \*(Aqyour api key\*(Aq,
\&        secret => \*(Aqyour secret key\*(Aq,
\&    );
\&    
\&    # Change API key and secret
\&    print "Enter your public API key: ";
\&    chomp( my $val = <STDIN> );
\&    $client\->api_key($val);
\&    print "Enter your API secret: ";
\&    chomp($val = <STDIN> );
\&    $client\->secret($val);
\&    
\&    # not needed if web app (see $client\->canvas\->get_fb_params)
\&    $client\->auth\->get_session( $token );
\&    
\&    use Data::Dumper;
\&    my $friends_perl = $client\->friends\->get;
\&    print Dumper $friends_perl;
\&    
\&    my $notifications_perl = $client\->notifications\->get;
\&    print Dumper $notifications_perl;
\&    
\&    # Current user\*(Aqs quotes
\&    my $quotes_perl = $client\->users\->get_info(
\&        uids   => $friends_perl,
\&        fields => [\*(Aqquotes\*(Aq]
\&    );
\&    print Dumper $quotes_perl;
\&    
\&    $client\->auth\->logout;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Perl implementation of the Facebook \s-1API\s0, working off of the canonical Java
and \s-1PHP\s0 implementations. By default it uses JSON::Any to parse the response
returned by Facebook's server. There is an option to return the raw response
in either \s-1XML\s0 or \s-1JSON\s0 (See the \f(CW\*(C`parse\*(C'\fR method below). As the synopsis states,
the following environment variables are used to set the defaults for new
instances:
.PP
.Vb 4
\&    WFA_API_KEY
\&    WFA_SECRET
\&    WFA_SESSION_KEY
\&    WFA_DESKTOP
.Ve
.PP
Additionally, for each instance that is created, the following environment
variables are used if no values are set:
.PP
.Vb 4
\&    WFA_API_KEY_APP_PATH
\&    WFA_SECRET_APP_PATH
\&    WFA_SESSION_KEY_APP_PATH
\&    WFA_DESKTOP_APP_PATH
.Ve
.PP
Where \f(CW\*(C`APP_PATH\*(C'\fR is replaced by whatever \f(CW$client\fR\->app_path returns, with all
non-alphanumeric characters replaced with an underscore and all characters
upcased (e.g., foo-bar-baz becomes \s-1FOO_BAR_BAZ\s0).
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.ie n .IP "new( %params )" 4
.el .IP "new( \f(CW%params\fR )" 4
.IX Item "new( %params )"
Returns a new instance of this class. You are able to pass in any of the
attribute method names in WWW::Facebook::API to set its value:
.Sp
.Vb 10
\&    my $client = WWW::Facebook::API\->new(
\&        parse           => 1,
\&        format          => \*(AqJSON\*(Aq,
\&        secret          => \*(Aqapplication_secret_key\*(Aq,
\&        api_key         => \*(Aqapplication_key\*(Aq,
\&        session_key     => \*(Aqsession_key\*(Aq,
\&        session_expires => \*(Aqsession_expires\*(Aq,
\&        session_uid     => \*(Aqsession_uid\*(Aq,
\&        desktop         => 1,
\&        api_version     => \*(Aq1.0\*(Aq,
\&        callback        => \*(Aqcallback_url\*(Aq,
\&        next            => \*(Aqnext\*(Aq,
\&        popup           => \*(Aqpopup\*(Aq,
\&        skipcookie      => \*(Aqskip_cookie\*(Aq,
\&        throw_errors    => 1,
\&    );
\&    $copy = $client\->new;
.Ve
.SH "NAMESPACE METHODS"
.IX Header "NAMESPACE METHODS"
All method names from the Facebook \s-1API\s0 are lower_cased instead of CamelCase.
.IP "admin" 4
.IX Item "admin"
admin namespace of the \s-1API\s0 (See WWW::Facebook::API::Admin).
.IP "application" 4
.IX Item "application"
application namespace of the \s-1API\s0 (See WWW::Facebook::API::Application).
.IP "auth" 4
.IX Item "auth"
For desktop apps, these are synonymous:
.Sp
.Vb 2
\&    $client\->auth\->get_session( $client\->auth\->create_token );
\&    $client\->auth\->get_session;
.Ve
.Sp
And that's all you really have to do (but see WWW::Facebook::API::Auth for
details about opening a browser on *nix for Desktop apps). \f(CW\*(C`get_session\*(C'\fR
automatically sets \f(CW\*(C`session_uid\*(C'\fR, \f(CW\*(C`session_key\*(C'\fR, and \f(CW\*(C`session_expires\*(C'\fR for
\&\f(CW$client\fR. It returns nothing.
.Sp
If the desktop attribute is set to false the \f(CW$token\fR must be the auth_token
returned from Facebook to your web app for that user:
.Sp
.Vb 3
\&    if ( $q\->param(\*(Aqauth_token\*(Aq)  ) {
\&        $client\->auth\->get_session( $q\->param(\*(Aqauth_token\*(Aq) );
\&    }
.Ve
.Sp
\&\f(CW\*(C`get_session\*(C'\fR automatically sets \f(CW\*(C`session_uid\*(C'\fR, \f(CW\*(C`session_key\*(C'\fR, and
\&\f(CW\*(C`session_expires\*(C'\fR for \f(CW$client\fR. It returns nothing.
.Sp
See WWW::Facebook::API::Auth for details.
.IP "canvas" 4
.IX Item "canvas"
Work with the canvas. See WWW::Facebook::API::Canvas.
.Sp
.Vb 6
\&    $response = $client\->canvas\->get_user( $q )
\&    $response = $client\->canvas\->get_fb_params( $q )
\&    $response = $client\->canvas\->get_non_fb_params( $q )
\&    $response = $client\->canvas\->validate_sig( $q )
\&    $response = $client\->canvas\->in_fb_canvas( $q )
\&    $response = $client\->canvas\->in_frame( $q )
.Ve
.IP "comments" 4
.IX Item "comments"
comments namespace of the \s-1API\s0 (See WWW::Facebook::API::Comments).
.IP "connect" 4
.IX Item "connect"
connect namespace of the \s-1API\s0 (See WWW::Facebook::API::Connect).
.IP "data" 4
.IX Item "data"
data namespace of the \s-1API\s0 (See WWW::Facebook::API::Data).
All method names from the Facebook \s-1API\s0 are lower_cased instead of CamelCase:
.Sp
.Vb 5
\&    $response = $client\->data\->set_cookie( uid => 23, qw/name foo value bar/);
\&    $cookies = $client\->data\->get_cookies(
\&        uid => 4534,
\&        name => \*(Aqfoo\*(Aq,
\&    );
.Ve
.IP "events" 4
.IX Item "events"
events namespace of the \s-1API\s0 (See WWW::Facebook::API::Events).
All method names from the Facebook \s-1API\s0 are lower_cased instead of CamelCase:
.Sp
.Vb 8
\&    $response = $client\->events\->get(
\&        uid => \*(Aquid\*(Aq,
\&        eids => [@eids],
\&        start_time => \*(Aqutc\*(Aq,
\&        end_time => \*(Aqutc\*(Aq,
\&        rsvp_status => \*(Aqattending|unsure|declined|not_replied\*(Aq,
\&    );
\&    $response = $client\->events\->get_members( eid => 233 );
.Ve
.IP "fbml" 4
.IX Item "fbml"
fbml namespace of the \s-1API\s0 (See WWW::Facebook::API::FBML).
All method names from the Facebook \s-1API\s0 are lower_cased instead of CamelCase:
.Sp
.Vb 3
\&    $response = $client\->fbml\->set_ref_handle( handle => \*(Aq\*(Aq, fbml => \*(Aq\*(Aq);
\&    $response = $client\->fbml\->refresh_img_src( url => \*(Aq\*(Aq);
\&    $response = $client\->fbml\->refresh_ref_url( url => \*(Aq\*(Aq);
.Ve
.IP "feed" 4
.IX Item "feed"
feed namespace of the \s-1API\s0 (See WWW::Facebook::API::Feed).
All method names from the Facebook \s-1API\s0 are lower_cased instead of CamelCase:
.Sp
.Vb 10
\&    $response
\&        = $client\->feed\->publish_story_to_user(
\&            title   => \*(Aqtitle\*(Aq,
\&            body    => \*(Aqmarkup\*(Aq,
\&            ...
\&    );
\&    $response
\&        = $client\->feed\->publish_action_of_user(
\&            title   => \*(Aqtitle\*(Aq,
\&            body    => \*(Aqmarkup\*(Aq,
\&            ...
\&    );
\&    $response
\&        = $client\->feed\->publish_templatized_action(
\&            actor_id       => \*(Aqtitle\*(Aq,
\&            title_template => \*(Aqmarkup\*(Aq,
\&            ...
\&    );
.Ve
.IP "fql" 4
.IX Item "fql"
fql namespace of the \s-1API\s0 (See WWW::Facebook::API::FQL):
.Sp
.Vb 1
\&    $response = $client\->fql\->query( query => \*(AqFQL query\*(Aq );
.Ve
.IP "friends" 4
.IX Item "friends"
friends namespace of the \s-1API\s0 (See WWW::Facebook::API::Friends).
All method names from the Facebook \s-1API\s0 are lower_cased instead of CamelCase:
.Sp
.Vb 5
\&    $response = $client\->friends\->get;
\&    $response = $client\->friends\->get_app_users;
\&    $response
\&        = $client\->friends\->are_friends( uids1 => [1,5,8], uids2 => [2,3,4] );
\&    $response = $client\->friends\->get_lists;
.Ve
.IP "groups" 4
.IX Item "groups"
groups namespace of the \s-1API\s0 (See WWW::Facebook::API::Groups).
All method names from the Facebook \s-1API\s0 are lower_cased instead of CamelCase:
.Sp
.Vb 2
\&    $response = $client\->groups\->get( uid => 234324, gids => [2423,334] );
\&    $response = $client\->groups\->get_members( gid => 32 );
.Ve
.IP "intl" 4
.IX Item "intl"
intl namespace of the \s-1API\s0 (See WWW::Facebook::API::Intl).
.IP "links" 4
.IX Item "links"
links namespace of the \s-1API\s0 (See WWW::Facebook::API::Links).
.IP "livemesssage" 4
.IX Item "livemesssage"
liveMesssage namespace of the \s-1API\s0 (See WWW::Facebook::API::LiveMesssage).
.IP "message" 4
.IX Item "message"
message namespace of the \s-1API\s0 (See WWW::Facebook::API::Message).
.IP "notes" 4
.IX Item "notes"
notes namespace of the \s-1API\s0 (See WWW::Facebook::API::Notes).
.IP "notifications" 4
.IX Item "notifications"
notifications namespace of the \s-1API\s0 (See WWW::Facebook::API::Notifications).
All method names from the Facebook \s-1API\s0 are lower_cased instead of CamelCase:
.Sp
.Vb 11
\&    $response = $client\->notifications\->get;
\&    $response = $client\->notifications\->send(
\&        to_ids => [ 1, 3 ],
\&        notification => \*(AqFBML notification markup\*(Aq,
\&    );
\&    $response = $client\->notifications\->send_email(
\&        recipients => [1, 2343, 445],
\&        subject => \*(Aqsubject\*(Aq,
\&        text => \*(Aqtext version of email body\*(Aq,
\&        fbml  => \*(Aqfbml version of email body\*(Aq,
\&    );
.Ve
.IP "pages" 4
.IX Item "pages"
pages namespace of the \s-1API\s0 (See WWW::Facebook::API::Pages). All
method names from the Facebook \s-1API\s0 are lower_cased instead of CamelCase:
.Sp
.Vb 9
\&    $response = $client\->pages\->get_info(
\&        page_ids => [@pages],
\&        fields   => [@fields],
\&        uid      => \*(Aquser\*(Aq,
\&        type     => \*(Aqpage type\*(Aq,
\&    );
\&    $page_added_app = $client\->pages\->is_app_added( page_id => \*(Aqpage\*(Aq );
\&    $is_admin = $client\->pages\->is_admin( page_id => \*(Aqpage\*(Aq );
\&    $is_fan = $client\->pages\->is_fan( page_id => \*(Aqpage\*(Aq, uid => \*(Aquid\*(Aq )
.Ve
.IP "permissions" 4
.IX Item "permissions"
permissions namespace of the \s-1API\s0 (See WWW::Facebook::API::Permissions).
.IP "photos" 4
.IX Item "photos"
photos namespace of the \s-1API\s0 (See WWW::Facebook::API::Photos).
All method names from the Facebook \s-1API\s0 are lower_cased instead of CamelCase:
.Sp
.Vb 10
\&    $response = $client\->photos\->add_tag(
\&            pid => 2,
\&            tag_uid => 3,
\&            tag_text => "me",
\&            x => 5,
\&            y => 6
\&        );
\&    $response = $client\->photos\->create_album(
\&            name => \*(Aqfun in the sun\*(Aq,
\&            location => \*(AqCalifornia\*(Aq,
\&            description => "Summer \*(Aq07",
\&    );
\&    $response = $client\->photos\->get( aid => 2, pids => [4,7,8] );
\&    $response = $client\->photos\->get_albums( uid => 1, pids => [3,5] );
\&    $response = $client\->photos\->get_tags( pids => [4,5] );
\&    $response = $client\->photos\->upload(
\&        aid => 5,
\&        caption => \*(Aqbeach\*(Aq,
\&        data => \*(Aqraw data\*(Aq,
\&    );
.Ve
.IP "profile" 4
.IX Item "profile"
profile namespace of the \s-1API\s0 (See WWW::Facebook::API::Profile).
All method names from the Facebook \s-1API\s0 are lower_cased instead of CamelCase:
.Sp
.Vb 6
\&    $response = $client\->profile\->get_fbml( uid => 3 );
\&    $response = $client\->profile\->set_fbml( uid => 5,
\&        profile => \*(Aqmarkup\*(Aq,
\&        profile_action => \*(Aqmarkup\*(Aq,
\&        mobile_profile => \*(Aqmarkup\*(Aq,
\&    );
.Ve
.IP "sms" 4
.IX Item "sms"
sms namespace of the \s-1API\s0 (See WWW::Facebook::API::SMS).
.IP "status" 4
.IX Item "status"
status namespace of the \s-1API\s0 (See WWW::Facebook::API::Status).
.IP "stream" 4
.IX Item "stream"
stream namespace of the \s-1API\s0 (See WWW::Facebook::API::Stream).
.IP "users" 4
.IX Item "users"
users namespace of the \s-1API\s0 (See WWW::Facebook::API::Users).
All method names from the Facebook \s-1API\s0 are lower_cased instead of CamelCase:
.Sp
.Vb 10
\&    $response = $client\->users\->get_info(
\&        uids => 2343,
\&        fields => [ qw/about_me quotes/ ]
\&    );
\&    $uid = $client\->users\->get_logged_in_user;
\&    $response = $client\->users\->has_app_permission(
\&        ext_perm => \*(Aqstatus_update|photo_upload\*(Aq
\&    );
\&    $app_added = $client\->users\->is_app_user;
\&    $response = $client\->users\->set_status(
\&        status => \*(Aqstatus message\*(Aq,
\&        clear => 1|0,
\&    );
.Ve
.IP "video" 4
.IX Item "video"
video namespace of the \s-1API\s0 (See WWW::Facebook::API::Video).
.SH "ATTRIBUTE METHODS"
.IX Header "ATTRIBUTE METHODS"
These are methods to get/set the object's attributes.
.ie n .IP "api_key( $new_api_key )" 4
.el .IP "api_key( \f(CW$new_api_key\fR )" 4
.IX Item "api_key( $new_api_key )"
The developer's \s-1API\s0 key. If \f(CW$ENV{\*(AqWFA_API_KEY\*(Aq}\fR is set, all instances will
be initialized with its value. See the Facebook \s-1API\s0 documentation for more
information.
.ie n .IP "api_version( $new_version )" 4
.el .IP "api_version( \f(CW$new_version\fR )" 4
.IX Item "api_version( $new_version )"
Which version to use (default is \*(L"1.0\*(R", which is the latest one supported
currently). Corresponds to the argument \f(CW\*(C`v\*(C'\fR that is passed in to methods as a
parameter.
.IP "\fIapp_id()\fR" 4
.IX Item "app_id()"
The application id where your Facebook app is described, e.g.:
.Sp
.Vb 1
\&    http://www.facebook.com/apps/application.php?id=THIS_NUMBER
.Ve
.Sp
Remember, \f(CW\*(C`WWW::Facebook::API\*(C'\fR is not that clairvoyant: You must first
set this number (when calling \f(CW\*(C`new()\*(C'\fR) in order to use it.
.IP "\fIapp_path()\fR" 4
.IX Item "app_path()"
If using the Facebook canvas, the path to your application. For example if your
application is at http://apps.facebook.com/example/ this should be \f(CW"example"\fR.
.IP "\fIapps_uri()\fR" 4
.IX Item "apps_uri()"
The apps uri for Facebook apps. The default is http://apps.facebook.com/.
.ie n .IP "callback( $new_default_callback )" 4
.el .IP "callback( \f(CW$new_default_callback\fR )" 4
.IX Item "callback( $new_default_callback )"
The callback \s-1URL\s0 for your application. See the Facebook \s-1API\s0 documentation.
Just a convenient place holder for the value.
.ie n .IP "call_success( $is_success, $error_message )" 4
.el .IP "call_success( \f(CW$is_success\fR, \f(CW$error_message\fR )" 4
.IX Item "call_success( $is_success, $error_message )"
Takes in two values, the first setting the object's last_call_success
attribute, and the second setting the object's last_error attribute. Returns
an array reference containing the last_call_success and last_error values, in
that order:
.Sp
.Vb 7
\&    my $response = $client\->call_success( 1, undef );
\&    if ( $response\->[0] == 1 ) {
\&        print \*(AqLast call successful\*(Aq;
\&    }
\&    if ( not defined $response\->[1] ) {
\&        print \*(AqError message is undefined\*(Aq;
\&    }
\&
\&    $client\->call_success( 0,\*(Aq2: The service is not available at this time.\*(Aq);
\&
\&    $response = $client\->call_success;
\&    if ( not $response\->[0] ) {
\&        print \*(AqLast call unsuccessful\*(Aq;
\&    }
\&    if ( not defined $response\->[1] ) {
\&        print "Error $response\->[1]";
\&    }
.Ve
.Sp
The \f(CW\*(C`call\*(C'\fR method calls this method, and shouldn't need to be called to set
anything, just to get the value later if \f(CW\*(C`throw_errors\*(C'\fR is false.
.IP "config($filename)" 4
.IX Item "config($filename)"
Used when instantiating a new object to set the environment variables. The
file has a simple, BASH-style format:
.Sp
.Vb 4
\&    WFA_API_KEY_MYAPP=383378efa485934bc
\&    WFA_SECRET_MYAPP=234234ac902f340923
\&    WFA_SESSION_KEY_MYAPP=34589349abce989d
\&    WFA_DESKTOP_MYAPP=1
.Ve
.Sp
If the file is found, and the environment variables are already set, then the
variables will not be changed.
.IP "debug(0|1)" 4
.IX Item "debug(0|1)"
A boolean set to either true or false, determining if debugging messages
should be carped for \s-1REST\s0 calls. Defaults to 0.
.IP "desktop(0|1)" 4
.IX Item "desktop(0|1)"
A boolean signifying if the client is being used for a desktop application.
If \f(CW$ENV{\*(AqWFA_DESKTOP\*(Aq}\fR is set, all instances will be initialized with its
value. Defaults to 0 otherwise. See the Facebook \s-1API\s0 documentation for more
information.
.IP "format('\s-1JSON\s0'|'\s-1XML\s0')" 4
.IX Item "format('JSON'|'XML')"
The default format to use if none is supplied with an \s-1API\s0 method call.
Currently available options are \s-1XML\s0 and \s-1JSON\s0. Defaults to \s-1JSON\s0.
.IP "last_call_success(1|0)" 4
.IX Item "last_call_success(1|0)"
A boolean set to true or false, to show whether the last call was succesful
or not. Called by \f(CW\*(C`call_success\*(C'\fR. Defaults to 1.
.ie n .IP "last_error( $error_message )" 4
.el .IP "last_error( \f(CW$error_message\fR )" 4
.IX Item "last_error( $error_message )"
A string holding the error message of the last failed call to the \s-1REST\s0 server.
Called by \f(CW\*(C`call_success\*(C'\fR. Defaults to undef.
.ie n .IP "next( $new_default_next_url )" 4
.el .IP "next( \f(CW$new_default_next_url\fR )" 4
.IX Item "next( $new_default_next_url )"
See the Facebook \s-1API\s0 documentation's Authentication Guide. Just a convenient
place holder for the value.
.IP "parse(1|0)" 4
.IX Item "parse(1|0)"
Defaults to 1. If set to true, the response returned by each method call will
be a Perl structure (see each method for the structure it will return). If it
is set to 0, the response string from the server will be returned. (The
response string is unescaped if the 'desktop' attribute is false).
.ie n .IP "popup( $popup )" 4
.el .IP "popup( \f(CW$popup\fR )" 4
.IX Item "popup( $popup )"
See the Facebook \s-1API\s0 documentation's Authentication Guide. Just a convenient
place holder for the value.
.ie n .IP "query( $query )" 4
.el .IP "query( \f(CW$query\fR )" 4
.IX Item "query( $query )"
Stores the current query object to use (either \s-1CGI\s0 or Apache::Request)
but really anything that implements the \f(CW\*(C`param()\*(C'\fR method can be used. \fBN.B.
When using \f(CB\*(C`require_*\*(C'\fB methods below, Apache::Request will croak because it
does not implement a redirect method.\fR
.ie n .IP "secret( $new_secret_key )" 4
.el .IP "secret( \f(CW$new_secret_key\fR )" 4
.IX Item "secret( $new_secret_key )"
For a desktop application, this is the secret that is used for calling
\&\f(CW\*(C`auth\->create_token\*(C'\fR and \f(CW\*(C`auth\->get_session\*(C'\fR. For a web application,
secret is used for all calls to the \s-1API\s0. If \f(CW$ENV{\*(AqWFA_SECRET\*(Aq}\fR is set,
all instances will be initialized with its value. See the Facebook \s-1API\s0
documentation under Authentication for more information.
.ie n .IP "server_uri( $new_server_uri )" 4
.el .IP "server_uri( \f(CW$new_server_uri\fR )" 4
.IX Item "server_uri( $new_server_uri )"
The server uri to access the Facebook \s-1REST\s0 server. Default is
\&\f(CW\*(Aqhttp://api.facebook.com/restserver.php\*(Aq\fR. Used to make calls to the
Facebook server, and useful for testing. See the Facebook \s-1API\s0 documentation.
.ie n .IP "session_expires( $new_expires )" 4
.el .IP "session_expires( \f(CW$new_expires\fR )" 4
.IX Item "session_expires( $new_expires )"
The session expire timestamp for the client's user. Automatically set when
\&\f(CW\*(C`$client\->auth\->get_session\*(C'\fR is called. See the Facebook \s-1API\s0
documentation.
.ie n .IP "session_key( $new_key )" 4
.el .IP "session_key( \f(CW$new_key\fR )" 4
.IX Item "session_key( $new_key )"
The session key for the client's user. Automatically set when
\&\f(CW\*(C`$client\->auth\->get_session\*(C'\fR is called. See the Facebook \s-1API\s0 documentation.
.ie n .IP "session_uid( $new_uid )" 4
.el .IP "session_uid( \f(CW$new_uid\fR )" 4
.IX Item "session_uid( $new_uid )"
The session's uid for the client's user. Automatically set when
\&\f(CW\*(C`$client\->auth\->get_session\*(C'\fR is called. See the Facebook \s-1API\s0 documentation.
.IP "skipcookie(0|1)" 4
.IX Item "skipcookie(0|1)"
See the Facebook \s-1API\s0 documentation's Authentication Guide. Just a convenient
place holder for the value.
.IP "throw_errors(0|1)" 4
.IX Item "throw_errors(0|1)"
A boolean set to either true of false, signifying whether or not to \f(CW\*(C`confess\*(C'\fR
when an error is returned from the \s-1REST\s0 server.
.IP "ua" 4
.IX Item "ua"
The LWP::UserAgent agent used to communicate with the \s-1REST\s0 server.
The agent_alias is initially set to \*(L"Perl\-WWW\-Facebook\-API/0.4.18\*(R".
.SH "PUBLIC METHODS"
.IX Header "PUBLIC METHODS"
.ie n .IP "call( $method, %args )" 4
.el .IP "call( \f(CW$method\fR, \f(CW%args\fR )" 4
.IX Item "call( $method, %args )"
The method which other submodules within WWW::Facebook::API use
to call the Facebook \s-1REST\s0 interface. It takes in a string signifying the method
to be called (e.g., 'auth.getSession'), and key/value pairs for the parameters
to use:
    \f(CW$client\fR\->call( 'auth.getSession', auth_token => 'b3324235e' );
.Sp
For all calls, if \f(CW\*(C` parse \*(C'\fR is set to true and an empty hash/array reference
is returned from facebook, nothing will be returned instead of the empty
hash/array reference.
.ie n .IP "generate_sig( params => $params_hashref, secret => $secret )" 4
.el .IP "generate_sig( params => \f(CW$params_hashref\fR, secret => \f(CW$secret\fR )" 4
.IX Item "generate_sig( params => $params_hashref, secret => $secret )"
Generates a sig when given a parameters hash reference and a secret key.
.ie n .IP "get_add_url( %params )" 4
.el .IP "get_add_url( \f(CW%params\fR )" 4
.IX Item "get_add_url( %params )"
Returns the \s-1URL\s0 to add your application with the parameters (that are given)
included. Note that the \s-1API\s0 key and the \s-1API\s0 version parameters are also
included automatically. If the \f(CW\*(C`next\*(C'\fR parameter is passed in, it's
string-escaped. Used for platform applications:
.Sp
.Vb 1
\&    $response = $client\->get_add_url( next => \*(Aqhttp://my.website.com\*(Aq );
\&
\&    # prints http://www.facebook.com/app.php?api_key=key&v=1.0
\&    #        &next=http%3A%2F%2Fmy.website.com
\&    print $response;
.Ve
.IP "get_app_url" 4
.IX Item "get_app_url"
Returns the \s-1URL\s0 to your application, if using the Facebook canvas. Uses
<$client\->app_path>, which you have to set yourself (See <app_path> below).
.ie n .IP "get_facebook_url( $subdomain )" 4
.el .IP "get_facebook_url( \f(CW$subdomain\fR )" 4
.IX Item "get_facebook_url( $subdomain )"
Returns the \s-1URL\s0 to Facebook. You can specifiy a specific network as a
parameter:
.Sp
.Vb 2
\&    $response = $client\->get_facebook_url( \*(Aqapps\*(Aq );
\&    print $response;    # prints http://apps.facebook.com
.Ve
.IP "\fIget_infinite_session_url()\fR" 4
.IX Item "get_infinite_session_url()"
Returns the \s-1URL\s0 for the user to generate an infinite session for your
application:
.Sp
.Vb 1
\&    $response = $client\->get_infinite_session_url;
\&
\&    # prints http://www.facebook.com/codegen.php?api_key=key&v=1.0
\&    print $response;
.Ve
.Sp
From what I've seen, the session keys that Facebook returns don't expire
automatically, so as long as you don't call \f(CW$client\fR\->auth\->logout, you
shouldn't even need to worry about this.
.ie n .IP "get_login_url( %params )" 4
.el .IP "get_login_url( \f(CW%params\fR )" 4
.IX Item "get_login_url( %params )"
Returns the \s-1URL\s0 to login to your application with the parameters (that are
defined) included. If the \f(CW\*(C`next\*(C'\fR parameter is passed in, it's string-escaped:
.Sp
.Vb 1
\&    $response = $client\->get_login_url( next => \*(Aqhttp://my.website.com\*(Aq );
\&
\&    # prints http://www.facebook.com/login.php?api_key=key&v=1.0
\&    #        &next=http%3A%2F%2Fmy.website.com
\&    print $response;
.Ve
.ie n .IP "get_url( $type, @args )" 4
.el .IP "get_url( \f(CW$type\fR, \f(CW@args\fR )" 4
.IX Item "get_url( $type, @args )"
Called by all the above \f(CW\*(C`get_*_url\*(C'\fR methods above. \f(CW$type\fR can be \f(CW\*(Aqlogin\*(Aq\fR,
\&\f(CW\*(Aqapp\*(Aq\fR, \f(CW\*(Aqadd\*(Aq\fR, \f(CW\*(Aqfacebook\*(Aq\fR, \f(CW\*(Aqinfinite_session\*(Aq\fR, or \f(CW\*(Aqcustom\*(Aq\fR.
\&\f(CW@args\fR contains the query parameters for the the cases when \f(CW$type\fR is not
\&\f(CW\*(Aqapp\*(Aq\fR or \f(CW\*(Aqfacebook\*(Aq\fR. In the case of \f(CW\*(Aqcustom\*(Aq\fR, the first item in
\&\f(CW@args\fR is the url path relative to the facebook website. All of the
\&\f(CW\*(C`get_*_url\*(C'\fR methods correspond to the ones in the official \s-1PHP\s0 client.
.ie n .IP "log_string($params_hashref, $response)" 4
.el .IP "log_string($params_hashref, \f(CW$response\fR)" 4
.IX Item "log_string($params_hashref, $response)"
Pass in the params and the response from a call, and it will make a formatted
string out of it showing the parameters used, and the response received.
.ie n .IP "redirect( $url, $query_object )" 4
.el .IP "redirect( \f(CW$url\fR, \f(CW$query_object\fR )" 4
.IX Item "redirect( $url, $query_object )"
Called by \f(CW\*(C`require()\*(C'\fR to redirect the user either within the canvas or
without. If no <$query_object> is defined, then whatever is in \f(CW\*(C`$client\->query\*(C'\fR will be used. (See WWW::Facebook::API::Canvas) If no
redirect is required, nothing is returned. That is the only case when there is
no return value. If a redirect \fBis\fR required, there are two cases that are
covered:
.RS 4
.IP "user not logged in" 4
.IX Item "user not logged in"
If there isn't a user logged in to Facebook's system, then a redirect to the Facebook
login page is printed to \s-1STDOUT\s0 with a next parameter to the appropriate page.
The redirect is called with the the \s-1CGI\s0 module that comes standard with perl.
The return value in this case is 1.
.IP "user logged in" 4
.IX Item "user logged in"
If the user is logged in to Facebook, and a redirect is required, the
necessary \s-1FBML\s0 is returned: \f(CW\*(C`<fb:redirect url="WHATEVER">\*(C'\fR.
So the return value is the \s-1FBML\s0, which you can then print to \s-1STDOUT\s0.
.RE
.RS 4
.RE
.ie n .IP "require_add( $query )" 4
.el .IP "require_add( \f(CW$query\fR )" 4
.IX Item "require_add( $query )"
Redirects the user to what \f(CW\*(C`get_add_url()\*(C'\fR returns. See \f(CW\*(C`require()\*(C'\fR below
for the \f(CW$query\fR parameter.
.ie n .IP "require_frame( $query )" 4
.el .IP "require_frame( \f(CW$query\fR )" 4
.IX Item "require_frame( $query )"
Redirects the user to what \f(CW\*(C`get_login_url( canvas =\*(C'\fR '1' )> returns. See
\&\f(CW\*(C`require()\*(C'\fR below for the \f(CW$query\fR parameter.
.ie n .IP "require_login( $query )" 4
.el .IP "require_login( \f(CW$query\fR )" 4
.IX Item "require_login( $query )"
Redirects the user to what \f(CW\*(C`get_login_url()\*(C'\fR returns. See \f(CW\*(C`require()\*(C'\fR below
for the \f(CW$query\fR parameter.
.ie n .IP "require( $what, $query )" 4
.el .IP "require( \f(CW$what\fR, \f(CW$query\fR )" 4
.IX Item "require( $what, $query )"
The official \s-1PHP\s0 client has \f(CW\*(C`require_*\*(C'\fR methods that take no arguments.
Logically, you better know what you want to require when you call each of
them, so this \s-1API\s0 consolidates them into one method. The valid values for
\&\f(CW$what\fR are \f(CW\*(Aqadd\*(Aq\fR, \f(CW\*(Aqframe\*(Aq\fR, and \f(CW\*(Aqlogin\*(Aq\fR. \f(CW$query\fR is the query
object to use (most likely \s-1CGI\s0). If \f(CW$query\fR is undefined, the value of
\&\f(CW\*(C` $client\-\*(C'\fRquery >> is used.
.ie n .IP "session( uid => $uid, key => $session_key, expires => $session_expires )" 4
.el .IP "session( uid => \f(CW$uid\fR, key => \f(CW$session_key\fR, expires => \f(CW$session_expires\fR )" 4
.IX Item "session( uid => $uid, key => $session_key, expires => $session_expires )"
Sets the \f(CW\*(C`user\*(C'\fR, \f(CW\*(C`session_key\*(C'\fR, and \f(CW\*(C`session_expires\*(C'\fR all at once.
.IP "unescape_string($escaped_string)" 4
.IX Item "unescape_string($escaped_string)"
Returns its parameter with all the escape sequences unescaped. If you're using
a web app, this is done automatically to the response.
.ie n .IP "verify_sig( sig => $expected_sig, params => $params_hashref )" 4
.el .IP "verify_sig( sig => \f(CW$expected_sig\fR, params => \f(CW$params_hashref\fR )" 4
.IX Item "verify_sig( sig => $expected_sig, params => $params_hashref )"
Checks the signature for a given set of parameters against an expected value.
.SH "PRIVATE METHODS"
.IX Header "PRIVATE METHODS"
.ie n .IP "_add_url_params( %params )" 4
.el .IP "_add_url_params( \f(CW%params\fR )" 4
.IX Item "_add_url_params( %params )"
Called by both \f(CW\*(C`get_login_url\*(C'\fR and \f(CW\*(C`get_add_url\*(C'\fR to process any of their
parameters. Prepends the api_key and the version number as parameters and
returns the parameter string.
.IP "_check_values_of($params_hashref)" 4
.IX Item "_check_values_of($params_hashref)"
Makes sure all the values of the \f(CW$params_hashref\fR that need to be set are
set. Uses the defaults for those values that are needed and not supplied.
.ie n .IP "_format_and_check_params( $method, %args )" 4
.el .IP "_format_and_check_params( \f(CW$method\fR, \f(CW%args\fR )" 4
.IX Item "_format_and_check_params( $method, %args )"
Format method parameters (given in \f(CW%args\fR) according to Facebook \s-1API\s0
specification. Returns a list of items: A hash reference of the newly
formatted params (based on \f(CW%params\fR) and the raw data (and filename, if
passed in) if the call is a photo or video upload:
.Sp
.Vb 1
\&    ($params, $raw_data, $filename) = $self\->_format_and_check_params( $method, %args );
.Ve
.ie n .IP "_has_error_response( $response )" 4
.el .IP "_has_error_response( \f(CW$response\fR )" 4
.IX Item "_has_error_response( $response )"
Determines if the response is an error, and logs it appropriately. Returns
true if response is an error, false otherwise.
.ie n .IP "is_empty_response( $response )" 4
.el .IP "is_empty_response( \f(CW$response\fR )" 4
.IX Item "is_empty_response( $response )"
Determines if the response is an empty hash or array reference. Returns true
if the response is empty, false otherwise.
.ie n .IP "_post_request( $params_hashref, $sig, $raw_data, $filename )" 4
.el .IP "_post_request( \f(CW$params_hashref\fR, \f(CW$sig\fR, \f(CW$raw_data\fR, \f(CW$filename\fR )" 4
.IX Item "_post_request( $params_hashref, $sig, $raw_data, $filename )"
Used by \f(CW\*(C`call\*(C'\fR to post the request to the \s-1REST\s0 server and return the
response. \f(CW$raw_data\fR and \f(CW$filename\fR are used when uploading a photo or
video to Facebook.
.IP "_parse($string)" 4
.IX Item "_parse($string)"
Parses the response from a call to the Facebook server to make it a Perl data
structure, and returns the result.
.IP "\fI_parser()\fR" 4
.IX Item "_parser()"
Returns a new instance of JSON::Any.
.ie n .IP "_reformat_response( $params, $response )" 4
.el .IP "_reformat_response( \f(CW$params\fR, \f(CW$response\fR )" 4
.IX Item "_reformat_response( $params, $response )"
Reformats the response according to whether the app is a desktop app, if the
response should be parsed (i.e., changed to a Perlish structure), if the
response is empty, etc. Returns the reformatted response.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP """Unable to load JSON module for parsing: %s""" 4
.el .IP "\f(CWUnable to load JSON module for parsing: %s\fR" 4
.IX Item "Unable to load JSON module for parsing: %s"
JSON::Any was not able to load one of the \s-1JSON\s0 modules it uses to parse
\&\s-1JSON\s0. Please make sure you have one (of the several) \s-1JSON\s0 modules it can use
installed.
.ie n .IP """Error during REST call: %s""" 4
.el .IP "\f(CWError during REST call: %s\fR" 4
.IX Item "Error during REST call: %s"
This means that there's most likely an error in the server you are using to
communicate to the Facebook \s-1REST\s0 server. Look at the traceback to determine
why an error was thrown. Double-check that \f(CW\*(C`server_uri\*(C'\fR is set to the right
location.
.ie n .IP """Cannot create namespace %s: %s""" 4
.el .IP "\f(CWCannot create namespace %s: %s\fR" 4
.IX Item "Cannot create namespace %s: %s"
Cannot create the needed subclass method. Contact the developer to report.
.ie n .IP """Cannot create attribute %s: %s""" 4
.el .IP "\f(CWCannot create attribute %s: %s\fR" 4
.IX Item "Cannot create attribute %s: %s"
Cannot create the needed attribute method. Contact the developer to report.
.ie n .IP """<_format_and_check_params must be called in list context!"">" 4
.el .IP "\f(CW<_format_and_check_params must be called in list context!\fR>" 4
.IX Item "<_format_and_check_params must be called in list context!>"
You're using a private method call and you're not calling it in list context.
It returns a list of items, all of which should be interesting to you.
.ie n .IP """Cannot open %s""" 4
.el .IP "\f(CWCannot open %s\fR" 4
.IX Item "Cannot open %s"
Cannot open the configuration file. Make sure the filename is correct and that
the program has the appropriate permissions.
.ie n .IP """Cannot close %s""" 4
.el .IP "\f(CWCannot close %s\fR" 4
.IX Item "Cannot close %s"
Cannot close the configuration file. Make sure the filename is correct and
that the program has the appropriate permissions.
.SH "FAQ"
.IX Header "FAQ"
.IP "Id numbers returned by Facebook are being rounded. What is the problem?" 4
.IX Item "Id numbers returned by Facebook are being rounded. What is the problem?"
The \s-1JSON\s0 module that is installed on your system is converting the numbers to
Perl and is losing precision in the process. Make sure you have the latest
\&\s-1JSON::XS\s0 module installed or \s-1JSON::DWIW\s0 (any recent version of either
should work).
.IP "How do I run the examples in the examples directory?" 4
.IX Item "How do I run the examples in the examples directory?"
There are two types of examples in the examples directory, desktop-based and
web-based. With desktop-based, the api key and secret key are prompted for on
\&\s-1STDIN\s0, and then the user's browser is opened and directed to the Facebook
log in page. Currently, the desktop-based examples pause for 20 seconds to
allow for the user to enter in their credentials.
.Sp
With web-based, you have to pass in the api key, secret key, and app path to
the constructor, and then place the script at the callback url you specified
in the Facebook setup for your application. For instance, when using the
web-based example, you might have the following callback url (note the
trailing slash):
.Sp
.Vb 1
\&    http://www.example.com/facebook\-canvas\-json/
.Ve
.Sp
You have to make sure the required Perl modules are in the \f(CW@INC\fR path for
the web server process, otherwise there will be a 500 Internal Server error.
The easiest way to do that is to put the following at the top of the example
script (as long as \*(L"path\-to\-perl5\-libs\*(R" is readable by the web server
process):
.Sp
.Vb 1
\&    use lib "path\-to\-perl5\-libs";
.Ve
.ie n .IP "I'm getting the ""Multiple values for %s"" error from WFA::Canvas. Help?" 4
.el .IP "I'm getting the ``Multiple values for \f(CW%s\fR'' error from WFA::Canvas. Help?" 4
.IX Item "I'm getting the Multiple values for %s error from WFA::Canvas. Help?"
This usually means that your forms are using \s-1GET\s0 rather than \s-1POST\s0 to Facebook
URLs. Change your forms to use \s-1POST\s0 and the problem should be resolved. (See
RT#31620 and RT#31944 for more information).
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
WWW::Facebook::API requires no configuration files or environment variables.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
version
Crypt::SSLeay
Digest::MD5
JSON::Any
Time::HiRes
LWP::UserAgent
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
None.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
No bugs have been reported.
.PP
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-www\-facebook\-api@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>.
.SH "SOURCE REPOSITORY"
.IX Header "SOURCE REPOSITORY"
http://github.com/unobe/perl\-wfa/tree/master
.SH "TESTING"
.IX Header "TESTING"
There are some live tests included, but they are only run if the following
environment variables are set:
    \s-1WFA_API_KEY_TEST\s0
    \s-1WFA_SECRET_TEST\s0
    \s-1WFA_SESSION_KEY_TEST\s0
.PP
Additionally, if your app is a desktop one, you must set \f(CW\*(C`WFA_DESKTOP_TEST\*(C'\fR.
Also, the session key must be valid for the \s-1API\s0 key being used.
.PP
To enable \s-1POD\s0 coverage and \s-1POD\s0 formattings tests, set \f(CW\*(C`PERL_TEST_POD\*(C'\fR to
true. To enable Perl::Critic tests, set \f(CW\*(C`_PERL_TEST_CRITIC\*(C'\fR to true.
.SH "AUTHOR"
.IX Header "AUTHOR"
David Romano  \f(CW\*(C`<unobe@cpan.org>\*(C'\fR
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Anthony Bouvier \f(CW\*(C`none\*(C'\fR
.PP
Clayton Scott \f(CW\*(C`http://www.matrix.ca\*(C'\fR
.PP
David Leadbeater \f(CW\*(C`http://dgl.cx\*(C'\fR
.PP
Derek Del Conte \f(CW\*(C`derek@delconte.org\*(C'\fR
.PP
Gisle Aas \f(CW\*(C`none\*(C'\fR
.PP
J. Shirley \f(CW\*(C`<jshirley@gmail.com>\*(C'\fR
.PP
Jim Spath \f(CW\*(C`<jspath@gmail.com>\*(C'\fR
.PP
Kevin Riggle \f(CW\*(C`none\*(C'\fR
.PP
Larry Mak \f(CW\*(C`none\*(C'\fR
.PP
Louis-Philippe \f(CW\*(C`none\*(C'\fR
.PP
Matt Sickler \f(CW\*(C`<imMute@mail.msk3.ath.cx>\*(C'\fR
.PP
Nick Gerakines \f(CW\*(C`<nick@socklabs.com>\*(C'\fR
.PP
Olaf Alders \f(CW\*(C`<olaf@wundersolutions.com>\*(C'\fR
.PP
Patrick Michael Kane \f(CW\*(C`<pmk@wawd.com>\*(C'\fR
.PP
Ryan D Johnson \f(CW\*(C`ryan@innerfence.com\*(C'\fR
.PP
Sean O'Rourke \f(CW\*(C`<seano@cpan.org>\*(C'\fR
.PP
Shawn Van Ittersum \f(CW\*(C`none\*(C'\fR
.PP
Simon Cavalletto \f(CW\*(C`<simonm@cavalletto.org>\*(C'\fR
.PP
Skyler Clark \f(CW\*(C`none\*(C'\fR
.PP
Thomas Sibley \f(CW\*(C`<tsibley@cpan.org>\*(C'\fR
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2007\-2010, David Romano \f(CW\*(C`<unobe@cpan.org>\*(C'\fR. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
\&\s-1BECAUSE\s0 \s-1THIS\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1LICENSED\s0 \s-1FREE\s0 \s-1OF\s0 \s-1CHARGE\s0, \s-1THERE\s0 \s-1IS\s0 \s-1NO\s0 \s-1WARRANTY\s0
\&\s-1FOR\s0 \s-1THE\s0 \s-1SOFTWARE\s0, \s-1TO\s0 \s-1THE\s0 \s-1EXTENT\s0 \s-1PERMITTED\s0 \s-1BY\s0 \s-1APPLICABLE\s0 \s-1LAW\s0. \s-1EXCEPT\s0 \s-1WHEN\s0
\&\s-1OTHERWISE\s0 \s-1STATED\s0 \s-1IN\s0 \s-1WRITING\s0 \s-1THE\s0 \s-1COPYRIGHT\s0 \s-1HOLDERS\s0 \s-1AND/OR\s0 \s-1OTHER\s0 \s-1PARTIES\s0
\&\s-1PROVIDE\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \*(L"\s-1AS\s0 \s-1IS\s0\*(R" \s-1WITHOUT\s0 \s-1WARRANTY\s0 \s-1OF\s0 \s-1ANY\s0 \s-1KIND\s0, \s-1EITHER\s0
\&\s-1EXPRESSED\s0 \s-1OR\s0 \s-1IMPLIED\s0, \s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1THE\s0 \s-1IMPLIED\s0
\&\s-1WARRANTIES\s0 \s-1OF\s0 \s-1MERCHANTABILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0. \s-1THE\s0
\&\s-1ENTIRE\s0 \s-1RISK\s0 \s-1AS\s0 \s-1TO\s0 \s-1THE\s0 \s-1QUALITY\s0 \s-1AND\s0 \s-1PERFORMANCE\s0 \s-1OF\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1WITH\s0
\&\s-1YOU\s0. \s-1SHOULD\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1PROVE\s0 \s-1DEFECTIVE\s0, \s-1YOU\s0 \s-1ASSUME\s0 \s-1THE\s0 \s-1COST\s0 \s-1OF\s0 \s-1ALL\s0
\&\s-1NECESSARY\s0 \s-1SERVICING\s0, \s-1REPAIR\s0, \s-1OR\s0 \s-1CORRECTION\s0.
.PP
\&\s-1IN\s0 \s-1NO\s0 \s-1EVENT\s0 \s-1UNLESS\s0 \s-1REQUIRED\s0 \s-1BY\s0 \s-1APPLICABLE\s0 \s-1LAW\s0 \s-1OR\s0 \s-1AGREED\s0 \s-1TO\s0 \s-1IN\s0 \s-1WRITING\s0
\&\s-1WILL\s0 \s-1ANY\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0, \s-1OR\s0 \s-1ANY\s0 \s-1OTHER\s0 \s-1PARTY\s0 \s-1WHO\s0 \s-1MAY\s0 \s-1MODIFY\s0 \s-1AND/OR\s0
\&\s-1REDISTRIBUTE\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1AS\s0 \s-1PERMITTED\s0 \s-1BY\s0 \s-1THE\s0 \s-1ABOVE\s0 \s-1LICENSE\s0, \s-1BE\s0
\&\s-1LIABLE\s0 \s-1TO\s0 \s-1YOU\s0 \s-1FOR\s0 \s-1DAMAGES\s0, \s-1INCLUDING\s0 \s-1ANY\s0 \s-1GENERAL\s0, \s-1SPECIAL\s0, \s-1INCIDENTAL\s0,
\&\s-1OR\s0 \s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 \s-1ARISING\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0 \s-1USE\s0 \s-1OR\s0 \s-1INABILITY\s0 \s-1TO\s0 \s-1USE\s0
\&\s-1THE\s0 \s-1SOFTWARE\s0 (\s-1INCLUDING\s0 \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0 \s-1LOSS\s0 \s-1OF\s0 \s-1DATA\s0 \s-1OR\s0 \s-1DATA\s0 \s-1BEING\s0
\&\s-1RENDERED\s0 \s-1INACCURATE\s0 \s-1OR\s0 \s-1LOSSES\s0 \s-1SUSTAINED\s0 \s-1BY\s0 \s-1YOU\s0 \s-1OR\s0 \s-1THIRD\s0 \s-1PARTIES\s0 \s-1OR\s0 A
\&\s-1FAILURE\s0 \s-1OF\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1TO\s0 \s-1OPERATE\s0 \s-1WITH\s0 \s-1ANY\s0 \s-1OTHER\s0 \s-1SOFTWARE\s0), \s-1EVEN\s0 \s-1IF\s0
\&\s-1SUCH\s0 \s-1HOLDER\s0 \s-1OR\s0 \s-1OTHER\s0 \s-1PARTY\s0 \s-1HAS\s0 \s-1BEEN\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0
\&\s-1SUCH\s0 \s-1DAMAGES\s0.
