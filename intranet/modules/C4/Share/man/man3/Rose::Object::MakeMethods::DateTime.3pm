.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Rose::Object::MakeMethods::DateTime 3"
.TH Rose::Object::MakeMethods::DateTime 3 "2010-10-17" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Rose::Object::MakeMethods::DateTime \- Create methods that store DateTime objects.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package MyObject;
\&
\&  use Rose::Object::MakeMethods::DateTime
\&  (
\&    datetime => 
\&    [
\&      \*(Aqbirthday\*(Aq,
\&      \*(Aqarrival\*(Aq => { tz => \*(AqUTC\*(Aq }
\&    ],
\&  );
\&
\&  ...
\&
\&  $obj = MyObject\->new(birthday => \*(Aq1/24/1984 1am\*(Aq);
\&
\&  $dt = $obj\->birthday; # DateTime object
\&
\&  $bday = $obj\->birthday(format => \*(Aq%B %E\*(Aq); # \*(AqJanuary 24th\*(Aq
\&
\&  # Shortcut for $obj\->birthday\->clone\->truncate(to => \*(Aqmonth\*(Aq);
\&  $month = $obj\->birthday(truncate => \*(Aqmonth\*(Aq);
\&
\&  $obj\->birthday(\*(Aqblah\*(Aq);       # croaks \- invalid date!
\&  $obj\->birthday(\*(Aq1999\-04\-31\*(Aq); # croaks \- invalid date!
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Rose::Object::MakeMethods::DateTime is a method maker that inherits
from Rose::Object::MakeMethods.  See the Rose::Object::MakeMethods
documentation to learn about the interface.  The method types provided
by this module are described below.  All methods work only with
hash-based objects.
.SH "METHODS TYPES"
.IX Header "METHODS TYPES"
.IP "\fBdatetime\fR" 4
.IX Item "datetime"
Create get/set methods for scalar attributes that store DateTime
objects.
.RS 4
.IP "Options" 4
.IX Item "Options"
.RS 4
.PD 0
.ie n .IP """hash_key""" 4
.el .IP "\f(CWhash_key\fR" 4
.IX Item "hash_key"
.PD
The key inside the hash-based object to use for the storage of this
attribute. Defaults to the name of the method.
.ie n .IP """init_method""" 4
.el .IP "\f(CWinit_method\fR" 4
.IX Item "init_method"
The name of the method to call when initializing the value of an
undefined attribute.  This option is only applicable when using the
\&\f(CW\*(C`get_set_init\*(C'\fR interface. Defaults to the method name with the prefix
\&\f(CW\*(C`init_\*(C'\fR added.
.Sp
This method should return a value that can be parsed by
Rose::DateTime::Util's the \fIparse_date()\fR
function. If the return value is a DateTime object, it will have its time
zone set (see the \f(CW\*(C`tz\*(C'\fR option below) using DateTime's
\&\fIset_time_zone()\fR method.
.ie n .IP """interface""" 4
.el .IP "\f(CWinterface\fR" 4
.IX Item "interface"
Chooses one of the two possible interfaces.  Defaults to \f(CW\*(C`get_set\*(C'\fR.
.ie n .IP """tz""" 4
.el .IP "\f(CWtz\fR" 4
.IX Item "tz"
The time zone of the DateTime object to be stored.  If present, this value
will be passed as the second argument to Rose::DateTime::Util's the
\&\fIparse_date()\fR function when creating
DateTime objects for storage. If absent, DateTime objects will use the
default time zone of the Rose::DateTime::Util class, which is set by
Rose::DateTime::Util's \fItime_zone()\fR class
method.  See the Rose::DateTime::Util documentation for more information.
.RE
.RS 4
.RE
.IP "Interfaces" 4
.IX Item "Interfaces"
.RS 4
.PD 0
.ie n .IP """get_set""" 4
.el .IP "\f(CWget_set\fR" 4
.IX Item "get_set"
.PD
Creates a get/set accessor method for an object attribute that stores a
DateTime object.
.Sp
When called with a single argument, the argument is passed through
Rose::DateTime::Util's \fIparse_date()\fR
function in order to create the DateTime object that is stored.  The
current value of the attribute is returned.  Passing a value that is not
understood by Rose::DateTime::Util's
\&\fIparse_date()\fR function causes a fatal error.
.Sp
When called with two arguments and the first argument is the string 'format',
then the second argument is taken as a format specifier which is passed to
Rose::DateTime::Util's \fIformat_date()\fR
function.  The formatted string is returned.  In other words, this:
.Sp
.Vb 1
\&    $obj\->birthday(format => \*(Aq%m/%d/%Y\*(Aq);
.Ve
.Sp
Is just a shortcut for this:
.Sp
.Vb 2
\&    Rose::DateTime::Util::format_date($obj\->birthday, 
\&                                      \*(Aq%m/%d/%Y\*(Aq);
.Ve
.Sp
When called with two arguments and the first argument is the string
\&'truncate', then the second argument is taken as a truncation specifier which
is passed to DateTime's \fItruncate()\fR method called on a
clone of the existing DateTime object.  The cloned, truncated DateTime
object is returned.  In other words, this:
.Sp
.Vb 1
\&    $obj\->birthday(truncate => \*(Aqmonth\*(Aq);
.Ve
.Sp
Is just a shortcut for this:
.Sp
.Vb 1
\&    $obj\->birthday\->clone\->truncate(to => \*(Aqmonth\*(Aq);
.Ve
.Sp
Passing more than two arguments or passing two arguments where the
first argument is not 'format' or 'truncate' will cause a fatal error.
.ie n .IP """get_set_init""" 4
.el .IP "\f(CWget_set_init\fR" 4
.IX Item "get_set_init"
Behaves like the \f(CW\*(C`get_set\*(C'\fR interface unless the value of the attribute is
undefined.  In that case, the method specified by the \f(CW\*(C`init_method\*(C'\fR option is
called, the return value is passed through Rose::DateTime::Util's
\&\fIparse_date()\fR function, and the attribute is
set to the return value.  An init method that returns a value that is not
understood by Rose::DateTime::Util's
\&\fIparse_date()\fR function will cause a fatal
error.
.RE
.RS 4
.RE
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 1
\&    package MyObject;
\&
\&    use Rose::Object::MakeMethods::DateTime
\&    (
\&      datetime => 
\&      [
\&        \*(Aqbirthday\*(Aq,
\&        \*(Aqarrival\*(Aq => { tz => \*(AqUTC\*(Aq }
\&      ],
\&
\&      \*(Aqdatetime \-\-get_set_init\*(Aq =>
\&      [
\&        \*(Aqdeparture\*(Aq => { tz => \*(AqUTC\*(Aq }
\&      ],
\&    );
\&
\&    sub init_departure 
\&    {
\&      DateTime\->new(month => 1, 
\&                    day   => 10,
\&                    year  => 2000,
\&                    time_zone => \*(AqAmerica/Chicago\*(Aq);
\&    }
\&
\&    ...
\&
\&    $obj = MyObject\->new(birthday => \*(Aq1/24/1984 1am\*(Aq);
\&
\&    $dt = $obj\->birthday; # DateTime object
\&
\&    $bday = $obj\->birthday(format => \*(Aq%B %E\*(Aq); # \*(AqJanuary 24th\*(Aq
\&
\&    # Shortcut for $obj\->birthday\->clone\->truncate(to => \*(Aqmonth\*(Aq);
\&    $month = $obj\->birthday(truncate => \*(Aqmonth\*(Aq);
\&
\&    $obj\->birthday(\*(Aqblah\*(Aq);       # croaks \- invalid date!
\&    $obj\->birthday(\*(Aq1999\-04\-31\*(Aq); # croaks \- invalid date!
\&
\&    # DateTime object with time zone set to UTC
\&    $dt = $obj\->arrival(\*(Aq2005\-21\-01 4pm\*(Aq);
\&
\&    # DateTime object with time zone set to UTC, not America/Chicago!
\&    #   Start with 2000\-01\-10T00:00:00 America/Chicago,
\&    #   then set_time_zone(\*(AqUTC\*(Aq), 
\&    #   which results in: 2000\-01\-10T06:00:00 UTC
\&    $dt = $obj\->departure;
\&
\&    print $dt; # "2000\-01\-10T06:00:00"
.Ve
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
John C. Siracusa (siracusa@gmail.com)
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 2010 by John C. Siracusa.  All rights reserved.  This program is
free software; you can redistribute it and/or modify it under the same terms
as Perl itself.
