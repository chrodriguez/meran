.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MARC::Crosswalk::DublinCore 3"
.TH MARC::Crosswalk::DublinCore 3 "2005-03-30" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MARC::Crosswalk::DublinCore \- Convert data between MARC and Dublin Core
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        my $crosswalk = MARC::Crosswalk::DublinCore\->new;
\&        
\&        # Convert a MARC record to Dublin Core (simple)
\&        my $marc = MARC::Record\->new_from_usmarc( $blob );
\&        my $dc   = $crosswalk\->as_dublincore( $marc );
\&
\&        # Convert simple DC to MARC
\&        $marc = $crosswalk\->as_marc( $dc );
\&        
\&        # Convert MARC to qualified DC instead
\&        $crosswalk\->qualified( 1 );
\&        $dc = $crosswalk\->as_dublincore( $marc );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides an implentation of the \s-1LOC\s0's spec on how to convert
metadata between \s-1MARC\s0 and Dublin Core format. The spec for converting \s-1MARC\s0 to
Dublin Core is available at: http://www.loc.gov/marc/marc2dc.html, and from \s-1DC\s0 to
\&\s-1MARC:\s0 http://www.loc.gov/marc/dccross.html.
.PP
\&\s-1NB:\s0 The conversion cannot be done in a round-trip manner. i.e. Doing a conversion
from \s-1MARC\s0 to \s-1DC\s0, then trying to go back to \s-1MARC\s0 will not yield the original record.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
To install this module via Module::Build:
.PP
.Vb 4
\&        perl Build.PL
\&        ./Build         # or \`perl Build\`
\&        ./Build test    # or \`perl Build test\`
\&        ./Build install # or \`perl Build install\`
.Ve
.PP
To install this module via ExtUtils::MakeMaker:
.PP
.Vb 4
\&        perl Makefile.PL
\&        make
\&        make test
\&        make install
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "new( %options )"
.el .SS "new( \f(CW%options\fP )"
.IX Subsection "new( %options )"
Creates a new crosswalk object. You can pass the \*(L"qualified\*(R" option (true/false) as
well.
.PP
.Vb 2
\&        # DC Simple
\&        $crosswalk = MARC::Crosswalk::DublinCore\->new;
\&
\&        # DC Qualified
\&        $crosswalk = MARC::Crosswalk::DublinCore\->new( qualified => 1 );
.Ve
.ie n .SS "qualified( $qualified )"
.el .SS "qualified( \f(CW$qualified\fP )"
.IX Subsection "qualified( $qualified )"
Allows you to specify if qualified Dublin Core should be used in
the input or output. Defaults to false (\s-1DC\s0 simple).
.PP
.Vb 2
\&        # DC Simple
\&        $crosswalk\->qualified( 0 );
\&
\&        # DC Qualified
\&        $crosswalk\->qualified( 1 );
.Ve
.ie n .SS "as_dublincore( $marc )"
.el .SS "as_dublincore( \f(CW$marc\fP )"
.IX Subsection "as_dublincore( $marc )"
convert a MARC::Record to a DublinCore::Record.
.ie n .SS "as_marc( $dublincore )"
.el .SS "as_marc( \f(CW$dublincore\fP )"
.IX Subsection "as_marc( $dublincore )"
convert a DublinCore::Record to a MARC::Record. \s-1NB:\s0 Not yet implemented.
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
Implement \fIas_marc()\fR
.IP "\(bu" 4
add tests
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
http://www.loc.gov/marc/marc2dc.html
.IP "\(bu" 4
http://www.loc.gov/marc/dccross.html
.IP "\(bu" 4
MARC::Record
.IP "\(bu" 4
DublinCore::Record
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "\(bu" 4
Brian Cassidy <bricas@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2005 by Brian Cassidy
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
