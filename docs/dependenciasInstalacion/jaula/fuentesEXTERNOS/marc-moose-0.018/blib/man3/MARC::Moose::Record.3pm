.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.19)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MARC::Moose::Record 3"
.TH MARC::Moose::Record 3 "2011-11-30" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MARC::Moose::Record \- MARC::Moose bibliographic record
.SH "VERSION"
.IX Header "VERSION"
version 0.018
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MARC::Moose::Record is an object, Moose based object, representing a MARC::Moose
bibliographic record. It can be a \s-1MARC21\s0, \s-1UNIMARC\s0, or whatever biblio record.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "leader"
.IX Subsection "leader"
Read-only string. The leader is fixed by set_leader_length method.
.SS "fields"
.IX Subsection "fields"
ArrayRef on MARC::Moose::Field objects: MARC::Moose:Fields::Control and
MARC::Moose::Field::Std.
.SH "METHODS"
.IX Header "METHODS"
.SS "append( \fIfield\fP )"
.IX Subsection "append( field )"
Append a MARC::Moose::Field in the record. The record is appended at the end of
numerical section, ie if you append for example a 710 field, it will be placed
at the end of the 7xx fields section, just before 8xx section or at the end of
fields list.
.PP
.Vb 6
\& $record\->append(
\&   MARC::Moose::Field::Std\->new(
\&    tag  => \*(Aq100\*(Aq,
\&    subf => [ [ a => \*(AqPoe, Edgar Allan\*(Aq ],
\&              [ u => \*(AqTranslation\*(Aq ] ]
\& ) );
.Ve
.PP
You can also append an array of MARC::Moose::Field. In this case, the array
will be appended as for a unique field at the position of the first field of
the array.
.SS "field( \fItag\fP )"
.IX Subsection "field( tag )"
Returns a list of tags that match the field specifier, or an empty list if
nothing matched.  In scalar context, returns the first matching tag, or undef
if nothing matched.
.PP
The field specifier can be a simple number (i.e. \*(L"245\*(R"), or use the \*(L".\*(R"
notation of wildcarding (i.e. subject tags are \*(L"6..\*(R"). All fields are returned
if \*(L"...\*(R" is specified.
.SS "as( \fIformat\fP )"
.IX Subsection "as( format )"
Returns a formated version of the record as defined by \fIformat\fR. Format are standard
formater provided by the MARC::Moose::Record package: Iso2709, Text, Marcxml,
Json, Yaml, Legacy.
.SS "set_leader_length( \fIlength\fP, \fIoffset\fP )"
.IX Subsection "set_leader_length( length, offset )"
This method is called to reset leader length of record and offset of data
section. This means something only for \s-1ISO2709\s0 formated records. So this method
is exlusively called by any formater which has to build a valid \s-1ISO2709\s0 data
stream. It also forces leader position 10 and 20\-23 since this variable values
aren't variable at all for any ordinary \s-1MARC\s0 record.
.PP
Called by MARC::Moose::Formater::Iso2709.
.PP
.Vb 1
\& $record\->set_leader_length( $length, $offset );
.Ve
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 4
\& use MARC::Moose::Record;
\& use MARC::Moose::Field::Control;
\& use MARC::Moose::Field::Std;
\& use MARC::Moose::Formater::Text;
\& 
\& my $record = MARC::Moose::Record\->new(
\&     fields => [
\&         MARC::Moose::Field::Control\->new(
\&             tag => \*(Aq001\*(Aq,
\&             value => \*(Aq1234\*(Aq ),
\&         MARC::Moose::Field::Std\->new(
\&             tag => \*(Aq245\*(Aq,
\&             subf => [ [ a => \*(AqMARC is dying for ever:\*(Aq ], [ b => \*(Aqwill it ever happen?\*(Aq ] ] ),
\&         MARC::Moose::Field::Std\->new(
\&             tag => \*(Aq260\*(Aq,
\&             subf => [
\&                 [ a => \*(AqParis:\*(Aq ],
\&                 [ b => \*(AqUsefull Press,\*(Aq ],
\&                 [ c => \*(Aq2010.\*(Aq ],
\&             ] ),
\&         MARC::Moose::Field::Std\->new(
\&             tag => \*(Aq600\*(Aq,
\&             subf => [ [ a => \*(AqLibrary\*(Aq ], [ b => \*(AqStandards\*(Aq ] ] ),
\&         MARC::Moose::Field::Std\->new(
\&             tag => \*(Aq900\*(Aq,
\&             subf => [ [ a => \*(AqMy local field 1\*(Aq ] ] ),
\&         MARC::Moose::Field::Std\->new(
\&             tag => \*(Aq901\*(Aq,
\&             subf => [ [ a => \*(AqMy local field 1\*(Aq ] ] ),
\&     ]
\& );
\&   
\& my $formater = MARC::Moose::Formater::Text\->new();
\& print $formater\->format( $record );
\& # Shortcut:
\& print $record\->as(\*(AqText\*(Aq);
\& 
\& $record\->fields( [ grep { $_\->tag < 900 } @{$record\->fields} ] );
\& print "After local fields removing:\en", $formater\->format($record);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
MARC::Moose
.IP "\(bu" 4
MARC::Moose::Field
.SH "AUTHOR"
.IX Header "AUTHOR"
Frederic Demians <f.demians@tamil.fr>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Frederic Demians.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
